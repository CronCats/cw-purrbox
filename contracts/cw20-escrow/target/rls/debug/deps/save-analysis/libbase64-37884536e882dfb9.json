{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1","program":"/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","base64","--edition=2018","/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=37884536e882dfb9","-C","extra-filename=-37884536e882dfb9","--out-dir","/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","-L","dependency=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps/libbase64-37884536e882dfb9.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[10387399929754765628,0]},"crate_root":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src","external_crates":[{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}}],"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":0,"byte_end":8809,"line_start":1,"line_end":245,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":117},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/mod.rs","byte_start":19078,"byte_end":19091,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":89}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/mod.rs","byte_start":110011,"byte_end":110024,"line_start":4,"line_end":4,"column_start":24,"column_end":37},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":157}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/mod.rs","byte_start":110063,"byte_end":110082,"line_start":5,"line_end":5,"column_start":38,"column_end":57},"alias_span":null,"name":"EncoderStringWriter","value":"","parent":{"krate":0,"index":157}},{"kind":"Use","ref_id":{"krate":0,"index":300},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3920,"byte_end":3939,"line_start":88,"line_end":88,"column_start":24,"column_end":43},"alias_span":null,"name":"encode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":294},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4019,"byte_end":4025,"line_start":90,"line_end":90,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4027,"byte_end":4040,"line_start":90,"line_end":90,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":298},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4042,"byte_end":4059,"line_start":90,"line_end":90,"column_start":48,"column_end":65},"alias_span":null,"name":"encode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4153,"byte_end":4159,"line_start":94,"line_end":94,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":362},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4161,"byte_end":4174,"line_start":94,"line_end":94,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":365},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4176,"byte_end":4193,"line_start":94,"line_end":94,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_config_buf","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":368},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4220,"byte_end":4239,"line_start":95,"line_end":95,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_config_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4241,"byte_end":4252,"line_start":95,"line_end":95,"column_start":46,"column_end":57},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":0,"byte_end":8809,"line_start":1,"line_end":245,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":49},{"krate":0,"index":89},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":269},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":392},{"krate":0,"index":459},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":395},{"krate":0,"index":477},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"decl_id":null,"docs":" # Configs","sig":null,"attributes":[{"value":"/ # Configs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":0,"byte_end":13,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":14,"byte_end":17,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ There isn't just one type of Base64; that would be too simple. You need to choose a character","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":18,"byte_end":115,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ set (standard, URL-safe, etc) and padding suffix (yes/no).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":116,"byte_end":178,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ The `Config` struct encapsulates this info. There are some common configs included: `STANDARD`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":179,"byte_end":278,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ `URL_SAFE`, etc. You can also make your own `Config` if needed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":279,"byte_end":346,"line_start":6,"line_end":6,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":347,"byte_end":350,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The functions that don't have `config` in the name (e.g. `encode()` and `decode()`) use the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":351,"byte_end":446,"line_start":8,"line_end":8,"column_start":1,"column_end":96}},{"value":"/ `STANDARD` config .","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":447,"byte_end":470,"line_start":9,"line_end":9,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":471,"byte_end":474,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The functions that write to a slice (the ones that end in `_slice`) are generally the fastest","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":475,"byte_end":572,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ because they don't need to resize anything. If it fits in your workflow and you care about","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":573,"byte_end":667,"line_start":12,"line_end":12,"column_start":1,"column_end":95}},{"value":"/ performance, keep using the same buffer (growing as need be) and use the `_slice` methods for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":668,"byte_end":765,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ the best performance.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":766,"byte_end":791,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":792,"byte_end":795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Encoding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":796,"byte_end":810,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":811,"byte_end":814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Several different encoding functions are available to you depending on your desire for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":815,"byte_end":905,"line_start":18,"line_end":18,"column_start":1,"column_end":91}},{"value":"/ convenience vs performance.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":906,"byte_end":937,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":938,"byte_end":941,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ | Function                | Output                       | Allocates                      |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":942,"byte_end":1037,"line_start":21,"line_end":21,"column_start":1,"column_end":96}},{"value":"/ | ----------------------- | ---------------------------- | ------------------------------ |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1038,"byte_end":1133,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ | `encode`                | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1134,"byte_end":1229,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"/ | `encode_config`         | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1230,"byte_end":1325,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"/ | `encode_config_buf`     | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1326,"byte_end":1421,"line_start":25,"line_end":25,"column_start":1,"column_end":96}},{"value":"/ | `encode_config_slice`   | Writes to provided `&[u8]`   | Never                          |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1422,"byte_end":1517,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1518,"byte_end":1521,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ All of the encoding functions that take a `Config` will pad as per the config.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1522,"byte_end":1604,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1605,"byte_end":1608,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ # Decoding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1609,"byte_end":1623,"line_start":30,"line_end":30,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ Just as for encoding, there are different decoding functions available.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1628,"byte_end":1703,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1704,"byte_end":1707,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ | Function                | Output                        | Allocates                      |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1708,"byte_end":1804,"line_start":34,"line_end":34,"column_start":1,"column_end":97}},{"value":"/ | ----------------------- | ----------------------------- | ------------------------------ |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1805,"byte_end":1901,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"/ | `decode`                | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1902,"byte_end":1998,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"/ | `decode_config`         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":1999,"byte_end":2095,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/ | `decode_config_buf`     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2096,"byte_end":2192,"line_start":38,"line_end":38,"column_start":1,"column_end":97}},{"value":"/ | `decode_config_slice`   | Writes to provided `&[u8]`    | Never                          |","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2193,"byte_end":2289,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2290,"byte_end":2293,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Unlike encoding, where all possible input is valid, decoding can fail (see `DecodeError`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2294,"byte_end":2388,"line_start":41,"line_end":41,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Input can be invalid because it has invalid characters or invalid padding. (No padding at all is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2393,"byte_end":2493,"line_start":43,"line_end":43,"column_start":1,"column_end":101}},{"value":"/ valid, but excess padding is not.) Whitespace in the input is invalid.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2494,"byte_end":2568,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2569,"byte_end":2572,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # `Read` and `Write`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2573,"byte_end":2597,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2598,"byte_end":2601,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ To map a `Read` of b64 bytes to the decoded bytes, wrap a reader (file, network socket, etc)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2602,"byte_end":2698,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/ with `base64::read::DecoderReader`. To write raw bytes and have them b64 encoded on the fly,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2699,"byte_end":2795,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/ wrap a writer with `base64::write::EncoderWriter`. There is some performance overhead (15% or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2796,"byte_end":2893,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/ so) because of the necessary buffer shuffling -- still fast enough that almost nobody cares.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2894,"byte_end":2990,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"/ Also, these implementations do not heap allocate.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":2991,"byte_end":3044,"line_start":52,"line_end":52,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3045,"byte_end":3048,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3049,"byte_end":3061,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3062,"byte_end":3065,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3066,"byte_end":3144,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3145,"byte_end":3148,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The `_slice` flavors of encode or decode will panic if the provided output slice is too small,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3149,"byte_end":3247,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3318,"byte_end":3508,"line_start":61,"line_end":70,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3509,"byte_end":3532,"line_start":71,"line_end":71,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":26},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":9136,"byte_end":9141,"line_start":13,"line_end":13,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":49},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":84}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"/ Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16355,"byte_end":16455,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16456,"byte_end":16459,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16460,"byte_end":16467,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"/ use base64::display::Base64Display;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16468,"byte_end":16507,"line_start":4,"line_end":4,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16508,"byte_end":16511,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16512,"byte_end":16552,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"/ let wrapper = Base64Display::with_config(&data, base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16553,"byte_end":16623,"line_start":7,"line_end":7,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16624,"byte_end":16627,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16628,"byte_end":16695,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16696,"byte_end":16703,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":70},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16932,"byte_end":16945,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":16828,"byte_end":16920,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17112,"byte_end":17123,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Base64Display>::with_config","value":"pub fn with_config(&[u8], Config) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided config.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17046,"byte_end":17100,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":89},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":152}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3773,"byte_end":3807,"line_start":81,"line_end":81,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Read` to transparently decode base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/mod.rs","byte_start":18976,"byte_end":19041,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":117},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":20088,"byte_end":20101,"line_start":32,"line_end":32,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[{"value":"/ A `Read` implementation that decodes base64 data read from an underlying reader.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19471,"byte_end":19555,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19556,"byte_end":19559,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19560,"byte_end":19574,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19575,"byte_end":19578,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19579,"byte_end":19586,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use std::io::Read;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19587,"byte_end":19609,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19610,"byte_end":19634,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19635,"byte_end":19638,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19639,"byte_end":19736,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ let mut wrapped_reader = Cursor::new(b\"YXNkZg==\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19737,"byte_end":19791,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ let mut decoder = base64::read::DecoderReader::new(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19792,"byte_end":19847,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     &mut wrapped_reader, base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19848,"byte_end":19895,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19896,"byte_end":19899,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19900,"byte_end":19942,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ let mut result = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19943,"byte_end":19975,"line_start":26,"line_end":26,"column_start":1,"column_end":33}},{"value":"/ decoder.read_to_end(&mut result).unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":19976,"byte_end":20022,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":20023,"byte_end":20026,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b\"asdf\", &result[..]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":20027,"byte_end":20064,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":20065,"byte_end":20068,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":20069,"byte_end":20076,"line_start":31,"line_end":31,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21815,"byte_end":21818,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"pub fn new(&'a mut R, Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[{"value":"/ Create a new decoder that will read from the provided reader `r`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21734,"byte_end":21803,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":157},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":223},{"krate":0,"index":263},{"krate":0,"index":266}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3834,"byte_end":3868,"line_start":84,"line_end":84,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/mod.rs","byte_start":109881,"byte_end":109947,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":189},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":112147,"byte_end":112160,"line_start":56,"line_end":56,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110534,"byte_end":110628,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110629,"byte_end":110632,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110633,"byte_end":110728,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110729,"byte_end":110821,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110822,"byte_end":110918,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":110919,"byte_end":111015,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111016,"byte_end":111065,"line_start":20,"line_end":20,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111066,"byte_end":111069,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111070,"byte_end":111084,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111085,"byte_end":111088,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111089,"byte_end":111096,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111097,"byte_end":111120,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111121,"byte_end":111124,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111125,"byte_end":111220,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ let mut enc = base64::write::EncoderWriter::new(Vec::new(), base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111221,"byte_end":111303,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111304,"byte_end":111307,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111308,"byte_end":111350,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111351,"byte_end":111387,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111388,"byte_end":111391,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111392,"byte_end":111459,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/ // about handling errors or getting the delegate writer back","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111460,"byte_end":111524,"line_start":34,"line_end":34,"column_start":1,"column_end":65}},{"value":"/ let delegate = enc.finish().unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111525,"byte_end":111566,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111567,"byte_end":111570,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111571,"byte_end":111610,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &delegate[..]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111611,"byte_end":111654,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111655,"byte_end":111658,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111659,"byte_end":111666,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111667,"byte_end":111670,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111671,"byte_end":111683,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111684,"byte_end":111687,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111688,"byte_end":111783,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111784,"byte_end":111820,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111821,"byte_end":111824,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111825,"byte_end":111837,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111838,"byte_end":111841,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111842,"byte_end":111937,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111938,"byte_end":111982,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111983,"byte_end":111986,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":111987,"byte_end":112004,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":112005,"byte_end":112008,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":112009,"byte_end":112095,"line_start":54,"line_end":54,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":112096,"byte_end":112135,"line_start":55,"line_end":55,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113759,"byte_end":113762,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter<W>>::new","value":"pub fn new(W, Config) -> EncoderWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer `w`.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer `w`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113670,"byte_end":113747,"line_start":90,"line_end":90,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114851,"byte_end":114857,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter<W>>::finish","value":"pub fn finish(&mut Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114101,"byte_end":114193,"line_start":103,"line_end":103,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114198,"byte_end":114233,"line_start":104,"line_end":104,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114238,"byte_end":114241,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes or calls to this method are allowed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114246,"byte_end":114324,"line_start":106,"line_end":106,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114329,"byte_end":114332,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114337,"byte_end":114432,"line_start":108,"line_end":108,"column_start":5,"column_end":100}},{"value":"/ all input provided to its `write` each invocation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114437,"byte_end":114491,"line_start":109,"line_end":109,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114496,"byte_end":114499,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If you don't care about error handling, it is not necessary to call this function, as the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114504,"byte_end":114597,"line_start":111,"line_end":111,"column_start":5,"column_end":98}},{"value":"/ equivalent finalization is done by the Drop impl.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114602,"byte_end":114655,"line_start":112,"line_end":112,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114660,"byte_end":114663,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Returns the writer that this was constructed around.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114668,"byte_end":114724,"line_start":114,"line_end":114,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114729,"byte_end":114732,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114737,"byte_end":114749,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114754,"byte_end":114757,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of `ErrorKind::Interrupted` will be returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":114762,"byte_end":114839,"line_start":118,"line_end":118,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127308,"byte_end":127327,"line_start":52,"line_end":52,"column_start":12,"column_end":31},"name":"EncoderStringWriter","qualname":"::write::encoder_string_writer::EncoderStringWriter","value":"EncoderStringWriter {  }","parent":null,"children":[{"krate":0,"index":238}],"decl_id":null,"docs":" A `Write` implementation that base64-encodes data using the provided config and accumulates the\n resulting base64 in memory, which is then exposed as a String via `into_inner()`.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64-encodes data using the provided config and accumulates the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126073,"byte_end":126172,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ resulting base64 in memory, which is then exposed as a String via `into_inner()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126173,"byte_end":126258,"line_start":7,"line_end":7,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126259,"byte_end":126262,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126263,"byte_end":126277,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126278,"byte_end":126281,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Buffer base64 in a new String:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126282,"byte_end":126316,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126317,"byte_end":126320,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126321,"byte_end":126328,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126329,"byte_end":126352,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126353,"byte_end":126356,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::new(base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126357,"byte_end":126433,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126434,"byte_end":126437,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126438,"byte_end":126474,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126475,"byte_end":126478,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // get the resulting String","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126479,"byte_end":126510,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ let b64_string = enc.into_inner();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126511,"byte_end":126549,"line_start":21,"line_end":21,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126550,"byte_end":126553,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"YXNkZg==\", &b64_string);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126554,"byte_end":126594,"line_start":23,"line_end":23,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126595,"byte_end":126602,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126603,"byte_end":126606,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Or, append to an existing String:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126607,"byte_end":126644,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126645,"byte_end":126648,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126649,"byte_end":126656,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126657,"byte_end":126680,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126681,"byte_end":126684,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut buf = String::from(\"base64: \");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126685,"byte_end":126728,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126729,"byte_end":126732,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::from(&mut buf, base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126733,"byte_end":126820,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126821,"byte_end":126824,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126825,"byte_end":126861,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126862,"byte_end":126865,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // release the &mut reference on buf","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126866,"byte_end":126906,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/ let _ = enc.into_inner();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126907,"byte_end":126936,"line_start":38,"line_end":38,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126937,"byte_end":126940,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: YXNkZg==\", &buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126941,"byte_end":126982,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126983,"byte_end":126990,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126991,"byte_end":126994,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":126995,"byte_end":127007,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127008,"byte_end":127011,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127012,"byte_end":127107,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127108,"byte_end":127144,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127145,"byte_end":127148,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127149,"byte_end":127166,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127167,"byte_end":127170,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Because it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127171,"byte_end":127268,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/ bytes to a `io::Write`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127269,"byte_end":127296,"line_start":51,"line_end":51,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127548,"byte_end":127552,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"from","qualname":"<EncoderStringWriter<S>>::from","value":"pub fn from(S, Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will append to the provided `StrConsumer`.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will append to the provided `StrConsumer`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127456,"byte_end":127536,"line_start":57,"line_end":57,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128042,"byte_end":128052,"line_start":70,"line_end":70,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EncoderStringWriter<S>>::into_inner","value":"pub fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data, including any trailing incomplete input triples and\n associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data, including any trailing incomplete input triples and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127739,"byte_end":127830,"line_start":64,"line_end":64,"column_start":5,"column_end":96}},{"value":"/ associated padding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127835,"byte_end":127858,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127863,"byte_end":127866,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes or calls to this method are allowed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127871,"byte_end":127949,"line_start":67,"line_end":67,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127954,"byte_end":127957,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Returns the base64-encoded form of the accumulated written data.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127962,"byte_end":128030,"line_start":69,"line_end":69,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128354,"byte_end":128357,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderStringWriter<String>>::new","value":"pub fn new(Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will encode into a new String with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will encode into a new String with the provided config.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128249,"byte_end":128342,"line_start":79,"line_end":79,"column_start":5,"column_end":98}}]},{"kind":"Trait","id":{"krate":0,"index":249},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128768,"byte_end":128779,"line_start":96,"line_end":96,"column_start":11,"column_end":22},"name":"StrConsumer","qualname":"::write::encoder_string_writer::StrConsumer","value":"StrConsumer","parent":null,"children":[{"krate":0,"index":250}],"decl_id":null,"docs":" An abstraction around consuming `str`s produced by base64 encoding.\n","sig":null,"attributes":[{"value":"/ An abstraction around consuming `str`s produced by base64 encoding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128686,"byte_end":128757,"line_start":95,"line_end":95,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128838,"byte_end":128845,"line_start":98,"line_end":98,"column_start":8,"column_end":15},"name":"consume","qualname":"::write::encoder_string_writer::StrConsumer::consume","value":"pub fn consume(&mut Self, &str)","parent":{"krate":0,"index":249},"children":[],"decl_id":null,"docs":" Consume the base64 encoded data in `buf`\n","sig":null,"attributes":[{"value":"/ Consume the base64 encoded data in `buf`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128786,"byte_end":128830,"line_start":97,"line_end":97,"column_start":5,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131674,"byte_end":131680,"line_start":23,"line_end":23,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.\nConvenience for `encode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131328,"byte_end":131365,"line_start":8,"line_end":8,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131366,"byte_end":131386,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/Convenience for `encode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131387,"byte_end":131448,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131449,"byte_end":131452,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131453,"byte_end":131465,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131466,"byte_end":131469,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131470,"byte_end":131480,"line_start":14,"line_end":14,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131481,"byte_end":131504,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131505,"byte_end":131508,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131509,"byte_end":131523,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode(b\"hello world\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131524,"byte_end":131572,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131573,"byte_end":131600,"line_start":19,"line_end":19,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131601,"byte_end":131605,"line_start":20,"line_end":20,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131606,"byte_end":131612,"line_start":21,"line_end":21,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131613,"byte_end":131666,"line_start":22,"line_end":22,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":296},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132185,"byte_end":132198,"line_start":44,"line_end":44,"column_start":8,"column_end":21},"name":"encode_config","qualname":"::encode::encode_config","value":"pub fn encode_config<T: AsRef<[u8]>>(T, Config) -> String","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nReturns a String.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131757,"byte_end":131794,"line_start":27,"line_end":27,"column_start":1,"column_end":38}},{"value":"/Returns a String.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131795,"byte_end":131815,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131816,"byte_end":131819,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131820,"byte_end":131832,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131833,"byte_end":131836,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131837,"byte_end":131847,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131848,"byte_end":131871,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131872,"byte_end":131875,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131876,"byte_end":131890,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/    let b64 = base64::encode_config(b\"hello world~\", base64::STANDARD);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131891,"byte_end":131965,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/    println!(\"{}\", b64);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131966,"byte_end":131993,"line_start":37,"line_end":37,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131994,"byte_end":131997,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/    let b64_url = base64::encode_config(b\"hello internet~\", base64::URL_SAFE);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":131998,"byte_end":132079,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", b64_url);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132080,"byte_end":132111,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132112,"byte_end":132116,"line_start":41,"line_end":41,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132117,"byte_end":132123,"line_start":42,"line_end":42,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132124,"byte_end":132177,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":298},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133106,"byte_end":133123,"line_start":74,"line_end":74,"column_start":8,"column_end":25},"name":"encode_config_buf","qualname":"::encode::encode_config_buf","value":"pub fn encode_config_buf<T: AsRef<[u8]>>(T, Config, &mut String)","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64.\nWrites into the supplied output buffer, which will grow the buffer if needed.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132562,"byte_end":132599,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/Writes into the supplied output buffer, which will grow the buffer if needed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132600,"byte_end":132680,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132681,"byte_end":132684,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132685,"byte_end":132697,"line_start":58,"line_end":58,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132698,"byte_end":132701,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132702,"byte_end":132712,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132713,"byte_end":132736,"line_start":61,"line_end":61,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132737,"byte_end":132740,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132741,"byte_end":132755,"line_start":63,"line_end":63,"column_start":1,"column_end":15}},{"value":"/    let mut buf = String::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132756,"byte_end":132791,"line_start":64,"line_end":64,"column_start":1,"column_end":36}},{"value":"/    base64::encode_config_buf(b\"hello world~\", base64::STANDARD, &mut buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132792,"byte_end":132870,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132871,"byte_end":132898,"line_start":66,"line_end":66,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132899,"byte_end":132902,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/    buf.clear();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132903,"byte_end":132922,"line_start":68,"line_end":68,"column_start":1,"column_end":20}},{"value":"/    base64::encode_config_buf(b\"hello internet~\", base64::URL_SAFE, &mut buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":132923,"byte_end":133004,"line_start":69,"line_end":69,"column_start":1,"column_end":82}},{"value":"/    println!(\"{}\", buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133005,"byte_end":133032,"line_start":70,"line_end":70,"column_start":1,"column_end":28}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133033,"byte_end":133037,"line_start":71,"line_end":71,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133038,"byte_end":133044,"line_start":72,"line_end":72,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133045,"byte_end":133098,"line_start":73,"line_end":73,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":300},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134399,"byte_end":134418,"line_start":117,"line_end":117,"column_start":8,"column_end":27},"name":"encode_config_slice","qualname":"::encode::encode_config_slice","value":"pub fn encode_config_slice<T: AsRef<[u8]>>(T, Config, &mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133489,"byte_end":133527,"line_start":87,"line_end":87,"column_start":1,"column_end":39}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133528,"byte_end":133571,"line_start":88,"line_end":88,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133572,"byte_end":133575,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133576,"byte_end":133672,"line_start":90,"line_end":90,"column_start":1,"column_end":97}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133673,"byte_end":133709,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133710,"byte_end":133713,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133714,"byte_end":133726,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133727,"byte_end":133730,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ If `output` is too small to hold the encoded version of `input`, a panic will result.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133731,"byte_end":133820,"line_start":95,"line_end":95,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133821,"byte_end":133824,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133825,"byte_end":133838,"line_start":97,"line_end":97,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133839,"byte_end":133842,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133843,"byte_end":133854,"line_start":99,"line_end":99,"column_start":1,"column_end":12}},{"value":"/ extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133855,"byte_end":133879,"line_start":100,"line_end":100,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133880,"byte_end":133883,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133884,"byte_end":133899,"line_start":102,"line_end":102,"column_start":1,"column_end":16}},{"value":"/     let s = b\"hello internet!\";","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133900,"byte_end":133935,"line_start":103,"line_end":103,"column_start":1,"column_end":36}},{"value":"/     let mut buf = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133936,"byte_end":133969,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/     // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":133970,"byte_end":134041,"line_start":105,"line_end":105,"column_start":1,"column_end":72}},{"value":"/     buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134042,"byte_end":134085,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134086,"byte_end":134089,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/     let bytes_written = base64::encode_config_slice(s,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134090,"byte_end":134148,"line_start":108,"line_end":108,"column_start":1,"column_end":59}},{"value":"/                             base64::STANDARD, &mut buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134149,"byte_end":134209,"line_start":109,"line_end":109,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134210,"byte_end":134213,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/     // shorten our vec down to just what was written","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134214,"byte_end":134270,"line_start":111,"line_end":111,"column_start":1,"column_end":57}},{"value":"/     buf.resize(bytes_written, 0);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134271,"byte_end":134308,"line_start":112,"line_end":112,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134309,"byte_end":134312,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/     assert_eq!(s, base64::decode(&buf).unwrap().as_slice());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134313,"byte_end":134377,"line_start":114,"line_end":114,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134378,"byte_end":134383,"line_start":115,"line_end":115,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/encode.rs","byte_start":134384,"byte_end":134391,"line_start":116,"line_end":116,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":438},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155767,"byte_end":155778,"line_start":30,"line_end":30,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155675,"byte_end":155762,"line_start":29,"line_end":29,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156211,"byte_end":156224,"line_start":36,"line_end":36,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n A typical cause of this is stray trailing whitespace or other separator bytes.\n In the case where excess trailing bytes have produced an invalid length *and* the last byte\n is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\n will be emitted instead of `InvalidLength` to make the issue easier to debug.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155795,"byte_end":155834,"line_start":31,"line_end":31,"column_start":5,"column_end":44}},{"value":"/ A typical cause of this is stray trailing whitespace or other separator bytes.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155839,"byte_end":155921,"line_start":32,"line_end":32,"column_start":5,"column_end":87}},{"value":"/ In the case where excess trailing bytes have produced an invalid length *and* the last byte","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155926,"byte_end":156021,"line_start":33,"line_end":33,"column_start":5,"column_end":100}},{"value":"/ is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156026,"byte_end":156120,"line_start":34,"line_end":34,"column_start":5,"column_end":99}},{"value":"/ will be emitted instead of `InvalidLength` to make the issue easier to debug.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156125,"byte_end":156206,"line_start":35,"line_end":35,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156567,"byte_end":156584,"line_start":41,"line_end":41,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156230,"byte_end":156326,"line_start":37,"line_end":37,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156331,"byte_end":156387,"line_start":38,"line_end":38,"column_start":5,"column_end":61}},{"value":"/ Unlike InvalidByte, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156392,"byte_end":156484,"line_start":39,"line_end":39,"column_start":5,"column_end":97}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156489,"byte_end":156562,"line_start":40,"line_end":40,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":437},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155657,"byte_end":155668,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"pub enum DecodeError {\n    InvalidByte(usize, u8),\n    InvalidLength,\n    InvalidLastSymbol(usize, u8),\n}","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":442},{"krate":0,"index":444}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":155567,"byte_end":155608,"line_start":26,"line_end":26,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":360},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157930,"byte_end":157936,"line_start":88,"line_end":88,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.\nConvenience `decode_config(input, base64::STANDARD);`.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157543,"byte_end":157585,"line_start":73,"line_end":73,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157586,"byte_end":157627,"line_start":74,"line_end":74,"column_start":1,"column_end":42}},{"value":"/Convenience `decode_config(input, base64::STANDARD);`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157628,"byte_end":157685,"line_start":75,"line_end":75,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157686,"byte_end":157689,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157690,"byte_end":157702,"line_start":77,"line_end":77,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157703,"byte_end":157706,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157707,"byte_end":157717,"line_start":79,"line_end":79,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157718,"byte_end":157741,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157742,"byte_end":157745,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157746,"byte_end":157760,"line_start":82,"line_end":82,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode(\"aGVsbG8gd29ybGQ=\").unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157761,"byte_end":157824,"line_start":83,"line_end":83,"column_start":1,"column_end":64}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157825,"byte_end":157856,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157857,"byte_end":157861,"line_start":85,"line_end":85,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157862,"byte_end":157868,"line_start":86,"line_end":86,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157869,"byte_end":157922,"line_start":87,"line_end":87,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":362},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158534,"byte_end":158547,"line_start":109,"line_end":109,"column_start":8,"column_end":21},"name":"decode_config","qualname":"::decode::decode_config","value":"pub fn decode_config<T: AsRef<[u8]>>(T, Config)\n-> Result<Vec<u8>, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nReturns a Result containing a Vec<u8>.","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158035,"byte_end":158077,"line_start":92,"line_end":92,"column_start":1,"column_end":43}},{"value":"/Returns a Result containing a Vec<u8>.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158078,"byte_end":158119,"line_start":93,"line_end":93,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158120,"byte_end":158123,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158124,"byte_end":158136,"line_start":95,"line_end":95,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158137,"byte_end":158140,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158141,"byte_end":158151,"line_start":97,"line_end":97,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158152,"byte_end":158175,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158176,"byte_end":158179,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158180,"byte_end":158194,"line_start":100,"line_end":100,"column_start":1,"column_end":15}},{"value":"/    let bytes = base64::decode_config(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD).unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158195,"byte_end":158287,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"/    println!(\"{:?}\", bytes);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158288,"byte_end":158319,"line_start":102,"line_end":102,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158320,"byte_end":158323,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/    let bytes_url = base64::decode_config(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE).unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158324,"byte_end":158424,"line_start":104,"line_end":104,"column_start":1,"column_end":101}},{"value":"/    println!(\"{:?}\", bytes_url);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158425,"byte_end":158460,"line_start":105,"line_end":105,"column_start":1,"column_end":36}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158461,"byte_end":158465,"line_start":106,"line_end":106,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158466,"byte_end":158472,"line_start":107,"line_end":107,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158473,"byte_end":158526,"line_start":108,"line_end":108,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":365},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159598,"byte_end":159615,"line_start":144,"line_end":144,"column_start":8,"column_end":25},"name":"decode_config_buf","qualname":"::decode::decode_config_buf","value":"pub fn decode_config_buf<T: AsRef<[u8]>>(T, Config, &mut Vec<u8>)\n-> Result<(), DecodeError>","parent":null,"children":[],"decl_id":null,"docs":"Decode from string reference as octets.\nWrites into the supplied buffer to avoid allocation.\nReturns a Result containing an empty tuple, aka ().","sig":null,"attributes":[{"value":"/Decode from string reference as octets.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158945,"byte_end":158987,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/Writes into the supplied buffer to avoid allocation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":158988,"byte_end":159043,"line_start":123,"line_end":123,"column_start":1,"column_end":56}},{"value":"/Returns a Result containing an empty tuple, aka ().","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159044,"byte_end":159098,"line_start":124,"line_end":124,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159099,"byte_end":159102,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/# Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159103,"byte_end":159115,"line_start":126,"line_end":126,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159116,"byte_end":159119,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159120,"byte_end":159130,"line_start":128,"line_end":128,"column_start":1,"column_end":11}},{"value":"/extern crate base64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159131,"byte_end":159154,"line_start":129,"line_end":129,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159155,"byte_end":159158,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/fn main() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159159,"byte_end":159173,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/    let mut buffer = Vec::<u8>::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159174,"byte_end":159215,"line_start":132,"line_end":132,"column_start":1,"column_end":42}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gd29ybGR+Cg==\", base64::STANDARD, &mut buffer).unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159216,"byte_end":159313,"line_start":133,"line_end":133,"column_start":1,"column_end":98}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159314,"byte_end":159346,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159347,"byte_end":159350,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/    buffer.clear();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159351,"byte_end":159373,"line_start":136,"line_end":136,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159374,"byte_end":159377,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/    base64::decode_config_buf(\"aGVsbG8gaW50ZXJuZXR-Cg==\", base64::URL_SAFE, &mut buffer)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159378,"byte_end":159469,"line_start":138,"line_end":138,"column_start":1,"column_end":92}},{"value":"/        .unwrap();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159470,"byte_end":159491,"line_start":139,"line_end":139,"column_start":1,"column_end":22}},{"value":"/    println!(\"{:?}\", buffer);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159492,"byte_end":159524,"line_start":140,"line_end":140,"column_start":1,"column_end":33}},{"value":"/}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159525,"byte_end":159529,"line_start":141,"line_end":141,"column_start":1,"column_end":5}},{"value":"/```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159530,"byte_end":159536,"line_start":142,"line_end":142,"column_start":1,"column_end":7}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":159537,"byte_end":159590,"line_start":143,"line_end":143,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":368},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160871,"byte_end":160890,"line_start":180,"line_end":180,"column_start":8,"column_end":27},"name":"decode_config_slice","qualname":"::decode::decode_config_slice","value":"pub fn decode_config_slice<T: AsRef<[u8]>>(T, Config, &mut [u8])\n-> Result<usize, DecodeError>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160380,"byte_end":160432,"line_start":171,"line_end":171,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160433,"byte_end":160436,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160437,"byte_end":160536,"line_start":173,"line_end":173,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160537,"byte_end":160540,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ If you don't know ahead of time what the decoded length should be, size your buffer with a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160541,"byte_end":160635,"line_start":175,"line_end":175,"column_start":1,"column_end":95}},{"value":"/ conservative estimate for the decoded length of an input: 3 bytes of output for every 4 bytes of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160636,"byte_end":160736,"line_start":176,"line_end":176,"column_start":1,"column_end":101}},{"value":"/ input, rounded up, or in other words `(input_len + 3) / 4 * 3`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160737,"byte_end":160804,"line_start":177,"line_end":177,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160805,"byte_end":160808,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ If the slice is not large enough, this will panic.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":160809,"byte_end":160863,"line_start":179,"line_end":179,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":460},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4511,"byte_end":4519,"line_start":106,"line_end":106,"column_start":5,"column_end":13},"name":"Standard","qualname":"::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard character set (uses `+` and `/`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4377,"byte_end":4427,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4432,"byte_end":4435,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4440,"byte_end":4506,"line_start":105,"line_end":105,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":462},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4659,"byte_end":4666,"line_start":110,"line_end":110,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe character set (uses `-` and `_`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4525,"byte_end":4575,"line_start":107,"line_end":107,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4580,"byte_end":4583,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4588,"byte_end":4654,"line_start":109,"line_end":109,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":464},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4892,"byte_end":4897,"line_start":114,"line_end":114,"column_start":5,"column_end":10},"name":"Crypt","qualname":"::CharacterSet::Crypt","value":"CharacterSet::Crypt","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","sig":null,"attributes":[{"value":"/ The `crypt(3)` character set (uses `./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4672,"byte_end":4779,"line_start":111,"line_end":111,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4784,"byte_end":4787,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4792,"byte_end":4887,"line_start":113,"line_end":113,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":466},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5011,"byte_end":5017,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Bcrypt","qualname":"::CharacterSet::Bcrypt","value":"CharacterSet::Bcrypt","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).\n","sig":null,"attributes":[{"value":"/ The bcrypt character set (uses `./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4903,"byte_end":5006,"line_start":115,"line_end":115,"column_start":5,"column_end":108}}]},{"kind":"TupleVariant","id":{"krate":0,"index":468},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5179,"byte_end":5188,"line_start":120,"line_end":120,"column_start":5,"column_end":14},"name":"ImapMutf7","qualname":"::CharacterSet::ImapMutf7","value":"CharacterSet::ImapMutf7","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[{"value":"/ The character set used in IMAP-modified UTF-7 (uses `+` and `,`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5023,"byte_end":5092,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5097,"byte_end":5100,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5105,"byte_end":5174,"line_start":119,"line_end":119,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":470},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5349,"byte_end":5355,"line_start":124,"line_end":124,"column_start":5,"column_end":11},"name":"BinHex","qualname":"::CharacterSet::BinHex","value":"CharacterSet::BinHex","parent":{"krate":0,"index":459},"children":[],"decl_id":null,"docs":" The character set used in BinHex 4.0 files.","sig":null,"attributes":[{"value":"/ The character set used in BinHex 4.0 files.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5194,"byte_end":5241,"line_start":121,"line_end":121,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5246,"byte_end":5249,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ See [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5254,"byte_end":5344,"line_start":123,"line_end":123,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":459},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4358,"byte_end":4370,"line_start":102,"line_end":102,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::CharacterSet","value":"pub enum CharacterSet { Standard, UrlSafe, Crypt, Bcrypt, ImapMutf7, BinHex, }","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470}],"decl_id":null,"docs":" Available encoding character sets\n","sig":null,"attributes":[{"value":"/ Available encoding character sets","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":4281,"byte_end":4318,"line_start":100,"line_end":100,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":477},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6388,"byte_end":6394,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"Config","qualname":"::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding\n","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6289,"byte_end":6346,"line_start":151,"line_end":151,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6719,"byte_end":6722,"line_start":164,"line_end":164,"column_start":18,"column_end":21},"name":"new","qualname":"<Config>::new","value":"pub const fn new(CharacterSet, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Config`.\n","sig":null,"attributes":[{"value":"/ Create a new `Config`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6675,"byte_end":6701,"line_start":163,"line_end":163,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6963,"byte_end":6966,"line_start":173,"line_end":173,"column_start":18,"column_end":21},"name":"pad","qualname":"<Config>::pad","value":"pub const fn pad(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to pad output with `=` characters.\n","sig":null,"attributes":[{"value":"/ Sets whether to pad output with `=` characters.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6894,"byte_end":6945,"line_start":172,"line_end":172,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7254,"byte_end":7280,"line_start":181,"line_end":181,"column_start":18,"column_end":44},"name":"decode_allow_trailing_bits","qualname":"<Config>::decode_allow_trailing_bits","value":"pub const fn decode_allow_trailing_bits(Self, bool) -> Config","parent":null,"children":[],"decl_id":null,"docs":" Sets whether to emit errors for nonzero trailing bits.","sig":null,"attributes":[{"value":"/ Sets whether to emit errors for nonzero trailing bits.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7038,"byte_end":7096,"line_start":177,"line_end":177,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7101,"byte_end":7104,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This is useful when implementing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7109,"byte_end":7145,"line_start":179,"line_end":179,"column_start":5,"column_end":41}},{"value":"/ [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7150,"byte_end":7236,"line_start":180,"line_end":180,"column_start":5,"column_end":91}}]},{"kind":"Const","id":{"krate":0,"index":404},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7465,"byte_end":7473,"line_start":190,"line_end":190,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::STANDARD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set with padding.\n","sig":null,"attributes":[{"value":"/ Standard character set with padding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7414,"byte_end":7454,"line_start":189,"line_end":189,"column_start":1,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":405},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7643,"byte_end":7658,"line_start":197,"line_end":197,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::STANDARD_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Standard character set without padding.\n","sig":null,"attributes":[{"value":"/ Standard character set without padding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7589,"byte_end":7632,"line_start":196,"line_end":196,"column_start":1,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":406},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7825,"byte_end":7833,"line_start":204,"line_end":204,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::URL_SAFE","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set with padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set with padding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7775,"byte_end":7814,"line_start":203,"line_end":203,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":407},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8001,"byte_end":8016,"line_start":211,"line_end":211,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::URL_SAFE_NO_PAD","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" URL-safe character set without padding\n","sig":null,"attributes":[{"value":"/ URL-safe character set without padding","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":7948,"byte_end":7990,"line_start":210,"line_end":210,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":408},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8177,"byte_end":8182,"line_start":218,"line_end":218,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::CRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" As per `crypt(3)` requirements\n","sig":null,"attributes":[{"value":"/ As per `crypt(3)` requirements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8132,"byte_end":8166,"line_start":217,"line_end":217,"column_start":1,"column_end":35}}]},{"kind":"Const","id":{"krate":0,"index":409},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8331,"byte_end":8337,"line_start":225,"line_end":225,"column_start":11,"column_end":17},"name":"BCRYPT","qualname":"::BCRYPT","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" Bcrypt character set\n","sig":null,"attributes":[{"value":"/ Bcrypt character set","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8296,"byte_end":8320,"line_start":224,"line_end":224,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":410},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8499,"byte_end":8509,"line_start":232,"line_end":232,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::IMAP_MUTF7","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" IMAP modified UTF-7 requirements\n","sig":null,"attributes":[{"value":"/ IMAP modified UTF-7 requirements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8452,"byte_end":8488,"line_start":231,"line_end":231,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":411},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8662,"byte_end":8668,"line_start":239,"line_end":239,"column_start":11,"column_end":17},"name":"BINHEX","qualname":"::BINHEX","value":"Config","parent":null,"children":[],"decl_id":null,"docs":" BinHex character set\n","sig":null,"attributes":[{"value":"/ BinHex character set","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":8627,"byte_end":8651,"line_start":238,"line_end":238,"column_start":1,"column_end":25}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":9492,"byte_end":9506,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":11826,"byte_end":11836,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":12011,"byte_end":12021,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17022,"byte_end":17035,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17314,"byte_end":17327,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17648,"byte_end":17661,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21157,"byte_end":21170,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21707,"byte_end":21720,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":25033,"byte_end":25046,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113255,"byte_end":113268,"line_start":76,"line_end":76,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113647,"byte_end":113660,"line_start":89,"line_end":89,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":118728,"byte_end":118741,"line_start":220,"line_end":220,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":125785,"byte_end":125798,"line_start":374,"line_end":374,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127427,"byte_end":127446,"line_start":56,"line_end":56,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128215,"byte_end":128234,"line_start":78,"line_end":78,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128481,"byte_end":128500,"line_start":85,"line_end":85,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":129151,"byte_end":129157,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":129524,"byte_end":129548,"line_start":122,"line_end":122,"column_start":36,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":261},{"krate":0,"index":262}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156622,"byte_end":156633,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157184,"byte_end":157195,"line_start":59,"line_end":59,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5365,"byte_end":5377,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6662,"byte_end":6668,"line_start":162,"line_end":162,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3764,"byte_end":3771,"line_start":80,"line_end":80,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":49}},{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3816,"byte_end":3820,"line_start":82,"line_end":82,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":89}},{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":3877,"byte_end":3882,"line_start":85,"line_end":85,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":157}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":9492,"byte_end":9506,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":11826,"byte_end":11836,"line_start":93,"line_end":93,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/chunked_encoder.rs","byte_start":12011,"byte_end":12021,"line_start":100,"line_end":100,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":39},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17022,"byte_end":17035,"line_start":23,"line_end":23,"column_start":10,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17314,"byte_end":17327,"line_start":33,"line_end":33,"column_start":22,"column_end":35},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":70},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/display.rs","byte_start":17648,"byte_end":17661,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":80},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21157,"byte_end":21170,"line_start":57,"line_end":57,"column_start":38,"column_end":51},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":117},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":21707,"byte_end":21720,"line_start":71,"line_end":71,"column_start":23,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":117},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/read/decoder.rs","byte_start":25033,"byte_end":25046,"line_start":161,"line_end":161,"column_start":28,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":117},"to":{"krate":1,"index":4628}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113255,"byte_end":113268,"line_start":76,"line_end":76,"column_start":31,"column_end":44},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":189},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":113647,"byte_end":113660,"line_start":89,"line_end":89,"column_start":16,"column_end":29},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":118728,"byte_end":118741,"line_start":220,"line_end":220,"column_start":26,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":189},"to":{"krate":1,"index":4685}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder.rs","byte_start":125785,"byte_end":125798,"line_start":374,"line_end":374,"column_start":25,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":189},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":127427,"byte_end":127446,"line_start":56,"line_end":56,"column_start":22,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128215,"byte_end":128234,"line_start":78,"line_end":78,"column_start":6,"column_end":25},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":128481,"byte_end":128500,"line_start":85,"line_end":85,"column_start":32,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":236},"to":{"krate":1,"index":4685}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":129151,"byte_end":129157,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":249}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/write/encoder_string_writer.rs","byte_start":129524,"byte_end":129548,"line_start":122,"line_end":122,"column_start":36,"column_end":60},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":256},"to":{"krate":1,"index":4685}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":156622,"byte_end":156633,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/decode.rs","byte_start":157184,"byte_end":157195,"line_start":59,"line_end":59,"column_start":23,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":437},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":5365,"byte_end":5377,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.13.1/src/lib.rs","byte_start":6662,"byte_end":6668,"line_start":162,"line_end":162,"column_start":6,"column_end":12},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":477},"to":{"krate":4294967295,"index":4294967295}}]}