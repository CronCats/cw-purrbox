{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4","program":"/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","rand_core","--edition=2018","/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"std\"","-C","metadata=75db2d0a7842c128","-C","extra-filename=-75db2d0a7842c128","--out-dir","/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","-L","dependency=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","--extern","getrandom=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps/libgetrandom-0baadfdbdce48f71.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps/librand_core-75db2d0a7842c128.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[41299114264952942,0]},"crate_root":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src","external_crates":[{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","num":18,"id":{"name":"getrandom","disambiguator":[7826760453764783728,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","num":19,"id":{"name":"cfg_if","disambiguator":[13037983282529128945,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","num":20,"id":{"name":"libc","disambiguator":[12525383312641221777,0]}}],"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":408,"byte_end":20620,"line_start":10,"line_end":531,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":109},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1770,"byte_end":1775,"line_start":48,"line_end":48,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":270},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1819,"byte_end":1824,"line_start":49,"line_end":49,"column_start":43,"column_end":48},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":271},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1819,"byte_end":1824,"line_start":49,"line_end":49,"column_start":43,"column_end":48},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":408,"byte_end":20620,"line_start":10,"line_end":531,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":21},{"krate":0,"index":99},{"krate":0,"index":136},{"krate":0,"index":174},{"krate":0,"index":180},{"krate":0,"index":203},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":225},{"krate":0,"index":232},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":243}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"/ Random number generation traits","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":408,"byte_end":443,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":444,"byte_end":447,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This crate is mainly of interest to crates publishing implementations of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":448,"byte_end":524,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ [`RngCore`]. Other users are encouraged to use the [`rand`] crate instead","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":525,"byte_end":602,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/ which re-exports the main traits and error types.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":603,"byte_end":656,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":657,"byte_end":660,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`RngCore`] is the core trait implemented by algorithmic pseudo-random number","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":661,"byte_end":742,"line_start":16,"line_end":16,"column_start":1,"column_end":82}},{"value":"/ generators and external random-number sources.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":743,"byte_end":793,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":794,"byte_end":797,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`SeedableRng`] is an extension trait for construction from fixed seeds and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":798,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ other random number generators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":878,"byte_end":913,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":914,"byte_end":917,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [`Error`] is provided for error-handling. It is safe to use in `no_std`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":918,"byte_end":993,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ environments.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":994,"byte_end":1011,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1012,"byte_end":1015,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The [`impls`] and [`le`] sub-modules include a few small functions to assist","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1016,"byte_end":1096,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ implementation of [`RngCore`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1097,"byte_end":1131,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1132,"byte_end":1135,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1136,"byte_end":1170,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1386,"byte_end":1408,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1409,"byte_end":1448,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1550,"byte_end":1560,"line_start":39,"line_end":39,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":21},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":245},{"krate":0,"index":250},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":61},{"krate":0,"index":68},{"krate":0,"index":253},{"krate":0,"index":259},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":97}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[{"value":"/ The `BlockRngCore` trait and implementation helpers","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":20978,"byte_end":21033,"line_start":9,"line_end":9,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21034,"byte_end":21037,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The [`BlockRngCore`] trait exists to assist in the implementation of RNGs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21038,"byte_end":21115,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ which generate a block of data in a cache instead of returning generated","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21116,"byte_end":21192,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ values directly.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21193,"byte_end":21213,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21214,"byte_end":21217,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait is optional, but provides two advantages:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21218,"byte_end":21283,"line_start":15,"line_end":15,"column_start":1,"column_end":66}},{"value":"/ implementations only need to concern themselves with generation of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21284,"byte_end":21358,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ block, not the various [`RngCore`] methods (especially [`fill_bytes`], where","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21359,"byte_end":21439,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ the optimal implementations are not trivial), and this allows","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21440,"byte_end":21505,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ `ReseedingRng` (see [`rand`](https://docs.rs/rand) crate) perform periodic","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21506,"byte_end":21584,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ reseeding with very low overhead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21585,"byte_end":21622,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21623,"byte_end":21626,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21627,"byte_end":21640,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21641,"byte_end":21644,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21645,"byte_end":21658,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ use rand_core::{RngCore, SeedableRng};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21659,"byte_end":21701,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"/ use rand_core::block::{BlockRngCore, BlockRng};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21702,"byte_end":21753,"line_start":26,"line_end":26,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21754,"byte_end":21757,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ struct MyRngCore;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21758,"byte_end":21779,"line_start":28,"line_end":28,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21780,"byte_end":21783,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ impl BlockRngCore for MyRngCore {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21784,"byte_end":21821,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/     type Item = u32;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21822,"byte_end":21846,"line_start":31,"line_end":31,"column_start":1,"column_end":25}},{"value":"/     type Results = [u32; 16];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21847,"byte_end":21880,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21881,"byte_end":21884,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     fn generate(&mut self, results: &mut Self::Results) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21885,"byte_end":21946,"line_start":34,"line_end":34,"column_start":1,"column_end":62}},{"value":"/         unimplemented!()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21947,"byte_end":21975,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21976,"byte_end":21985,"line_start":36,"line_end":36,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21986,"byte_end":21991,"line_start":37,"line_end":37,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21992,"byte_end":21995,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ impl SeedableRng for MyRngCore {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":21996,"byte_end":22032,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"/     type Seed = [u8; 32];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22033,"byte_end":22062,"line_start":40,"line_end":40,"column_start":1,"column_end":30}},{"value":"/     fn from_seed(seed: Self::Seed) -> Self {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22063,"byte_end":22111,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/         unimplemented!()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22112,"byte_end":22140,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22141,"byte_end":22150,"line_start":43,"line_end":43,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22151,"byte_end":22156,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22157,"byte_end":22160,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // optionally, also implement CryptoRng for MyRngCore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22161,"byte_end":22218,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22219,"byte_end":22222,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ // Final RNG.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22223,"byte_end":22240,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/ let mut rng = BlockRng::<MyRngCore>::seed_from_u64(0);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22241,"byte_end":22299,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/ println!(\"First value: {}\", rng.next_u32());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22300,"byte_end":22348,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22349,"byte_end":22356,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22357,"byte_end":22360,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: crate::block::BlockRngCore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22361,"byte_end":22409,"line_start":53,"line_end":53,"column_start":1,"column_end":49}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22410,"byte_end":22449,"line_start":54,"line_end":54,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":48},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22944,"byte_end":22956,"line_start":68,"line_end":68,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[{"value":"/ A trait for RNGs which do not generate random numbers individually, but in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22672,"byte_end":22750,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ blocks (typically `[u32; N]`). This technique is commonly used by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22751,"byte_end":22820,"line_start":64,"line_end":64,"column_start":1,"column_end":70}},{"value":"/ cryptographic RNGs to improve performance.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22821,"byte_end":22867,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22868,"byte_end":22871,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ See the [module][crate::block] documentation for details.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22872,"byte_end":22933,"line_start":67,"line_end":67,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":49},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23010,"byte_end":23014,"line_start":70,"line_end":70,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[{"value":"/ Results element type, e.g. `u32`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":22963,"byte_end":23000,"line_start":69,"line_end":69,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23171,"byte_end":23178,"line_start":74,"line_end":74,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[{"value":"/ Results type. This is the 'block' an RNG implementing `BlockRngCore`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23021,"byte_end":23093,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ generates, which will usually be an array like `[u32; 16]`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23098,"byte_end":23161,"line_start":73,"line_end":73,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23282,"byte_end":23290,"line_start":77,"line_end":77,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"pub fn generate(&mut Self, &mut Self::Results)","parent":{"krate":0,"index":48},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[{"value":"/ Generate a new block of results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23238,"byte_end":23274,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":245},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25479,"byte_end":25487,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23335,"byte_end":23405,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23406,"byte_end":23486,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23487,"byte_end":23534,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23535,"byte_end":23538,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ The `core` field may be accessed directly but the results buffer may not.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23539,"byte_end":23616,"line_start":84,"line_end":84,"column_start":1,"column_end":78}},{"value":"/ PRNG implementations can simply use a type alias","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23617,"byte_end":23669,"line_start":85,"line_end":85,"column_start":1,"column_end":53}},{"value":"/ (`pub type MyRng = BlockRng<MyRngCore>;`) but might prefer to use a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23670,"byte_end":23741,"line_start":86,"line_end":86,"column_start":1,"column_end":72}},{"value":"/ wrapper type (`pub struct MyRng(BlockRng<MyRngCore>);`); the latter must","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23742,"byte_end":23818,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ re-implement `RngCore` but hides the implementation details and allows","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23819,"byte_end":23893,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ extra functionality to be defined on the RNG","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23894,"byte_end":23942,"line_start":89,"line_end":89,"column_start":1,"column_end":49}},{"value":"/ (e.g. `impl MyRng { fn set_stream(...){...} }`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23943,"byte_end":23995,"line_start":90,"line_end":90,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":23996,"byte_end":23999,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ `BlockRng` has heavily optimized implementations of the [`RngCore`] methods","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24000,"byte_end":24079,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ reading values from the results buffer, as well as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24080,"byte_end":24134,"line_start":93,"line_end":93,"column_start":1,"column_end":55}},{"value":"/ calling [`BlockRngCore::generate`] directly on the output array when","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24135,"byte_end":24207,"line_start":94,"line_end":94,"column_start":1,"column_end":73}},{"value":"/ [`fill_bytes`] / [`try_fill_bytes`] is called on a large array. These methods","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24208,"byte_end":24289,"line_start":95,"line_end":95,"column_start":1,"column_end":82}},{"value":"/ also handle the bookkeeping of when to generate a new batch of values.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24290,"byte_end":24364,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24365,"byte_end":24368,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u32` values are thrown away and all values are consumed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24369,"byte_end":24448,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ in-order. [`next_u32`] simply takes the next available `u32` value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24449,"byte_end":24520,"line_start":99,"line_end":99,"column_start":1,"column_end":72}},{"value":"/ [`next_u64`] is implemented by combining two `u32` values, least","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24521,"byte_end":24589,"line_start":100,"line_end":100,"column_start":1,"column_end":69}},{"value":"/ significant first. [`fill_bytes`] and [`try_fill_bytes`] consume a whole","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24590,"byte_end":24666,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ number of `u32` values, converting each `u32` to a byte slice in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24667,"byte_end":24735,"line_start":102,"line_end":102,"column_start":1,"column_end":69}},{"value":"/ little-endian order. If the requested byte length is not a multiple of 4,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24736,"byte_end":24813,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"/ some bytes will be discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24814,"byte_end":24847,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24848,"byte_end":24851,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ See also [`BlockRng64`] which uses `u64` array buffers. Currently there is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24852,"byte_end":24930,"line_start":106,"line_end":106,"column_start":1,"column_end":79}},{"value":"/ no direct support for other buffer types.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24931,"byte_end":24976,"line_start":107,"line_end":107,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24977,"byte_end":24980,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ For easy initialization `BlockRng` also implements [`SeedableRng`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":24981,"byte_end":25052,"line_start":109,"line_end":109,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25053,"byte_end":25056,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25057,"byte_end":25092,"line_start":111,"line_end":111,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25093,"byte_end":25128,"line_start":112,"line_end":112,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25129,"byte_end":25168,"line_start":113,"line_end":113,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25169,"byte_end":25216,"line_start":114,"line_end":114,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":249},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25641,"byte_end":25645,"line_start":127,"line_end":127,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25563,"byte_end":25632,"line_start":126,"line_end":126,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26259,"byte_end":26262,"line_start":145,"line_end":145,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"pub fn new(R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26108,"byte_end":26169,"line_start":142,"line_end":142,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26174,"byte_end":26233,"line_start":143,"line_end":143,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26238,"byte_end":26247,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26738,"byte_end":26743,"line_start":160,"line_end":160,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26483,"byte_end":26524,"line_start":154,"line_end":154,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26529,"byte_end":26532,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26537,"byte_end":26610,"line_start":156,"line_end":156,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26615,"byte_end":26687,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26692,"byte_end":26704,"line_start":158,"line_end":158,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26709,"byte_end":26726,"line_start":159,"line_end":159,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26934,"byte_end":26939,"line_start":167,"line_end":167,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26792,"byte_end":26834,"line_start":164,"line_end":164,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26839,"byte_end":26908,"line_start":165,"line_end":165,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26913,"byte_end":26922,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27132,"byte_end":27148,"line_start":174,"line_end":174,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27014,"byte_end":27085,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27090,"byte_end":27106,"line_start":172,"line_end":172,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27111,"byte_end":27120,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30772,"byte_end":30782,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[{"value":"/ A wrapper type implementing [`RngCore`] for some type implementing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29575,"byte_end":29645,"line_start":262,"line_end":262,"column_start":1,"column_end":71}},{"value":"/ [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29646,"byte_end":29726,"line_start":263,"line_end":263,"column_start":1,"column_end":81}},{"value":"/ a full RNG from just a `generate` function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29727,"byte_end":29774,"line_start":264,"line_end":264,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29775,"byte_end":29778,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ This is similar to [`BlockRng`], but specialized for algorithms that operate","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29779,"byte_end":29859,"line_start":266,"line_end":266,"column_start":1,"column_end":81}},{"value":"/ on `u64` values.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29860,"byte_end":29880,"line_start":267,"line_end":267,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29881,"byte_end":29884,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ No whole generated `u64` values are thrown away and all values are consumed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29885,"byte_end":29964,"line_start":269,"line_end":269,"column_start":1,"column_end":80}},{"value":"/ in-order. [`next_u64`] simply takes the next available `u64` value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29965,"byte_end":30036,"line_start":270,"line_end":270,"column_start":1,"column_end":72}},{"value":"/ [`next_u32`] is however a bit special: half of a `u64` is consumed, leaving","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30037,"byte_end":30116,"line_start":271,"line_end":271,"column_start":1,"column_end":80}},{"value":"/ the other half in the buffer. If the next function called is [`next_u32`]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30117,"byte_end":30194,"line_start":272,"line_end":272,"column_start":1,"column_end":78}},{"value":"/ then the other half is then consumed, however both [`next_u64`] and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30195,"byte_end":30266,"line_start":273,"line_end":273,"column_start":1,"column_end":72}},{"value":"/ [`fill_bytes`] discard the rest of any half-consumed `u64`s when called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30267,"byte_end":30343,"line_start":274,"line_end":274,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30344,"byte_end":30347,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ [`fill_bytes`] and [`try_fill_bytes`] consume a whole number of `u64`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30348,"byte_end":30421,"line_start":276,"line_end":276,"column_start":1,"column_end":74}},{"value":"/ values. If the requested length is not a multiple of 8, some bytes will be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30422,"byte_end":30500,"line_start":277,"line_end":277,"column_start":1,"column_end":79}},{"value":"/ discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30501,"byte_end":30515,"line_start":278,"line_end":278,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30516,"byte_end":30519,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30520,"byte_end":30555,"line_start":280,"line_end":280,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30556,"byte_end":30591,"line_start":281,"line_end":281,"column_start":1,"column_end":36}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30592,"byte_end":30631,"line_start":282,"line_end":282,"column_start":1,"column_end":40}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30632,"byte_end":30679,"line_start":283,"line_end":283,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":258},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31009,"byte_end":31013,"line_start":291,"line_end":291,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[{"value":"/ The *core* part of the RNG, implementing the `generate` function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":30931,"byte_end":31000,"line_start":290,"line_end":290,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31682,"byte_end":31685,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"pub fn new(R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"/ Create a new `BlockRng` from an existing RNG implementing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31531,"byte_end":31592,"line_start":307,"line_end":307,"column_start":5,"column_end":66}},{"value":"/ `BlockRngCore`. Results will be generated on first use.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31597,"byte_end":31656,"line_start":308,"line_end":308,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31661,"byte_end":31670,"line_start":309,"line_end":309,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32195,"byte_end":32200,"line_start":326,"line_end":326,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"pub fn index(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"/ Get the index into the result buffer.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31940,"byte_end":31981,"line_start":320,"line_end":320,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31986,"byte_end":31989,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ If this is equal to or larger than the size of the result buffer then","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31994,"byte_end":32067,"line_start":322,"line_end":322,"column_start":5,"column_end":78}},{"value":"/ the buffer is \"empty\" and `generate()` must be called to produce new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32072,"byte_end":32144,"line_start":323,"line_end":323,"column_start":5,"column_end":77}},{"value":"/ results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32149,"byte_end":32161,"line_start":324,"line_end":324,"column_start":5,"column_end":17}},{"value":"inline(always)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32166,"byte_end":32183,"line_start":325,"line_end":325,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32391,"byte_end":32396,"line_start":333,"line_end":333,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"/ Reset the number of available results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32249,"byte_end":32291,"line_start":330,"line_end":330,"column_start":5,"column_end":47}},{"value":"/ This will force a new set of results to be generated on next use.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32296,"byte_end":32365,"line_start":331,"line_end":331,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32370,"byte_end":32379,"line_start":332,"line_end":332,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32621,"byte_end":32637,"line_start":341,"line_end":341,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"pub fn generate_and_set(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"/ Generate a new set of results immediately, setting the index to the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32503,"byte_end":32574,"line_start":338,"line_end":338,"column_start":5,"column_end":76}},{"value":"/ given value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32579,"byte_end":32595,"line_start":339,"line_end":339,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32600,"byte_end":32609,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":109},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39285,"byte_end":39290,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":110}],"decl_id":null,"docs":" Error type of random number generators","sig":null,"attributes":[{"value":"/ Error type of random number generators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39018,"byte_end":39060,"line_start":16,"line_end":16,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39061,"byte_end":39064,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ In order to be compatible with `std` and `no_std`, this type has two","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39065,"byte_end":39137,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/ possible implementations: with `std` a boxed `Error` trait object is stored,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39138,"byte_end":39218,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ while with `no_std` we merely store an error code.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39219,"byte_end":39273,"line_start":20,"line_end":20,"column_start":1,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39898,"byte_end":39910,"line_start":36,"line_end":36,"column_start":15,"column_end":27},"name":"CUSTOM_START","qualname":"::error::Error::CUSTOM_START","value":"u32","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Codes at or above this point can be used by users to define their own\n custom errors.","sig":null,"attributes":[{"value":"/ Codes at or above this point can be used by users to define their own","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39459,"byte_end":39532,"line_start":29,"line_end":29,"column_start":5,"column_end":78}},{"value":"/ custom errors.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39537,"byte_end":39555,"line_start":30,"line_end":30,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39560,"byte_end":39563,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This has a fixed value of `(1 << 31) + (1 << 30) = 0xC000_0000`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39568,"byte_end":39636,"line_start":32,"line_end":32,"column_start":5,"column_end":73}},{"value":"/ therefore the number of values available for custom codes is `1 << 30`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39641,"byte_end":39716,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39721,"byte_end":39724,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`getrandom::Error::CUSTOM_START`](https://docs.rs/getrandom/latest/getrandom/struct.Error.html#associatedconstant.CUSTOM_START).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39729,"byte_end":39883,"line_start":35,"line_end":35,"column_start":5,"column_end":159}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40344,"byte_end":40358,"line_start":42,"line_end":42,"column_start":15,"column_end":29},"name":"INTERNAL_START","qualname":"::error::Error::INTERNAL_START","value":"u32","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Codes below this point represent OS Errors (i.e. positive i32 values).\n Codes at or above this point, but below [`Error::CUSTOM_START`] are\n reserved for use by the `rand` and `getrandom` crates.","sig":null,"attributes":[{"value":"/ Codes below this point represent OS Errors (i.e. positive i32 values).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39945,"byte_end":40019,"line_start":37,"line_end":37,"column_start":5,"column_end":79}},{"value":"/ Codes at or above this point, but below [`Error::CUSTOM_START`] are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40024,"byte_end":40095,"line_start":38,"line_end":38,"column_start":5,"column_end":76}},{"value":"/ reserved for use by the `rand` and `getrandom` crates.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40100,"byte_end":40158,"line_start":39,"line_end":39,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40163,"byte_end":40166,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`getrandom::Error::INTERNAL_START`](https://docs.rs/getrandom/latest/getrandom/struct.Error.html#associatedconstant.INTERNAL_START).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40171,"byte_end":40329,"line_start":41,"line_end":41,"column_start":5,"column_end":163}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40691,"byte_end":40694,"line_start":52,"line_end":52,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new<E>(E) -> Self where\nE: Into<Box<dyn std::error::Error + Send + Sync + 'static>>","parent":null,"children":[],"decl_id":null,"docs":" Construct from any type supporting `std::error::Error`","sig":null,"attributes":[{"value":"/ Construct from any type supporting `std::error::Error`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40380,"byte_end":40438,"line_start":44,"line_end":44,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40443,"byte_end":40446,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Available only when configured with `std`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40451,"byte_end":40497,"line_start":46,"line_end":46,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40502,"byte_end":40505,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ See also `From<NonZeroU32>`, which is available with and without `std`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40510,"byte_end":40585,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40590,"byte_end":40613,"line_start":49,"line_end":49,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40670,"byte_end":40679,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41142,"byte_end":41147,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"inner","qualname":"<Error>::inner","value":"pub fn inner(&Self) -> &dyn std::error::Error + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reference the inner error (`std` only)","sig":null,"attributes":[{"value":"/ Reference the inner error (`std` only)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40846,"byte_end":40888,"line_start":59,"line_end":59,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40893,"byte_end":40896,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ When configured with `std`, this is a trivial operation and never","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40901,"byte_end":40970,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ panics. Without `std`, this method is simply unavailable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":40975,"byte_end":41036,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41041,"byte_end":41064,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41121,"byte_end":41130,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41534,"byte_end":41544,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"take_inner","qualname":"<Error>::take_inner","value":"pub fn take_inner(Self) -> Box<dyn std::error::Error + Send + Sync + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner error (`std` only)","sig":null,"attributes":[{"value":"/ Unwrap the inner error (`std` only)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41241,"byte_end":41280,"line_start":70,"line_end":70,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41285,"byte_end":41288,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ When configured with `std`, this is a trivial operation and never","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41293,"byte_end":41362,"line_start":72,"line_end":72,"column_start":5,"column_end":74}},{"value":"/ panics. Without `std`, this method is simply unavailable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41367,"byte_end":41428,"line_start":73,"line_end":73,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41433,"byte_end":41456,"line_start":74,"line_end":74,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41513,"byte_end":41522,"line_start":76,"line_end":76,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41970,"byte_end":41982,"line_start":87,"line_end":87,"column_start":12,"column_end":24},"name":"raw_os_error","qualname":"<Error>::raw_os_error","value":"pub fn raw_os_error(&Self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Extract the raw OS error code (if this error came from the OS)","sig":null,"attributes":[{"value":"/ Extract the raw OS error code (if this error came from the OS)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41637,"byte_end":41703,"line_start":81,"line_end":81,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41708,"byte_end":41711,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ This method is identical to `std::io::Error::raw_os_error()`, except","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41716,"byte_end":41788,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ that it works in `no_std` contexts. If this method returns `None`, the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41793,"byte_end":41867,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ error value can still be formatted via the `Display` implementation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41872,"byte_end":41944,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":41949,"byte_end":41958,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42644,"byte_end":42648,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"code","qualname":"<Error>::code","value":"pub fn code(&Self) -> Option<NonZeroU32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the error code, if any.","sig":null,"attributes":[{"value":"/ Retrieve the error code, if any.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42359,"byte_end":42395,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42400,"byte_end":42403,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ If this `Error` was constructed via `From<NonZeroU32>`, then this method","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42408,"byte_end":42484,"line_start":102,"line_end":102,"column_start":5,"column_end":81}},{"value":"/ will return this `NonZeroU32` code (for `no_std` this is always the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42489,"byte_end":42560,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ case). Otherwise, this method will return `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42565,"byte_end":42618,"line_start":104,"line_end":104,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42623,"byte_end":42632,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":136},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":159},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":171}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[{"value":"/ Helper functions for implementing `RngCore` functions.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":45985,"byte_end":46043,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46044,"byte_end":46047,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For cross-platform reproducibility, these functions all use Little Endian:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46048,"byte_end":46126,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ least-significant part first. For example, `next_u64_via_u32` takes `u32`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46127,"byte_end":46204,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ values `x, y`, then outputs `(y << 32) | x`. To implement `next_u32`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46205,"byte_end":46277,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ from `next_u64` in little-endian order, one should use `next_u64() as u32`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46278,"byte_end":46357,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46358,"byte_end":46361,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Byte-swapping (like the std `to_le` functions) is only needed to convert","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46362,"byte_end":46438,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ to/from byte sequences, and since its purpose is reproducibility,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46439,"byte_end":46508,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ non-reproducible sources (e.g. `OsRng`) need not bother with it.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46509,"byte_end":46577,"line_start":18,"line_end":18,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46689,"byte_end":46705,"line_start":24,"line_end":24,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"pub fn next_u64_via_u32<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `next_u32`, little-endian order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46620,"byte_end":46681,"line_start":23,"line_end":23,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47252,"byte_end":47271,"line_start":37,"line_end":37,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"pub fn fill_bytes_via_next<R: RngCore + ?Sized>(&mut R, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46913,"byte_end":46991,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46992,"byte_end":46995,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The fastest way to fill a slice is usually to work as long as possible with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":46996,"byte_end":47075,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ integers. That is why this method mostly uses `next_u64`, and only when","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47076,"byte_end":47151,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ there are 4 or less bytes remaining at the end of the slice it uses","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47152,"byte_end":47223,"line_start":35,"line_end":35,"column_start":1,"column_end":72}},{"value":"/ `next_u32` once.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47224,"byte_end":47244,"line_start":36,"line_end":36,"column_start":1,"column_end":21}}]},{"kind":"Type","id":{"krate":0,"index":151},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47851,"byte_end":47856,"line_start":56,"line_end":56,"column_start":10,"column_end":15},"name":"Bytes","qualname":"::impls::Observable::Bytes","value":"type Bytes: AsRef<[u8]>;","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50588,"byte_end":50607,"line_start":140,"line_end":140,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"pub fn fill_via_u32_chunks(&[u32], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49648,"byte_end":49726,"line_start":110,"line_end":110,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49727,"byte_end":49741,"line_start":111,"line_end":111,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49742,"byte_end":49745,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u32, filled_u8)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49746,"byte_end":49800,"line_start":113,"line_end":113,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49801,"byte_end":49804,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49805,"byte_end":49884,"line_start":115,"line_end":115,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49885,"byte_end":49910,"line_start":116,"line_end":116,"column_start":1,"column_end":26}},{"value":"/ `consumed_u32` is the number of words consumed from `src`, which is the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49911,"byte_end":49991,"line_start":117,"line_end":117,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 4` rounded up.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":49992,"byte_end":50026,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50027,"byte_end":50030,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50031,"byte_end":50044,"line_start":120,"line_end":120,"column_start":1,"column_end":14}},{"value":"/ (from `IsaacRng`)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50045,"byte_end":50066,"line_start":121,"line_end":121,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50067,"byte_end":50070,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50071,"byte_end":50084,"line_start":123,"line_end":123,"column_start":1,"column_end":14}},{"value":"/ fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50085,"byte_end":50132,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/     let mut read_len = 0;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50133,"byte_end":50162,"line_start":125,"line_end":125,"column_start":1,"column_end":30}},{"value":"/     while read_len < dest.len() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50163,"byte_end":50200,"line_start":126,"line_end":126,"column_start":1,"column_end":38}},{"value":"/         if self.index >= self.rsl.len() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50201,"byte_end":50246,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/             self.isaac();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50247,"byte_end":50276,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50277,"byte_end":50290,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50291,"byte_end":50294,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/         let (consumed_u32, filled_u8) =","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50295,"byte_end":50338,"line_start":131,"line_end":131,"column_start":1,"column_end":44}},{"value":"/             impls::fill_via_u32_chunks(&mut self.rsl[self.index..],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50339,"byte_end":50410,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/                                        &mut dest[read_len..]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50411,"byte_end":50477,"line_start":133,"line_end":133,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50478,"byte_end":50481,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/         self.index += consumed_u32;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50482,"byte_end":50521,"line_start":135,"line_end":135,"column_start":1,"column_end":40}},{"value":"/         read_len += filled_u8;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50522,"byte_end":50556,"line_start":136,"line_end":136,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50557,"byte_end":50566,"line_start":137,"line_end":137,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50567,"byte_end":50572,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50573,"byte_end":50580,"line_start":139,"line_end":139,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51124,"byte_end":51143,"line_start":154,"line_end":154,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"pub fn fill_via_u64_chunks(&[u64], &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[{"value":"/ Implement `fill_bytes` by reading chunks from the output buffer of a block","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50692,"byte_end":50770,"line_start":144,"line_end":144,"column_start":1,"column_end":79}},{"value":"/ based RNG.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50771,"byte_end":50785,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50786,"byte_end":50789,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ The return values are `(consumed_u64, filled_u8)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50790,"byte_end":50844,"line_start":147,"line_end":147,"column_start":1,"column_end":55}},{"value":"/ `filled_u8` is the number of filled bytes in `dest`, which may be less than","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50845,"byte_end":50924,"line_start":148,"line_end":148,"column_start":1,"column_end":80}},{"value":"/ the length of `dest`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50925,"byte_end":50950,"line_start":149,"line_end":149,"column_start":1,"column_end":26}},{"value":"/ `consumed_u64` is the number of words consumed from `src`, which is the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":50951,"byte_end":51031,"line_start":150,"line_end":150,"column_start":1,"column_end":81}},{"value":"/ as `filled_u8 / 8` rounded up.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51032,"byte_end":51066,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51067,"byte_end":51070,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ See `fill_via_u32_chunks` for an example.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51071,"byte_end":51116,"line_start":153,"line_end":153,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51299,"byte_end":51316,"line_start":159,"line_end":159,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"pub fn next_u32_via_fill<R: RngCore + ?Sized>(&mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u32` via `fill_bytes`, little-endian order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51228,"byte_end":51291,"line_start":158,"line_end":158,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51518,"byte_end":51535,"line_start":166,"line_end":166,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"pub fn next_u64_via_fill<R: RngCore + ?Sized>(&mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[{"value":"/ Implement `next_u64` via `fill_bytes`, little-endian order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":51447,"byte_end":51510,"line_start":165,"line_end":165,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":174},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":179}],"decl_id":null,"docs":" Little-Endian utilities","sig":null,"attributes":[{"value":"/ Little-Endian utilities","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53174,"byte_end":53201,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53202,"byte_end":53205,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Little-Endian order has been chosen for internal usage; this makes some","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53206,"byte_end":53281,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ useful functions available.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53282,"byte_end":53313,"line_start":12,"line_end":12,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53419,"byte_end":53432,"line_start":18,"line_end":18,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"pub fn read_u32_into(&[u8], &mut [u32])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 32 bit integers from `src` into `dst`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53344,"byte_end":53401,"line_start":16,"line_end":16,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53402,"byte_end":53411,"line_start":17,"line_end":17,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53717,"byte_end":53730,"line_start":27,"line_end":27,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"pub fn read_u64_into(&[u8], &mut [u64])","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n","sig":null,"attributes":[{"value":"/ Reads unsigned 64 bit integers from `src` into `dst`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53642,"byte_end":53699,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/le.rs","byte_start":53700,"byte_end":53709,"line_start":26,"line_end":26,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":270},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56434,"byte_end":56439,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::os::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A random number generator that retrieves randomness from the\n operating system.","sig":null,"attributes":[{"value":"/ A random number generator that retrieves randomness from the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55126,"byte_end":55190,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/ operating system.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55191,"byte_end":55212,"line_start":15,"line_end":15,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55213,"byte_end":55216,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is a zero-sized struct. It can be freely constructed with `OsRng`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55217,"byte_end":55292,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55293,"byte_end":55296,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The implementation is provided by the [getrandom] crate. Refer to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55297,"byte_end":55366,"line_start":19,"line_end":19,"column_start":1,"column_end":70}},{"value":"/ [getrandom] documentation for details.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55367,"byte_end":55409,"line_start":20,"line_end":20,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55410,"byte_end":55413,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This struct is only available when specifying the crate feature `getrandom`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55414,"byte_end":55493,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ or `std`. When using the `rand` lib, it is also available as `rand::rngs::OsRng`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55494,"byte_end":55579,"line_start":23,"line_end":23,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55580,"byte_end":55583,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Blocking and error handling","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55584,"byte_end":55617,"line_start":25,"line_end":25,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55618,"byte_end":55621,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ It is possible that when used during early boot the first call to `OsRng`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55622,"byte_end":55699,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ will block until the system's RNG is initialised. It is also possible","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55700,"byte_end":55773,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/ (though highly unlikely) for `OsRng` to fail on some platforms, most","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55774,"byte_end":55846,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ likely due to system mis-configuration.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55847,"byte_end":55890,"line_start":30,"line_end":30,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55891,"byte_end":55894,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ After the first successful call, it is highly unlikely that failures or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55895,"byte_end":55970,"line_start":32,"line_end":32,"column_start":1,"column_end":76}},{"value":"/ significant delays will occur (although performance should be expected to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":55971,"byte_end":56048,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ be much slower than a user-space PRNG).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56049,"byte_end":56092,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56093,"byte_end":56096,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Usage example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56097,"byte_end":56116,"line_start":36,"line_end":36,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56117,"byte_end":56124,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ use rand_core::{RngCore, OsRng};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56125,"byte_end":56161,"line_start":38,"line_end":38,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56162,"byte_end":56165,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let mut key = [0u8; 16];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56166,"byte_end":56194,"line_start":40,"line_end":40,"column_start":1,"column_end":29}},{"value":"/ OsRng.fill_bytes(&mut key);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56195,"byte_end":56226,"line_start":41,"line_end":41,"column_start":1,"column_end":32}},{"value":"/ let random_u64 = OsRng.next_u64();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56227,"byte_end":56265,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56266,"byte_end":56273,"line_start":43,"line_end":43,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56274,"byte_end":56277,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [getrandom]: https://crates.io/crates/getrandom","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56278,"byte_end":56329,"line_start":45,"line_end":45,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5526,"byte_end":5533,"line_start":142,"line_end":142,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[{"value":"/ The core of a random number generator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1921,"byte_end":1963,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1964,"byte_end":1967,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1968,"byte_end":2037,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/ generators, and is the \"back end\", to be implemented by generators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2038,"byte_end":2109,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/ End users should normally use the `Rng` trait from the [`rand`] crate,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2110,"byte_end":2184,"line_start":63,"line_end":63,"column_start":1,"column_end":75}},{"value":"/ which is automatically implemented for every type implementing `RngCore`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2185,"byte_end":2262,"line_start":64,"line_end":64,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2263,"byte_end":2266,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Three different methods for generating random data are provided since the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2267,"byte_end":2344,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ optimal implementation of each is dependent on the type of generator. There","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2345,"byte_end":2424,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ is no required relationship between the output of each; e.g. many","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2425,"byte_end":2494,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/ implementations of [`fill_bytes`] consume a whole number of `u32` or `u64`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2495,"byte_end":2573,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ values and drop any remaining unused bytes. The same can happen with the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2574,"byte_end":2650,"line_start":70,"line_end":70,"column_start":1,"column_end":77}},{"value":"/ [`next_u32`] and [`next_u64`] methods, implementations may discard some","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2651,"byte_end":2726,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ random bits for efficiency.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2727,"byte_end":2758,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2759,"byte_end":2762,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The [`try_fill_bytes`] method is a variant of [`fill_bytes`] allowing error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2763,"byte_end":2842,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/ handling; it is not deemed sufficiently useful to add equivalents for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2843,"byte_end":2916,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/ [`next_u32`] or [`next_u64`] since the latter methods are almost always used","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2917,"byte_end":2997,"line_start":76,"line_end":76,"column_start":1,"column_end":81}},{"value":"/ with algorithmic generators (PRNGs), which are normally infallible.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":2998,"byte_end":3069,"line_start":77,"line_end":77,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3070,"byte_end":3073,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Implementers should produce bits uniformly. Pathological RNGs (e.g. always","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3074,"byte_end":3152,"line_start":79,"line_end":79,"column_start":1,"column_end":79}},{"value":"/ returning the same value, or never setting certain bits) can break rejection","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3153,"byte_end":3233,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ sampling used by random distributions, and also break other RNGs when","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3234,"byte_end":3307,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ seeding them via [`SeedableRng::from_rng`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3308,"byte_end":3355,"line_start":82,"line_end":82,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3356,"byte_end":3359,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ Algorithmic generators implementing [`SeedableRng`] should normally have","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3360,"byte_end":3436,"line_start":84,"line_end":84,"column_start":1,"column_end":77}},{"value":"/ *portable, reproducible* output, i.e. fix Endianness when converting values","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3437,"byte_end":3516,"line_start":85,"line_end":85,"column_start":1,"column_end":80}},{"value":"/ to avoid platform differences, and avoid making any changes which affect","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3517,"byte_end":3593,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ output (except by communicating that the release has breaking changes).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3594,"byte_end":3669,"line_start":87,"line_end":87,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3670,"byte_end":3673,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Typically an RNG will implement only one of the methods available","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3674,"byte_end":3743,"line_start":89,"line_end":89,"column_start":1,"column_end":70}},{"value":"/ in this trait directly, then use the helper functions from the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3744,"byte_end":3810,"line_start":90,"line_end":90,"column_start":1,"column_end":67}},{"value":"/ [`impls`] module to implement the other methods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3811,"byte_end":3863,"line_start":91,"line_end":91,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3864,"byte_end":3867,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ It is recommended that implementations also implement:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3868,"byte_end":3926,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3927,"byte_end":3930,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ - `Debug` with a custom implementation which *does not* print any internal","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":3931,"byte_end":4009,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/   state (at least, [`CryptoRng`]s should not risk leaking state through","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4010,"byte_end":4085,"line_start":96,"line_end":96,"column_start":1,"column_end":76}},{"value":"/   `Debug`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4086,"byte_end":4101,"line_start":97,"line_end":97,"column_start":1,"column_end":16}},{"value":"/ - `Serialize` and `Deserialize` (from Serde), preferably making Serde","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4102,"byte_end":4175,"line_start":98,"line_end":98,"column_start":1,"column_end":74}},{"value":"/   support optional at the crate level in PRNG libs.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4176,"byte_end":4231,"line_start":99,"line_end":99,"column_start":1,"column_end":56}},{"value":"/ - `Clone`, if possible.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4232,"byte_end":4259,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/ - *never* implement `Copy` (accidental copies may cause repeated values).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4260,"byte_end":4337,"line_start":101,"line_end":101,"column_start":1,"column_end":78}},{"value":"/ - *do not* implement `Default` for pseudorandom generators, but instead","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4338,"byte_end":4413,"line_start":102,"line_end":102,"column_start":1,"column_end":76}},{"value":"/   implement [`SeedableRng`], to guide users towards proper seeding.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4414,"byte_end":4485,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/   External / hardware RNGs can choose to implement `Default`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4486,"byte_end":4551,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ - `Eq` and `PartialEq` could be implemented, but are probably not useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4552,"byte_end":4629,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4630,"byte_end":4633,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4634,"byte_end":4647,"line_start":107,"line_end":107,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4648,"byte_end":4651,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ A simple example, obviously not generating very *random* output:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4652,"byte_end":4720,"line_start":109,"line_end":109,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4721,"byte_end":4724,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4725,"byte_end":4732,"line_start":111,"line_end":111,"column_start":1,"column_end":8}},{"value":"/ #![allow(dead_code)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4733,"byte_end":4757,"line_start":112,"line_end":112,"column_start":1,"column_end":25}},{"value":"/ use rand_core::{RngCore, Error, impls};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4758,"byte_end":4801,"line_start":113,"line_end":113,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4802,"byte_end":4805,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ struct CountingRng(u64);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4806,"byte_end":4834,"line_start":115,"line_end":115,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4835,"byte_end":4838,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ impl RngCore for CountingRng {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4839,"byte_end":4873,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/     fn next_u32(&mut self) -> u32 {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4874,"byte_end":4913,"line_start":118,"line_end":118,"column_start":1,"column_end":40}},{"value":"/         self.next_u64() as u32","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4914,"byte_end":4948,"line_start":119,"line_end":119,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4949,"byte_end":4958,"line_start":120,"line_end":120,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4959,"byte_end":4962,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/     fn next_u64(&mut self) -> u64 {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":4963,"byte_end":5002,"line_start":122,"line_end":122,"column_start":1,"column_end":40}},{"value":"/         self.0 += 1;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5003,"byte_end":5027,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/         self.0","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5028,"byte_end":5046,"line_start":124,"line_end":124,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5047,"byte_end":5056,"line_start":125,"line_end":125,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5057,"byte_end":5060,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/     fn fill_bytes(&mut self, dest: &mut [u8]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5061,"byte_end":5112,"line_start":127,"line_end":127,"column_start":1,"column_end":52}},{"value":"/         impls::fill_bytes_via_next(self, dest)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5113,"byte_end":5163,"line_start":128,"line_end":128,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5164,"byte_end":5173,"line_start":129,"line_end":129,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5174,"byte_end":5177,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/     fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5178,"byte_end":5254,"line_start":131,"line_end":131,"column_start":1,"column_end":77}},{"value":"/         Ok(self.fill_bytes(dest))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5255,"byte_end":5292,"line_start":132,"line_end":132,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5293,"byte_end":5302,"line_start":133,"line_end":133,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5303,"byte_end":5308,"line_start":134,"line_end":134,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5309,"byte_end":5316,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5317,"byte_end":5320,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5321,"byte_end":5355,"line_start":137,"line_end":137,"column_start":1,"column_end":35}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5356,"byte_end":5403,"line_start":138,"line_end":138,"column_start":1,"column_end":48}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5404,"byte_end":5443,"line_start":139,"line_end":139,"column_start":1,"column_end":40}},{"value":"/ [`next_u32`]: RngCore::next_u32","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5444,"byte_end":5479,"line_start":140,"line_end":140,"column_start":1,"column_end":36}},{"value":"/ [`next_u64`]: RngCore::next_u64","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5480,"byte_end":5515,"line_start":141,"line_end":141,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5822,"byte_end":5830,"line_start":148,"line_end":148,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"pub fn next_u32(&mut Self) -> u32","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[{"value":"/ Return the next random `u32`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5540,"byte_end":5573,"line_start":143,"line_end":143,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5578,"byte_end":5581,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5586,"byte_end":5658,"line_start":145,"line_end":145,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5663,"byte_end":5738,"line_start":146,"line_end":146,"column_start":5,"column_end":80}},{"value":"/ using `self.next_u64() as u32` or via [`impls::next_u32_via_fill`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5743,"byte_end":5814,"line_start":147,"line_end":147,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6138,"byte_end":6146,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"pub fn next_u64(&mut Self) -> u64","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[{"value":"/ Return the next random `u64`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5855,"byte_end":5888,"line_start":150,"line_end":150,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5893,"byte_end":5896,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5901,"byte_end":5973,"line_start":152,"line_end":152,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":5978,"byte_end":6053,"line_start":153,"line_end":153,"column_start":5,"column_end":80}},{"value":"/ via [`impls::next_u64_via_u32`] or via [`impls::next_u64_via_fill`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6058,"byte_end":6130,"line_start":154,"line_end":154,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6894,"byte_end":6904,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"pub fn fill_bytes(&mut Self, &mut [u8])","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` with random data.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6171,"byte_end":6204,"line_start":157,"line_end":157,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6209,"byte_end":6212,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ RNGs must implement at least one method from this trait directly. In","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6217,"byte_end":6289,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ the case this method is not implemented directly, it can be implemented","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6294,"byte_end":6369,"line_start":160,"line_end":160,"column_start":5,"column_end":80}},{"value":"/ via [`impls::fill_bytes_via_next`] or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6374,"byte_end":6415,"line_start":161,"line_end":161,"column_start":5,"column_end":46}},{"value":"/ via [`RngCore::try_fill_bytes`]; if this generator can","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6420,"byte_end":6478,"line_start":162,"line_end":162,"column_start":5,"column_end":63}},{"value":"/ fail the implementation must choose how best to handle errors here","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6483,"byte_end":6553,"line_start":163,"line_end":163,"column_start":5,"column_end":75}},{"value":"/ (e.g. panic with a descriptive message or log a warning and retry a few","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6558,"byte_end":6633,"line_start":164,"line_end":164,"column_start":5,"column_end":80}},{"value":"/ times).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6638,"byte_end":6649,"line_start":165,"line_end":165,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6654,"byte_end":6657,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This method should guarantee that `dest` is entirely filled","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6662,"byte_end":6725,"line_start":167,"line_end":167,"column_start":5,"column_end":68}},{"value":"/ with new data, and may panic if this is impossible","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6730,"byte_end":6784,"line_start":168,"line_end":168,"column_start":5,"column_end":59}},{"value":"/ (e.g. reading past the end of a file that is being used as the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6789,"byte_end":6855,"line_start":169,"line_end":169,"column_start":5,"column_end":71}},{"value":"/ source of randomness).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6860,"byte_end":6886,"line_start":170,"line_end":170,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7588,"byte_end":7602,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"pub fn try_fill_bytes(&mut Self, &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` entirely with random data.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6939,"byte_end":6981,"line_start":173,"line_end":173,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6986,"byte_end":6989,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This is the only method which allows an RNG to report errors while","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":6994,"byte_end":7064,"line_start":175,"line_end":175,"column_start":5,"column_end":75}},{"value":"/ generating random data thus making this the primary method implemented","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7069,"byte_end":7143,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ by external (true) RNGs (e.g. `OsRng`) which can fail. It may be used","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7148,"byte_end":7221,"line_start":177,"line_end":177,"column_start":5,"column_end":78}},{"value":"/ directly to generate keys and to seed (infallible) PRNGs.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7226,"byte_end":7287,"line_start":178,"line_end":178,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7292,"byte_end":7295,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Other than error handling, this method is identical to [`RngCore::fill_bytes`];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7300,"byte_end":7383,"line_start":180,"line_end":180,"column_start":5,"column_end":88}},{"value":"/ thus this may be implemented using `Ok(self.fill_bytes(dest))` or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7388,"byte_end":7457,"line_start":181,"line_end":181,"column_start":5,"column_end":74}},{"value":"/ `fill_bytes` may be implemented with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7462,"byte_end":7502,"line_start":182,"line_end":182,"column_start":5,"column_end":45}},{"value":"/ `self.try_fill_bytes(dest).unwrap()` or more specific error handling.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7507,"byte_end":7580,"line_start":183,"line_end":183,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":208},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8893,"byte_end":8902,"line_start":209,"line_end":209,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[{"value":"/ A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7656,"byte_end":7731,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/ implementation is supposed to be cryptographically secure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7732,"byte_end":7794,"line_start":188,"line_end":188,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7795,"byte_end":7798,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ *Cryptographically secure generators*, also known as *CSPRNGs*, should","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7799,"byte_end":7873,"line_start":190,"line_end":190,"column_start":1,"column_end":75}},{"value":"/ satisfy an additional properties over other generators: given the first","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7874,"byte_end":7949,"line_start":191,"line_end":191,"column_start":1,"column_end":76}},{"value":"/ *k* bits of an algorithm's output","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7950,"byte_end":7987,"line_start":192,"line_end":192,"column_start":1,"column_end":38}},{"value":"/ sequence, it should not be possible using polynomial-time algorithms to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":7988,"byte_end":8063,"line_start":193,"line_end":193,"column_start":1,"column_end":76}},{"value":"/ predict the next bit with probability significantly greater than 50%.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8064,"byte_end":8137,"line_start":194,"line_end":194,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8138,"byte_end":8141,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Some generators may satisfy an additional property, however this is not","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8142,"byte_end":8217,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ required by this trait: if the CSPRNG's state is revealed, it should not be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8218,"byte_end":8297,"line_start":197,"line_end":197,"column_start":1,"column_end":80}},{"value":"/ computationally-feasible to reconstruct output prior to this. Some other","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8298,"byte_end":8374,"line_start":198,"line_end":198,"column_start":1,"column_end":77}},{"value":"/ generators allow backwards-computation and are considered *reversible*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8375,"byte_end":8450,"line_start":199,"line_end":199,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8451,"byte_end":8454,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ Note that this trait is provided for guidance only and cannot guarantee","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8455,"byte_end":8530,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/ suitability for cryptographic applications. In general it should only be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8531,"byte_end":8607,"line_start":202,"line_end":202,"column_start":1,"column_end":77}},{"value":"/ implemented for well-reviewed code implementing well-regarded algorithms.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8608,"byte_end":8685,"line_start":203,"line_end":203,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8686,"byte_end":8689,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ Note also that use of a `CryptoRng` does not protect against other","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8690,"byte_end":8760,"line_start":205,"line_end":205,"column_start":1,"column_end":71}},{"value":"/ weaknesses such as seeding from a weak entropy source or leaking state.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8761,"byte_end":8836,"line_start":206,"line_end":206,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8837,"byte_end":8840,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: block::BlockRngCore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8841,"byte_end":8882,"line_start":208,"line_end":208,"column_start":1,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":209},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9408,"byte_end":9421,"line_start":229,"line_end":229,"column_start":11,"column_end":24},"name":"CryptoRngCore","qualname":"::CryptoRngCore","value":"CryptoRngCore: CryptoRng + RngCore","parent":null,"children":[{"krate":0,"index":210}],"decl_id":null,"docs":" An extension trait that is automatically implemented for any type\n implementing [`RngCore`] and [`CryptoRng`].","sig":null,"attributes":[{"value":"/ An extension trait that is automatically implemented for any type","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8907,"byte_end":8976,"line_start":211,"line_end":211,"column_start":1,"column_end":70}},{"value":"/ implementing [`RngCore`] and [`CryptoRng`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":8977,"byte_end":9024,"line_start":212,"line_end":212,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9025,"byte_end":9028,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ It may be used as a trait object, and supports upcasting to [`RngCore`] via","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9029,"byte_end":9108,"line_start":214,"line_end":214,"column_start":1,"column_end":80}},{"value":"/ the [`CryptoRngCore::as_rngcore`] method.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9109,"byte_end":9154,"line_start":215,"line_end":215,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9155,"byte_end":9158,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9159,"byte_end":9172,"line_start":217,"line_end":217,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9173,"byte_end":9176,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9177,"byte_end":9184,"line_start":219,"line_end":219,"column_start":1,"column_end":8}},{"value":"/ use rand_core::CryptoRngCore;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9185,"byte_end":9218,"line_start":220,"line_end":220,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9219,"byte_end":9222,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ #[allow(unused)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9223,"byte_end":9243,"line_start":222,"line_end":222,"column_start":1,"column_end":21}},{"value":"/ fn make_token(rng: &mut dyn CryptoRngCore) -> [u8; 32] {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9244,"byte_end":9304,"line_start":223,"line_end":223,"column_start":1,"column_end":61}},{"value":"/     let mut buf = [0u8; 32];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9305,"byte_end":9337,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/     rng.fill_bytes(&mut buf);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9338,"byte_end":9371,"line_start":225,"line_end":225,"column_start":1,"column_end":34}},{"value":"/     buf","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9372,"byte_end":9383,"line_start":226,"line_end":226,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9384,"byte_end":9389,"line_start":227,"line_end":227,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9390,"byte_end":9397,"line_start":228,"line_end":228,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9499,"byte_end":9509,"line_start":231,"line_end":231,"column_start":8,"column_end":18},"name":"as_rngcore","qualname":"::CryptoRngCore::as_rngcore","value":"pub fn as_rngcore(&mut Self) -> &mut dyn RngCore","parent":{"krate":0,"index":209},"children":[],"decl_id":null,"docs":" Upcast to an [`RngCore`] trait object.\n","sig":null,"attributes":[{"value":"/ Upcast to an [`RngCore`] trait object.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9449,"byte_end":9491,"line_start":230,"line_end":230,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":214},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9925,"byte_end":9936,"line_start":246,"line_end":246,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":222},{"krate":0,"index":224}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[{"value":"/ A random number generator that can be explicitly seeded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9669,"byte_end":9729,"line_start":240,"line_end":240,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9730,"byte_end":9733,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ This trait encapsulates the low-level functionality common to all","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9734,"byte_end":9803,"line_start":242,"line_end":242,"column_start":1,"column_end":70}},{"value":"/ pseudo-random number generators (PRNGs, or algorithmic generators).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9804,"byte_end":9875,"line_start":243,"line_end":243,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9876,"byte_end":9879,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9880,"byte_end":9914,"line_start":245,"line_end":245,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":215},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11455,"byte_end":11459,"line_start":292,"line_end":292,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferenceable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[{"value":"/ Seed type, which is restricted to types mutably-dereferenceable as `u8`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9950,"byte_end":10025,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ arrays (we recommend `[u8; N]` for some `N`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10030,"byte_end":10079,"line_start":248,"line_end":248,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10084,"byte_end":10087,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ It is recommended to seed PRNGs with a seed of at least circa 100 bits,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10092,"byte_end":10167,"line_start":250,"line_end":250,"column_start":5,"column_end":80}},{"value":"/ which means an array of `[u8; 12]` or greater to avoid picking RNGs with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10172,"byte_end":10248,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/ partially overlapping periods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10253,"byte_end":10287,"line_start":252,"line_end":252,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10292,"byte_end":10295,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ For cryptographic RNG's a seed of 256 bits is recommended, `[u8; 32]`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10300,"byte_end":10374,"line_start":254,"line_end":254,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10379,"byte_end":10382,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10387,"byte_end":10390,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ # Implementing `SeedableRng` for RNGs with large seeds","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10395,"byte_end":10453,"line_start":257,"line_end":257,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10458,"byte_end":10461,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ Note that the required traits `core::default::Default` and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10466,"byte_end":10528,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/ `core::convert::AsMut<u8>` are not implemented for large arrays","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10533,"byte_end":10600,"line_start":260,"line_end":260,"column_start":5,"column_end":72}},{"value":"/ `[u8; N]` with `N` > 32. To be able to implement the traits required by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10605,"byte_end":10680,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ `SeedableRng` for RNGs with such large seeds, the newtype pattern can be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10685,"byte_end":10761,"line_start":262,"line_end":262,"column_start":5,"column_end":81}},{"value":"/ used:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10766,"byte_end":10775,"line_start":263,"line_end":263,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10780,"byte_end":10783,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10788,"byte_end":10795,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand_core::SeedableRng;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10800,"byte_end":10831,"line_start":266,"line_end":266,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10836,"byte_end":10839,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ const N: usize = 64;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10844,"byte_end":10868,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/ pub struct MyRngSeed(pub [u8; N]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10873,"byte_end":10911,"line_start":269,"line_end":269,"column_start":5,"column_end":43}},{"value":"/ pub struct MyRng(MyRngSeed);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10916,"byte_end":10948,"line_start":270,"line_end":270,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10953,"byte_end":10956,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ impl Default for MyRngSeed {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10961,"byte_end":10993,"line_start":272,"line_end":272,"column_start":5,"column_end":37}},{"value":"/     fn default() -> MyRngSeed {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":10998,"byte_end":11033,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/         MyRngSeed([0; N])","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11038,"byte_end":11067,"line_start":274,"line_end":274,"column_start":5,"column_end":34}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11072,"byte_end":11081,"line_start":275,"line_end":275,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11086,"byte_end":11091,"line_start":276,"line_end":276,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11096,"byte_end":11099,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ impl AsMut<[u8]> for MyRngSeed {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11104,"byte_end":11140,"line_start":278,"line_end":278,"column_start":5,"column_end":41}},{"value":"/     fn as_mut(&mut self) -> &mut [u8] {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11145,"byte_end":11188,"line_start":279,"line_end":279,"column_start":5,"column_end":48}},{"value":"/         &mut self.0","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11193,"byte_end":11216,"line_start":280,"line_end":280,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11221,"byte_end":11230,"line_start":281,"line_end":281,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11235,"byte_end":11240,"line_start":282,"line_end":282,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11245,"byte_end":11248,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ impl SeedableRng for MyRng {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11253,"byte_end":11285,"line_start":284,"line_end":284,"column_start":5,"column_end":37}},{"value":"/     type Seed = MyRngSeed;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11290,"byte_end":11320,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11325,"byte_end":11328,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/     fn from_seed(seed: MyRngSeed) -> MyRng {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11333,"byte_end":11381,"line_start":287,"line_end":287,"column_start":5,"column_end":53}},{"value":"/         MyRng(seed)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11386,"byte_end":11409,"line_start":288,"line_end":288,"column_start":5,"column_end":28}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11414,"byte_end":11423,"line_start":289,"line_end":289,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11428,"byte_end":11433,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11438,"byte_end":11445,"line_start":291,"line_end":291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13041,"byte_end":13050,"line_start":319,"line_end":319,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"pub fn from_seed(Self::Seed) -> Self","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using the given seed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11497,"byte_end":11540,"line_start":294,"line_end":294,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11545,"byte_end":11548,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that bits in the seed are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11553,"byte_end":11625,"line_start":296,"line_end":296,"column_start":5,"column_end":77}},{"value":"/ well distributed. That means usually that the number of one and zero","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11630,"byte_end":11702,"line_start":297,"line_end":297,"column_start":5,"column_end":77}},{"value":"/ bits are roughly equal, and values like 0, 1 and (size - 1) are unlikely.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11707,"byte_end":11784,"line_start":298,"line_end":298,"column_start":5,"column_end":82}},{"value":"/ Note that many non-cryptographic PRNGs will show poor quality output","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11789,"byte_end":11861,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ if this is not adhered to. If you wish to seed from simple numbers, use","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11866,"byte_end":11941,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ `seed_from_u64` instead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11946,"byte_end":11974,"line_start":301,"line_end":301,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11979,"byte_end":11982,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ All PRNG implementations should be reproducible unless otherwise noted:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":11987,"byte_end":12062,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ given a fixed `seed`, the same sequence of output should be produced","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12067,"byte_end":12139,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ on all runs, library versions and architectures (e.g. check endianness).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12144,"byte_end":12220,"line_start":305,"line_end":305,"column_start":5,"column_end":81}},{"value":"/ Any \"value-breaking\" changes to the generator should require bumping at","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12225,"byte_end":12300,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ least the minor version and documentation of the change.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12305,"byte_end":12365,"line_start":307,"line_end":307,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12370,"byte_end":12373,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ It is not required that this function yield the same state as a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12378,"byte_end":12445,"line_start":309,"line_end":309,"column_start":5,"column_end":72}},{"value":"/ reference implementation of the PRNG given equivalent seed; if necessary","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12450,"byte_end":12526,"line_start":310,"line_end":310,"column_start":5,"column_end":81}},{"value":"/ another constructor replicating behaviour from a reference","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12531,"byte_end":12593,"line_start":311,"line_end":311,"column_start":5,"column_end":67}},{"value":"/ implementation can be added.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12598,"byte_end":12630,"line_start":312,"line_end":312,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12635,"byte_end":12638,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations should make sure `from_seed` never panics. In the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12643,"byte_end":12717,"line_start":314,"line_end":314,"column_start":5,"column_end":79}},{"value":"/ case that some special values (like an all zero seed) are not viable","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12722,"byte_end":12794,"line_start":315,"line_end":315,"column_start":5,"column_end":77}},{"value":"/ seeds it is preferable to map these to alternative constant value(s),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12799,"byte_end":12872,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ for example `0xBAD5EEDu32` or `0x0DDB1A5E5BAD5EEDu64` (\"odd biases? bad","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12877,"byte_end":12952,"line_start":317,"line_end":317,"column_start":5,"column_end":80}},{"value":"/ seed\"). This is assuming only a small number of values must be rejected.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":12957,"byte_end":13033,"line_start":318,"line_end":318,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13867,"byte_end":13880,"line_start":335,"line_end":335,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"pub fn seed_from_u64(u64) -> Self","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[{"value":"/ Create a new PRNG using a `u64` seed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13083,"byte_end":13124,"line_start":321,"line_end":321,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13129,"byte_end":13132,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This is a convenience-wrapper around `from_seed` to allow construction","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13137,"byte_end":13211,"line_start":323,"line_end":323,"column_start":5,"column_end":79}},{"value":"/ of any `SeedableRng` from a simple `u64` value. It is designed such that","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13216,"byte_end":13292,"line_start":324,"line_end":324,"column_start":5,"column_end":81}},{"value":"/ low Hamming Weight numbers like 0 and 1 can be used and should still","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13297,"byte_end":13369,"line_start":325,"line_end":325,"column_start":5,"column_end":77}},{"value":"/ result in good, independent seeds to the PRNG which is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13374,"byte_end":13442,"line_start":326,"line_end":326,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13447,"byte_end":13450,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ This **is not suitable for cryptography**, as should be clear given that","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13455,"byte_end":13531,"line_start":328,"line_end":328,"column_start":5,"column_end":81}},{"value":"/ the input size is only 64 bits.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13536,"byte_end":13571,"line_start":329,"line_end":329,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13576,"byte_end":13579,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Implementations for PRNGs *may* provide their own implementations of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13584,"byte_end":13656,"line_start":331,"line_end":331,"column_start":5,"column_end":77}},{"value":"/ this function, but the default implementation should be good enough for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13661,"byte_end":13736,"line_start":332,"line_end":332,"column_start":5,"column_end":80}},{"value":"/ all purposes. *Changing* the implementation of this function should be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13741,"byte_end":13815,"line_start":333,"line_end":333,"column_start":5,"column_end":79}},{"value":"/ considered a value-breaking change.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":13820,"byte_end":13859,"line_start":334,"line_end":334,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16326,"byte_end":16334,"line_start":390,"line_end":390,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"pub fn from_rng<R: RngCore>(R) -> Result<Self, Error>","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[{"value":"/ Create a new PRNG seeded from another `Rng`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15011,"byte_end":15059,"line_start":366,"line_end":366,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15064,"byte_end":15067,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ This may be useful when needing to rapidly seed many PRNGs from a master","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15072,"byte_end":15148,"line_start":368,"line_end":368,"column_start":5,"column_end":81}},{"value":"/ PRNG, and to allow forking of PRNGs. It may be considered deterministic.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15153,"byte_end":15229,"line_start":369,"line_end":369,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15234,"byte_end":15237,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The master PRNG should be at least as high quality as the child PRNGs.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15242,"byte_end":15316,"line_start":371,"line_end":371,"column_start":5,"column_end":79}},{"value":"/ When seeding non-cryptographic child PRNGs, we recommend using a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15321,"byte_end":15389,"line_start":372,"line_end":372,"column_start":5,"column_end":73}},{"value":"/ different algorithm for the master PRNG (ideally a CSPRNG) to avoid","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15394,"byte_end":15465,"line_start":373,"line_end":373,"column_start":5,"column_end":76}},{"value":"/ correlations between the child PRNGs. If this is not possible (e.g.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15470,"byte_end":15541,"line_start":374,"line_end":374,"column_start":5,"column_end":76}},{"value":"/ forking using small non-crypto PRNGs) ensure that your PRNG has a good","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15546,"byte_end":15620,"line_start":375,"line_end":375,"column_start":5,"column_end":79}},{"value":"/ mixing function on the output or consider use of a hash function with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15625,"byte_end":15698,"line_start":376,"line_end":376,"column_start":5,"column_end":78}},{"value":"/ `from_seed`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15703,"byte_end":15719,"line_start":377,"line_end":377,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15724,"byte_end":15727,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ Note that seeding `XorShiftRng` from another `XorShiftRng` provides an","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15732,"byte_end":15806,"line_start":379,"line_end":379,"column_start":5,"column_end":79}},{"value":"/ extreme example of what can go wrong: the new PRNG will be a clone","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15811,"byte_end":15881,"line_start":380,"line_end":380,"column_start":5,"column_end":75}},{"value":"/ of the parent.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15886,"byte_end":15904,"line_start":381,"line_end":381,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15909,"byte_end":15912,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ PRNG implementations are allowed to assume that a good RNG is provided","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15917,"byte_end":15991,"line_start":383,"line_end":383,"column_start":5,"column_end":79}},{"value":"/ for seeding, and that it is cryptographically secure when appropriate.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":15996,"byte_end":16070,"line_start":384,"line_end":384,"column_start":5,"column_end":79}},{"value":"/ As of `rand` 0.7 / `rand_core` 0.5, implementations overriding this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16075,"byte_end":16146,"line_start":385,"line_end":385,"column_start":5,"column_end":76}},{"value":"/ method should ensure the implementation satisfies reproducibility","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16151,"byte_end":16220,"line_start":386,"line_end":386,"column_start":5,"column_end":74}},{"value":"/ (in prior versions this was not required).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16225,"byte_end":16271,"line_start":387,"line_end":387,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16276,"byte_end":16279,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ [`rand`]: https://docs.rs/rand","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16284,"byte_end":16318,"line_start":389,"line_end":389,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":17180,"byte_end":17192,"line_start":412,"line_end":412,"column_start":8,"column_end":20},"name":"from_entropy","qualname":"::SeedableRng::from_entropy","value":"pub fn from_entropy() -> Self","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Creates a new instance of the RNG seeded via [`getrandom`].","sig":null,"attributes":[{"value":"/ Creates a new instance of the RNG seeded via [`getrandom`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16519,"byte_end":16582,"line_start":396,"line_end":396,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16587,"byte_end":16590,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ This method is the recommended way to construct non-deterministic PRNGs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16595,"byte_end":16670,"line_start":398,"line_end":398,"column_start":5,"column_end":80}},{"value":"/ since it is convenient and secure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16675,"byte_end":16713,"line_start":399,"line_end":399,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16718,"byte_end":16721,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ In case the overhead of using [`getrandom`] to seed *many* PRNGs is an","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16726,"byte_end":16800,"line_start":401,"line_end":401,"column_start":5,"column_end":79}},{"value":"/ issue, one may prefer to seed from a local PRNG, e.g.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16805,"byte_end":16862,"line_start":402,"line_end":402,"column_start":5,"column_end":62}},{"value":"/ `from_rng(thread_rng()).unwrap()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16867,"byte_end":16905,"line_start":403,"line_end":403,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16910,"byte_end":16913,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16918,"byte_end":16930,"line_start":405,"line_end":405,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16935,"byte_end":16938,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ If [`getrandom`] is unable to provide secure entropy this method will panic.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":16943,"byte_end":17023,"line_start":407,"line_end":407,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":17028,"byte_end":17031,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ [`getrandom`]: https://docs.rs/getrandom","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":17036,"byte_end":17080,"line_start":409,"line_end":409,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":17085,"byte_end":17114,"line_start":410,"line_end":410,"column_start":5,"column_end":34}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25782,"byte_end":25790,"line_start":131,"line_end":131,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26090,"byte_end":26098,"line_start":141,"line_end":141,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27360,"byte_end":27368,"line_start":181,"line_end":181,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29177,"byte_end":29185,"line_start":243,"line_end":243,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31150,"byte_end":31160,"line_start":295,"line_end":295,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31511,"byte_end":31521,"line_start":306,"line_end":306,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32881,"byte_end":32891,"line_start":349,"line_end":349,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":34676,"byte_end":34686,"line_start":412,"line_end":412,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":35124,"byte_end":35132,"line_start":431,"line_end":431,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39447,"byte_end":39452,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42910,"byte_end":42915,"line_start":118,"line_end":118,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":43379,"byte_end":43384,"line_start":135,"line_end":135,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":43824,"byte_end":43829,"line_start":152,"line_end":152,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44177,"byte_end":44182,"line_start":169,"line_end":169,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44530,"byte_end":44535,"line_start":186,"line_end":186,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44712,"byte_end":44717,"line_start":194,"line_end":194,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":45106,"byte_end":45115,"line_start":210,"line_end":210,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":45280,"byte_end":45289,"line_start":217,"line_end":217,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56461,"byte_end":56466,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56488,"byte_end":56493,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9592,"byte_end":9593,"line_start":234,"line_end":234,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":18341,"byte_end":18344,"line_start":450,"line_end":450,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":19240,"byte_end":19243,"line_start":485,"line_end":485,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1836,"byte_end":1841,"line_start":52,"line_end":52,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":21}},{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1862,"byte_end":1867,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":136}},{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":1877,"byte_end":1879,"line_start":55,"line_end":55,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":174}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":25782,"byte_end":25790,"line_start":131,"line_end":131,"column_start":51,"column_end":59},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":245},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":26090,"byte_end":26098,"line_start":141,"line_end":141,"column_start":23,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":27360,"byte_end":27368,"line_start":181,"line_end":181,"column_start":47,"column_end":55},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":29177,"byte_end":29185,"line_start":243,"line_end":243,"column_start":53,"column_end":61},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":214}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31150,"byte_end":31160,"line_start":295,"line_end":295,"column_start":51,"column_end":61},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":253},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":31511,"byte_end":31521,"line_start":306,"line_end":306,"column_start":23,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":32881,"byte_end":32891,"line_start":349,"line_end":349,"column_start":47,"column_end":57},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":253},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":34676,"byte_end":34686,"line_start":412,"line_end":412,"column_start":53,"column_end":63},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":253},"to":{"krate":0,"index":214}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/block.rs","byte_start":35124,"byte_end":35132,"line_start":431,"line_end":431,"column_start":49,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":245},"to":{"krate":0,"index":208}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":39447,"byte_end":39452,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":42910,"byte_end":42915,"line_start":118,"line_end":118,"column_start":21,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":109},"to":{"krate":1,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":43379,"byte_end":43384,"line_start":135,"line_end":135,"column_start":23,"column_end":28},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":109},"to":{"krate":1,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":43824,"byte_end":43829,"line_start":152,"line_end":152,"column_start":27,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":109},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44177,"byte_end":44182,"line_start":169,"line_end":169,"column_start":33,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":109},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44530,"byte_end":44535,"line_start":186,"line_end":186,"column_start":28,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":109},"to":{"krate":4,"index":2452}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":44712,"byte_end":44717,"line_start":194,"line_end":194,"column_start":31,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":4,"index":4047},"to":{"krate":1,"index":2930}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":45106,"byte_end":45115,"line_start":210,"line_end":210,"column_start":23,"column_end":32},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":262},"to":{"krate":1,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/error.rs","byte_start":45280,"byte_end":45289,"line_start":217,"line_end":217,"column_start":28,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":262},"to":{"krate":4,"index":2452}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/impls.rs","byte_start":47835,"byte_end":47839,"line_start":55,"line_end":55,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":3034},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56461,"byte_end":56466,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":208}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/os.rs","byte_start":56488,"byte_end":56493,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":270},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9423,"byte_end":9432,"line_start":229,"line_end":229,"column_start":26,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":208},"to":{"krate":0,"index":209}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9435,"byte_end":9442,"line_start":229,"line_end":229,"column_start":38,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":203},"to":{"krate":0,"index":209}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9592,"byte_end":9593,"line_start":234,"line_end":234,"column_start":48,"column_end":49},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":212},"to":{"krate":0,"index":209}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":9938,"byte_end":9943,"line_start":246,"line_end":246,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":214}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":18341,"byte_end":18344,"line_start":450,"line_end":450,"column_start":39,"column_end":42},"kind":{"Impl":{"id":23}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.6.4/src/lib.rs","byte_start":19240,"byte_end":19243,"line_start":485,"line_end":485,"column_start":43,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":5,"index":315},"to":{"krate":0,"index":208}}]}