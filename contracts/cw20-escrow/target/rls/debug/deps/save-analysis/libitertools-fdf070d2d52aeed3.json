{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5","program":"/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","itertools","--edition=2018","/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"use_alloc\"","--cfg","feature=\"use_std\"","-C","metadata=fdf070d2d52aeed3","-C","extra-filename=-fdf070d2d52aeed3","--out-dir","/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","-L","dependency=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps","--extern","either=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps/libeither-f26ca31c51ecb102.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-escrow/target/rls/debug/deps/libitertools-fdf070d2d52aeed3.rmeta"},"prelude":{"crate_id":{"name":"itertools","disambiguator":[14824212338417553310,0]},"crate_root":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src","external_crates":[{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","num":18,"id":{"name":"either","disambiguator":[12145912199752387411,0]}}],"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":0,"byte_end":128862,"line_start":1,"line_end":3784,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":292},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1436,"byte_end":1442,"line_start":60,"line_end":60,"column_start":17,"column_end":23},"alias_span":null,"name":"Either","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":5035},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2004,"byte_end":2008,"line_start":84,"line_end":84,"column_start":14,"column_end":18},"alias_span":null,"name":"__std_iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2115,"byte_end":2120,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"alias_span":null,"name":"Dedup","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":390},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2130,"byte_end":2137,"line_start":90,"line_end":90,"column_start":9,"column_end":16},"alias_span":null,"name":"DedupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2147,"byte_end":2161,"line_start":91,"line_end":91,"column_start":9,"column_end":23},"alias_span":null,"name":"DedupWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":416},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2171,"byte_end":2187,"line_start":92,"line_end":92,"column_start":9,"column_end":25},"alias_span":null,"name":"DedupByWithCount","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2948},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2197,"byte_end":2207,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"alias_span":null,"name":"Interleave","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2962},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2217,"byte_end":2235,"line_start":94,"line_end":94,"column_start":9,"column_end":27},"alias_span":null,"name":"InterleaveShortest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2245,"byte_end":2256,"line_start":95,"line_end":95,"column_start":9,"column_end":20},"alias_span":null,"name":"FilterMapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3369},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2266,"byte_end":2274,"line_start":96,"line_end":96,"column_start":9,"column_end":17},"alias_span":null,"name":"FilterOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2986},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2284,"byte_end":2291,"line_start":97,"line_end":97,"column_start":9,"column_end":16},"alias_span":null,"name":"Product","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2976},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2301,"byte_end":2308,"line_start":98,"line_end":98,"column_start":9,"column_end":16},"alias_span":null,"name":"PutBack","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3001},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2318,"byte_end":2326,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"alias_span":null,"name":"Batching","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2336,"byte_end":2343,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2353,"byte_end":2358,"line_start":101,"line_end":101,"column_start":9,"column_end":14},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":668},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2368,"byte_end":2373,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"alias_span":null,"name":"Merge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":674},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2383,"byte_end":2390,"line_start":103,"line_end":103,"column_start":9,"column_end":16},"alias_span":null,"name":"MergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":709},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2400,"byte_end":2412,"line_start":104,"line_end":104,"column_start":9,"column_end":21},"alias_span":null,"name":"TakeWhileRef","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3030},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2422,"byte_end":2431,"line_start":105,"line_end":105,"column_start":9,"column_end":18},"alias_span":null,"name":"WhileSome","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2441,"byte_end":2449,"line_start":106,"line_end":106,"column_start":9,"column_end":17},"alias_span":null,"name":"Coalesce","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3039},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2459,"byte_end":2476,"line_start":107,"line_end":107,"column_start":9,"column_end":26},"alias_span":null,"name":"TupleCombinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3380},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2486,"byte_end":2495,"line_start":108,"line_end":108,"column_start":9,"column_end":18},"alias_span":null,"name":"Positions","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3391},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2505,"byte_end":2511,"line_start":109,"line_end":109,"column_start":9,"column_end":15},"alias_span":null,"name":"Update","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2575,"byte_end":2585,"line_start":112,"line_end":112,"column_start":31,"column_end":41},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3011},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2587,"byte_end":2591,"line_start":112,"line_end":112,"column_start":43,"column_end":47},"alias_span":null,"name":"Step","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2922},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2657,"byte_end":2669,"line_start":114,"line_end":114,"column_start":30,"column_end":42},"alias_span":null,"name":"MultiProduct","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1054},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2738,"byte_end":2750,"line_start":116,"line_end":116,"column_start":34,"column_end":46},"alias_span":null,"name":"Combinations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3743},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2836,"byte_end":2863,"line_start":118,"line_end":118,"column_start":51,"column_end":78},"alias_span":null,"name":"CombinationsWithReplacement","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3732},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2902,"byte_end":2912,"line_start":119,"line_end":119,"column_start":38,"column_end":48},"alias_span":null,"name":"ConsTuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3752},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2950,"byte_end":2965,"line_start":120,"line_end":120,"column_start":37,"column_end":52},"alias_span":null,"name":"ExactlyOneError","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3772},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2995,"byte_end":3001,"line_start":121,"line_end":121,"column_start":29,"column_end":35},"alias_span":null,"name":"Format","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3761},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3003,"byte_end":3013,"line_start":121,"line_end":121,"column_start":37,"column_end":47},"alias_span":null,"name":"FormatWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1198},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3047,"byte_end":3056,"line_start":122,"line_end":122,"column_start":32,"column_end":41},"alias_span":null,"name":"FlattenOk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3831},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3124,"byte_end":3135,"line_start":124,"line_end":124,"column_start":35,"column_end":46},"alias_span":null,"name":"GroupingMap","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1313},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3137,"byte_end":3150,"line_start":124,"line_end":124,"column_start":48,"column_end":61},"alias_span":null,"name":"GroupingMapBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1513},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3220,"byte_end":3230,"line_start":126,"line_end":126,"column_start":34,"column_end":44},"alias_span":null,"name":"IntoChunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1537},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3232,"byte_end":3237,"line_start":126,"line_end":126,"column_start":46,"column_end":51},"alias_span":null,"name":"Chunk","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3239,"byte_end":3245,"line_start":126,"line_end":126,"column_start":53,"column_end":59},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3247,"byte_end":3254,"line_start":126,"line_end":126,"column_start":61,"column_end":68},"alias_span":null,"name":"GroupBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1490},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3256,"byte_end":3261,"line_start":126,"line_end":126,"column_start":70,"column_end":75},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1476},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3263,"byte_end":3269,"line_start":126,"line_end":126,"column_start":77,"column_end":83},"alias_span":null,"name":"Groups","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1569},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3305,"byte_end":3316,"line_start":127,"line_end":127,"column_start":34,"column_end":45},"alias_span":null,"name":"Intersperse","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3856},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3318,"byte_end":3333,"line_start":127,"line_end":127,"column_start":47,"column_end":62},"alias_span":null,"name":"IntersperseWith","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1637},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3403,"byte_end":3409,"line_start":129,"line_end":129,"column_start":34,"column_end":40},"alias_span":null,"name":"KMerge","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1651},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3411,"byte_end":3419,"line_start":129,"line_end":129,"column_start":42,"column_end":50},"alias_span":null,"name":"KMergeBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1720},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3453,"byte_end":3464,"line_start":130,"line_end":130,"column_start":32,"column_end":43},"alias_span":null,"name":"MergeJoinBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3924},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3535,"byte_end":3544,"line_start":132,"line_end":132,"column_start":36,"column_end":45},"alias_span":null,"name":"MultiPeek","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3947},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3609,"byte_end":3616,"line_start":134,"line_end":134,"column_start":30,"column_end":37},"alias_span":null,"name":"PeekNth","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":3935},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3647,"byte_end":3655,"line_start":135,"line_end":135,"column_start":30,"column_end":38},"alias_span":null,"name":"PadUsing","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1877},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3696,"byte_end":3712,"line_start":136,"line_end":136,"column_start":40,"column_end":56},"alias_span":null,"name":"PeekingTakeWhile","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1911},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3781,"byte_end":3793,"line_start":138,"line_end":138,"column_start":34,"column_end":46},"alias_span":null,"name":"Permutations","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4033},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3836,"byte_end":3850,"line_start":139,"line_end":139,"column_start":42,"column_end":56},"alias_span":null,"name":"ProcessResults","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":1975},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3915,"byte_end":3923,"line_start":141,"line_end":141,"column_start":30,"column_end":38},"alias_span":null,"name":"Powerset","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4044},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":3995,"byte_end":4003,"line_start":143,"line_end":143,"column_start":37,"column_end":45},"alias_span":null,"name":"PutBackN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4054},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4071,"byte_end":4077,"line_start":145,"line_end":145,"column_start":33,"column_end":39},"alias_span":null,"name":"RcIter","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4061},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4107,"byte_end":4114,"line_start":146,"line_end":146,"column_start":29,"column_end":36},"alias_span":null,"name":"RepeatN","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4071},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4170,"byte_end":4180,"line_start":148,"line_end":148,"column_start":30,"column_end":40},"alias_span":null,"name":"RepeatCall","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4079},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4182,"byte_end":4188,"line_start":148,"line_end":148,"column_start":42,"column_end":48},"alias_span":null,"name":"Unfold","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4088},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4190,"byte_end":4197,"line_start":148,"line_end":148,"column_start":50,"column_end":57},"alias_span":null,"name":"Iterate","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4108},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4258,"byte_end":4261,"line_start":150,"line_end":150,"column_start":25,"column_end":28},"alias_span":null,"name":"Tee","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4115},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4295,"byte_end":4306,"line_start":151,"line_end":151,"column_start":33,"column_end":44},"alias_span":null,"name":"TupleBuffer","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4138},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4308,"byte_end":4320,"line_start":151,"line_end":151,"column_start":46,"column_end":58},"alias_span":null,"name":"TupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4151},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4322,"byte_end":4342,"line_start":151,"line_end":151,"column_start":60,"column_end":80},"alias_span":null,"name":"CircularTupleWindows","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4125},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4344,"byte_end":4350,"line_start":151,"line_end":151,"column_start":82,"column_end":88},"alias_span":null,"name":"Tuples","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2340},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4422,"byte_end":4432,"line_start":153,"line_end":153,"column_start":38,"column_end":48},"alias_span":null,"name":"Duplicates","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2332},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4434,"byte_end":4446,"line_start":153,"line_end":153,"column_start":50,"column_end":62},"alias_span":null,"name":"DuplicatesBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4397},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4514,"byte_end":4520,"line_start":155,"line_end":155,"column_start":34,"column_end":40},"alias_span":null,"name":"Unique","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4384},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4522,"byte_end":4530,"line_start":155,"line_end":155,"column_start":42,"column_end":50},"alias_span":null,"name":"UniqueBy","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2424},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4567,"byte_end":4579,"line_start":156,"line_end":156,"column_start":35,"column_end":47},"alias_span":null,"name":"WithPosition","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4641},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4613,"byte_end":4618,"line_start":157,"line_end":157,"column_start":33,"column_end":38},"alias_span":null,"name":"ZipEq","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4654},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4652,"byte_end":4662,"line_start":158,"line_end":158,"column_start":33,"column_end":43},"alias_span":null,"name":"ZipLongest","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":4667},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4693,"byte_end":4696,"line_start":159,"line_end":159,"column_start":30,"column_end":33},"alias_span":null,"name":"Zip","value":"","parent":{"krate":0,"index":54}},{"kind":"Use","ref_id":{"krate":0,"index":2190},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4827,"byte_end":4843,"line_start":164,"line_end":164,"column_start":32,"column_end":48},"alias_span":null,"name":"HomogeneousTuple","value":"","parent":{"krate":0,"index":276}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4893,"byte_end":4894,"line_start":168,"line_end":168,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"MapOk, PutBack, FilterMapOk, DedupByWithCount, Dedup, PeekingTakeWhile, TakeWhileRef, TupleCombinations, Powerset, MultiPeek, GroupBy, IntoChunks, GroupingMap, ExactlyOneError, WithPosition, Unique, Step, CircularTupleWindows, Duplicates, Merge, Batching, FilterOk, Interleave, DedupBy, WhileSome, Combinations, PadUsing, MergeJoinBy, KMerge, Intersperse, Positions, GroupingMapBy, FlattenOk, ZipLongest, Format, UniqueBy, MultiProduct, Tuples, Coalesce, MergeBy, MapInto, Product, PutBackN, InterleaveShortest, DedupWithCount, DuplicatesBy, Permutations, Update, KMergeBy, IntersperseWith, FormatWith, ZipEq, CombinationsWithReplacement, TupleWindows, Tee","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1030},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4924,"byte_end":4930,"line_start":169,"line_end":169,"column_start":29,"column_end":35},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1038},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4965,"byte_end":4976,"line_start":170,"line_end":170,"column_start":34,"column_end":45},"alias_span":null,"name":"cons_tuples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4999,"byte_end":5008,"line_start":171,"line_end":171,"column_start":22,"column_end":31},"alias_span":null,"name":"diff_with","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5031,"byte_end":5035,"line_start":172,"line_end":172,"column_start":22,"column_end":26},"alias_span":null,"name":"Diff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1659},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5096,"byte_end":5105,"line_start":174,"line_end":174,"column_start":30,"column_end":39},"alias_span":null,"name":"kmerge_by","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3899},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5131,"byte_end":5143,"line_start":175,"line_end":175,"column_start":24,"column_end":36},"alias_span":null,"name":"MinMaxResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1862},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5180,"byte_end":5191,"line_start":176,"line_end":176,"column_start":36,"column_end":47},"alias_span":null,"name":"PeekingNext","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2007},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5230,"byte_end":5245,"line_start":177,"line_end":177,"column_start":38,"column_end":53},"alias_span":null,"name":"process_results","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2072},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5271,"byte_end":5279,"line_start":178,"line_end":178,"column_start":25,"column_end":33},"alias_span":null,"name":"repeat_n","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2118},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5327,"byte_end":5338,"line_start":180,"line_end":180,"column_start":26,"column_end":37},"alias_span":null,"name":"repeat_call","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2127},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5340,"byte_end":5346,"line_start":180,"line_end":180,"column_start":39,"column_end":45},"alias_span":null,"name":"unfold","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2149},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5348,"byte_end":5355,"line_start":180,"line_end":180,"column_start":47,"column_end":54},"alias_span":null,"name":"iterate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4613},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5388,"byte_end":5396,"line_start":181,"line_end":181,"column_start":31,"column_end":39},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2406},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5426,"byte_end":5436,"line_start":182,"line_end":182,"column_start":29,"column_end":39},"alias_span":null,"name":"multiunzip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2409},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5438,"byte_end":5448,"line_start":182,"line_end":182,"column_start":41,"column_end":51},"alias_span":null,"name":"MultiUnzip","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2507},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5476,"byte_end":5484,"line_start":183,"line_end":183,"column_start":26,"column_end":34},"alias_span":null,"name":"multizip","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":129961,"byte_end":129962,"line_start":10,"line_end":10,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"dedup_by, dedup_by_with_count, dedup, DedupByWithCount, Dedup, coalesce, dedup_with_count, DedupBy, Coalesce, DedupWithCount","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":486},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130002,"byte_end":130009,"line_start":11,"line_end":11,"column_start":39,"column_end":46},"alias_span":null,"name":"MapInto","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130011,"byte_end":130016,"line_start":11,"line_end":11,"column_start":48,"column_end":53},"alias_span":null,"name":"MapOk","value":"","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":467},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130059,"byte_end":130069,"line_start":13,"line_end":13,"column_start":20,"column_end":30},"alias_span":null,"name":"MapResults","value":"","parent":{"krate":0,"index":332}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130130,"byte_end":130131,"line_start":15,"line_end":15,"column_start":30,"column_end":31},"alias_span":null,"name":"*","value":"multi_cartesian_product, MultiProduct","parent":{"krate":0,"index":332}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5551,"byte_end":5563,"line_start":186,"line_end":186,"column_start":32,"column_end":44},"alias_span":null,"name":"EitherOrBoth","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":577},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184914,"byte_end":184924,"line_start":21,"line_end":21,"column_start":5,"column_end":15},"alias_span":null,"name":"interleave","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":671},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184930,"byte_end":184935,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"alias_span":null,"name":"merge","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":602},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184941,"byte_end":184949,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"put_back","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2021},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185016,"byte_end":185026,"line_start":26,"line_end":26,"column_start":33,"column_end":43},"alias_span":null,"name":"put_back_n","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1767},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185089,"byte_end":185098,"line_start":28,"line_end":28,"column_start":32,"column_end":41},"alias_span":null,"name":"multipeek","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1833},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185155,"byte_end":185163,"line_start":30,"line_end":30,"column_start":26,"column_end":34},"alias_span":null,"name":"peek_nth","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1649},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185223,"byte_end":185229,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"alias_span":null,"name":"kmerge","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2448},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185259,"byte_end":185265,"line_start":33,"line_end":33,"column_start":29,"column_end":35},"alias_span":null,"name":"zip_eq","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":1716},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185294,"byte_end":185307,"line_start":34,"line_end":34,"column_start":28,"column_end":41},"alias_span":null,"name":"merge_join_by","value":"","parent":{"krate":0,"index":930}},{"kind":"Use","ref_id":{"krate":0,"index":2046},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185367,"byte_end":185373,"line_start":36,"line_end":36,"column_start":29,"column_end":35},"alias_span":null,"name":"rciter","value":"","parent":{"krate":0,"index":930}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5630,"byte_end":5631,"line_start":190,"line_end":190,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"zip_eq, merge, interleave, kmerge, merge_join_by","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":0,"byte_end":128862,"line_start":1,"line_end":3784,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":878},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1033},{"krate":0,"index":1041},{"krate":0,"index":1078},{"krate":0,"index":1105},{"krate":0,"index":1151},{"krate":0,"index":1179},{"krate":0,"index":1231},{"krate":0,"index":1247},{"krate":0,"index":1274},{"krate":0,"index":1366},{"krate":0,"index":1387},{"krate":0,"index":1552},{"krate":0,"index":1593},{"krate":0,"index":1604},{"krate":0,"index":1678},{"krate":0,"index":1696},{"krate":0,"index":1745},{"krate":0,"index":1754},{"krate":0,"index":1787},{"krate":0,"index":1820},{"krate":0,"index":1852},{"krate":0,"index":1898},{"krate":0,"index":1952},{"krate":0,"index":1993},{"krate":0,"index":2014},{"krate":0,"index":2032},{"krate":0,"index":2068},{"krate":0,"index":2086},{"krate":0,"index":2109},{"krate":0,"index":2152},{"krate":0,"index":2174},{"krate":0,"index":2251},{"krate":0,"index":2344},{"krate":0,"index":2405},{"krate":0,"index":2413},{"krate":0,"index":2444},{"krate":0,"index":2460},{"krate":0,"index":2503},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2514},{"krate":0,"index":2848},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":5096},{"krate":0,"index":5104},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5112},{"krate":0,"index":5114},{"krate":0,"index":5117},{"krate":0,"index":5119},{"krate":0,"index":2861}],"decl_id":null,"docs":" Extra iterator adaptors, functions and macros.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"crate_name = \"itertools\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ Extra iterator adaptors, functions and macros.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98,"byte_end":148,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":149,"byte_end":152,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ To extend [`Iterator`] with methods in this crate, import","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":153,"byte_end":214,"line_start":7,"line_end":7,"column_start":1,"column_end":62}},{"value":"/ the [`Itertools`] trait:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":215,"byte_end":243,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":244,"byte_end":247,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":248,"byte_end":255,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":256,"byte_end":285,"line_start":11,"line_end":11,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":286,"byte_end":293,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":294,"byte_end":297,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Now, new methods like [`interleave`](Itertools::interleave)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":298,"byte_end":361,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/ are available on all iterators:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":362,"byte_end":397,"line_start":15,"line_end":15,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":398,"byte_end":401,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":402,"byte_end":409,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":410,"byte_end":439,"line_start":18,"line_end":18,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":440,"byte_end":443,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ let it = (1..3).interleave(vec![-1, -2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":444,"byte_end":489,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":490,"byte_end":542,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":543,"byte_end":550,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":551,"byte_end":554,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Most iterator methods are also provided as functions (with the benefit","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":555,"byte_end":629,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ that they convert parameters using [`IntoIterator`]):","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":630,"byte_end":687,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":688,"byte_end":691,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":692,"byte_end":699,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use itertools::interleave;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":700,"byte_end":730,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":731,"byte_end":734,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ for elt in interleave(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":735,"byte_end":786,"line_start":30,"line_end":30,"column_start":1,"column_end":52}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":787,"byte_end":810,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":811,"byte_end":816,"line_start":32,"line_end":32,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":817,"byte_end":824,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":825,"byte_end":828,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Crate Features","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":829,"byte_end":850,"line_start":35,"line_end":35,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":851,"byte_end":854,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ - `use_std`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":855,"byte_end":870,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/   - Enabled by default.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":871,"byte_end":898,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/   - Disable to compile itertools using `#![no_std]`. This disables","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":899,"byte_end":969,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/     any items that depend on collections (like `group_by`, `unique`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":970,"byte_end":1042,"line_start":40,"line_end":40,"column_start":1,"column_end":73}},{"value":"/     `kmerge`, `join` and many more).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1043,"byte_end":1083,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1084,"byte_end":1087,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Rust Version","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1088,"byte_end":1107,"line_start":43,"line_end":43,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1108,"byte_end":1111,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This version of itertools requires Rust 1.32 or later.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":1112,"byte_end":1170,"line_start":45,"line_end":45,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":54},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2066,"byte_end":2073,"line_start":87,"line_end":87,"column_start":9,"column_end":16},"name":"structs","qualname":"::structs","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273}],"decl_id":null,"docs":" The concrete iterator types.\n","sig":null,"attributes":[{"value":"/ The concrete iterator types.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":2025,"byte_end":2057,"line_start":86,"line_end":86,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":276},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4787,"byte_end":4793,"line_start":163,"line_end":163,"column_start":9,"column_end":15},"name":"traits","qualname":"::traits","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":277}],"decl_id":null,"docs":" Traits helpful for using certain `Itertools` methods in generic contexts.\n","sig":null,"attributes":[{"value":"/ Traits helpful for using certain `Itertools` methods in generic contexts.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":4701,"byte_end":4778,"line_start":162,"line_end":162,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":343},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160469,"byte_end":160479,"line_start":7,"line_end":7,"column_start":12,"column_end":22},"name":"CoalesceBy","qualname":"::adaptors::coalesce::CoalesceBy","value":"CoalesceBy {  }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160384,"byte_end":160457,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160848,"byte_end":160865,"line_start":31,"line_end":31,"column_start":11,"column_end":28},"name":"CoalescePredicate","qualname":"::adaptors::coalesce::CoalescePredicate","value":"CoalescePredicate<Item, T>","parent":null,"children":[{"krate":0,"index":361}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160884,"byte_end":160897,"line_start":32,"line_end":32,"column_start":8,"column_end":21},"name":"coalesce_pair","qualname":"::adaptors::coalesce::CoalescePredicate::coalesce_pair","value":"pub fn coalesce_pair(&mut Self, T, Item) -> Result<T, (T, T)>","parent":{"krate":0,"index":358},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":379},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162682,"byte_end":162690,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"name":"Coalesce","qualname":"::adaptors::coalesce::Coalesce","value":"CoalesceBy<I, F, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that may join together adjacent elements.","sig":null,"attributes":[{"value":"/ An iterator adaptor that may join together adjacent elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162529,"byte_end":162594,"line_start":87,"line_end":87,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162595,"byte_end":162598,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ See [`.coalesce()`](crate::Itertools::coalesce) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162599,"byte_end":162672,"line_start":89,"line_end":89,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":390},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163372,"byte_end":163379,"line_start":116,"line_end":116,"column_start":10,"column_end":17},"name":"DedupBy","qualname":"::adaptors::coalesce::DedupBy","value":"CoalesceBy<I, DedupPred2CoalescePred<Pred>, <I as Iterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, determining equality using a comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163136,"byte_end":163243,"line_start":113,"line_end":113,"column_start":1,"column_end":108}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163244,"byte_end":163247,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by()`](crate::Itertools::dedup_by) or [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163248,"byte_end":163362,"line_start":115,"line_end":115,"column_start":1,"column_end":115}}]},{"kind":"Struct","id":{"krate":0,"index":2867},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163488,"byte_end":163510,"line_start":119,"line_end":119,"column_start":12,"column_end":34},"name":"DedupPred2CoalescePred","qualname":"::adaptors::coalesce::DedupPred2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":395},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163635,"byte_end":163649,"line_start":125,"line_end":125,"column_start":11,"column_end":25},"name":"DedupPredicate","qualname":"::adaptors::coalesce::DedupPredicate","value":"DedupPredicate<T>","parent":null,"children":[{"krate":0,"index":397}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163724,"byte_end":163734,"line_start":127,"line_end":127,"column_start":8,"column_end":18},"name":"dedup_pair","qualname":"::adaptors::coalesce::DedupPredicate::dedup_pair","value":"pub fn dedup_pair(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2875},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164102,"byte_end":164109,"line_start":144,"line_end":144,"column_start":12,"column_end":19},"name":"DedupEq","qualname":"::adaptors::coalesce::DedupEq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":412},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164760,"byte_end":164765,"line_start":173,"line_end":173,"column_start":10,"column_end":15},"name":"Dedup","qualname":"::adaptors::coalesce::Dedup","value":"DedupBy<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164621,"byte_end":164678,"line_start":170,"line_end":170,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164679,"byte_end":164682,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup()`](crate::Itertools::dedup) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164683,"byte_end":164750,"line_start":172,"line_end":172,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":416},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165274,"byte_end":165290,"line_start":188,"line_end":188,"column_start":10,"column_end":26},"name":"DedupByWithCount","qualname":"::adaptors::coalesce::DedupByWithCount","value":"CoalesceBy<I, DedupPredWithCount2CoalescePred<Pred>,\n(usize, <I as Iterator>::Item)>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present. This will determine equality using a comparison function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164912,"byte_end":165003,"line_start":183,"line_end":183,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present. This will determine equality using a comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165004,"byte_end":165097,"line_start":184,"line_end":184,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165098,"byte_end":165101,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_by_with_count()`](crate::Itertools::dedup_by_with_count) or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165102,"byte_end":165178,"line_start":186,"line_end":186,"column_start":1,"column_end":77}},{"value":"/ [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165179,"byte_end":165264,"line_start":187,"line_end":187,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2881},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165428,"byte_end":165459,"line_start":192,"line_end":192,"column_start":12,"column_end":43},"name":"DedupPredWithCount2CoalescePred","qualname":"::adaptors::coalesce::DedupPredWithCount2CoalescePred","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":423},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":166105,"byte_end":166119,"line_start":215,"line_end":215,"column_start":10,"column_end":24},"name":"DedupWithCount","qualname":"::adaptors::coalesce::DedupWithCount","value":"DedupByWithCount<I, DedupEq>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that removes repeated duplicates, while keeping a count of how many\n repeated elements were present.","sig":null,"attributes":[{"value":"/ An iterator adaptor that removes repeated duplicates, while keeping a count of how many","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165874,"byte_end":165965,"line_start":211,"line_end":211,"column_start":1,"column_end":92}},{"value":"/ repeated elements were present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165966,"byte_end":166001,"line_start":212,"line_end":212,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":166002,"byte_end":166005,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ See [`.dedup_with_count()`](crate::Itertools::dedup_with_count) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":166006,"byte_end":166095,"line_start":214,"line_end":214,"column_start":1,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":2891},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166787,"byte_end":166801,"line_start":6,"line_end":6,"column_start":12,"column_end":26},"name":"MapSpecialCase","qualname":"::adaptors::map::MapSpecialCase","value":"MapSpecialCase {  }","parent":null,"children":[{"krate":0,"index":2894},{"krate":0,"index":2895}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166702,"byte_end":166775,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":438},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166846,"byte_end":166862,"line_start":11,"line_end":11,"column_start":11,"column_end":27},"name":"MapSpecialCaseFn","qualname":"::adaptors::map::MapSpecialCaseFn","value":"MapSpecialCaseFn<T>","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":441}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":440},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166877,"byte_end":166880,"line_start":12,"line_end":12,"column_start":10,"column_end":13},"name":"Out","qualname":"::adaptors::map::MapSpecialCaseFn::Out","value":"type Out;","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166889,"byte_end":166893,"line_start":13,"line_end":13,"column_start":8,"column_end":12},"name":"call","qualname":"::adaptors::map::MapSpecialCaseFn::call","value":"pub fn call(&mut Self, T) -> Self::Out","parent":{"krate":0,"index":438},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":464},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168177,"byte_end":168182,"line_start":68,"line_end":68,"column_start":10,"column_end":15},"name":"MapOk","qualname":"::adaptors::map::MapOk","value":"MapSpecialCase<I, MapSpecialCaseFnOk<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply a transformation within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a transformation within a nested `Result::Ok`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168014,"byte_end":168093,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168094,"byte_end":168097,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ See [`.map_ok()`](crate::Itertools::map_ok) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168098,"byte_end":168167,"line_start":67,"line_end":67,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":467},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168322,"byte_end":168332,"line_start":72,"line_end":72,"column_start":10,"column_end":20},"name":"MapResults","qualname":"::adaptors::map::MapResults","value":"MapOk<I, F>","parent":null,"children":[],"decl_id":null,"docs":" See [`MapOk`].\n","sig":null,"attributes":[{"value":"/ See [`MapOk`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168234,"byte_end":168252,"line_start":70,"line_end":70,"column_start":1,"column_end":19}},{"value":"deprecated(note = \"Use MapOk instead\", since = \"0.10.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168253,"byte_end":168312,"line_start":71,"line_end":71,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2904},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168609,"byte_end":168627,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"MapSpecialCaseFnOk","qualname":"::adaptors::map::MapSpecialCaseFnOk","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":486},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169130,"byte_end":169137,"line_start":106,"line_end":106,"column_start":10,"column_end":17},"name":"MapInto","qualname":"::adaptors::map::MapInto","value":"MapSpecialCase<I, MapSpecialCaseFnInto<R>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to apply `Into` conversion to each element.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply `Into` conversion to each element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168975,"byte_end":169042,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169043,"byte_end":169046,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ See [`.map_into()`](crate::Itertools::map_into) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169047,"byte_end":169120,"line_start":105,"line_end":105,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2912},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169384,"byte_end":169404,"line_start":116,"line_end":116,"column_start":12,"column_end":32},"name":"MapSpecialCaseFnInto","qualname":"::adaptors::map::MapSpecialCaseFnInto","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2922},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":170068,"byte_end":170080,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"MultiProduct","qualname":"::adaptors::multi_product::MultiProduct","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n multiple iterators of type `I`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169721,"byte_end":169788,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ multiple iterators of type `I`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169789,"byte_end":169824,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169825,"byte_end":169828,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An iterator element type is `Vec<I>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169829,"byte_end":169870,"line_start":12,"line_end":12,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169871,"byte_end":169874,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.multi_cartesian_product()`](crate::Itertools::multi_cartesian_product)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169875,"byte_end":169956,"line_start":14,"line_end":14,"column_start":1,"column_end":82}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169957,"byte_end":169982,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":169983,"byte_end":170056,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2948},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130580,"byte_end":130590,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"Interleave","qualname":"::adaptors::Interleave","value":"Interleave {  }","parent":null,"children":[{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2953}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from two iterators until both\n run out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from two iterators until both","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130263,"byte_end":130341,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ run out.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130342,"byte_end":130354,"line_start":23,"line_end":23,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130355,"byte_end":130358,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130359,"byte_end":130388,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130389,"byte_end":130392,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave()`](crate::Itertools::interleave) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130393,"byte_end":130470,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130495,"byte_end":130568,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":577},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130793,"byte_end":130803,"line_start":39,"line_end":39,"column_start":8,"column_end":18},"name":"interleave","qualname":"::adaptors::interleave","value":"pub fn interleave<I, J>(I, J)\n-> Interleave<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that interleaves elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that interleaves elements in `i` and `j`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130650,"byte_end":130714,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130715,"byte_end":130718,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of `[Itertools::interleave]`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":130719,"byte_end":130785,"line_start":38,"line_end":38,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2962},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":132169,"byte_end":132187,"line_start":90,"line_end":90,"column_start":12,"column_end":30},"name":"InterleaveShortest","qualname":"::adaptors::InterleaveShortest","value":"InterleaveShortest {  }","parent":null,"children":[{"krate":0,"index":2965},{"krate":0,"index":2966},{"krate":0,"index":2967}],"decl_id":null,"docs":" An iterator adaptor that alternates elements from the two iterators until\n one of them runs out.","sig":null,"attributes":[{"value":"/ An iterator adaptor that alternates elements from the two iterators until","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131818,"byte_end":131895,"line_start":81,"line_end":81,"column_start":1,"column_end":78}},{"value":"/ one of them runs out.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131896,"byte_end":131921,"line_start":82,"line_end":82,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131922,"byte_end":131925,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131926,"byte_end":131955,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131956,"byte_end":131959,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ See [`.interleave_shortest()`](crate::Itertools::interleave_shortest)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131960,"byte_end":132033,"line_start":86,"line_end":86,"column_start":1,"column_end":74}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":132034,"byte_end":132059,"line_start":87,"line_end":87,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":132084,"byte_end":132157,"line_start":89,"line_end":89,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2976},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134459,"byte_end":134466,"line_start":173,"line_end":173,"column_start":12,"column_end":19},"name":"PutBack","qualname":"::adaptors::PutBack","value":"PutBack {  }","parent":null,"children":[{"krate":0,"index":2978},{"krate":0,"index":2979}],"decl_id":null,"docs":" An iterator adaptor that allows putting back a single\n item to the front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting back a single","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134307,"byte_end":134364,"line_start":169,"line_end":169,"column_start":1,"column_end":58}},{"value":"/ item to the front of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134365,"byte_end":134403,"line_start":170,"line_end":170,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134404,"byte_end":134407,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134408,"byte_end":134447,"line_start":172,"line_end":172,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134603,"byte_end":134611,"line_start":181,"line_end":181,"column_start":8,"column_end":16},"name":"put_back","qualname":"::adaptors::put_back","value":"pub fn put_back<I>(I) -> PutBack<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back a single item\n","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back a single item","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134536,"byte_end":134595,"line_start":180,"line_end":180,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134860,"byte_end":134870,"line_start":194,"line_end":194,"column_start":12,"column_end":22},"name":"with_value","qualname":"<PutBack<I>>::with_value","value":"pub fn with_value(Self, I::Item) -> Self","parent":null,"children":[],"decl_id":null,"docs":" put back value `value` (builder method)\n","sig":null,"attributes":[{"value":"/ put back value `value` (builder method)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134805,"byte_end":134848,"line_start":193,"line_end":193,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135026,"byte_end":135036,"line_start":201,"line_end":201,"column_start":12,"column_end":22},"name":"into_parts","qualname":"<PutBack<I>>::into_parts","value":"pub fn into_parts(Self) -> (Option<I::Item>, I)","parent":null,"children":[],"decl_id":null,"docs":" Split the `PutBack` into its parts.\n","sig":null,"attributes":[{"value":"/ Split the `PutBack` into its parts.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134961,"byte_end":135000,"line_start":199,"line_end":199,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135005,"byte_end":135014,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135301,"byte_end":135309,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBack<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Put back a single value to the front of the iterator.","sig":null,"attributes":[{"value":"/ Put back a single value to the front of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135139,"byte_end":135196,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135201,"byte_end":135204,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If a value is already in the put back slot, it is overwritten.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135209,"byte_end":135275,"line_start":208,"line_end":208,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135280,"byte_end":135289,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2986},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137301,"byte_end":137308,"line_start":284,"line_end":284,"column_start":12,"column_end":19},"name":"Product","qualname":"::adaptors::Product","value":"Product {  }","parent":null,"children":[{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992}],"decl_id":null,"docs":" An iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `I` and `J`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":136946,"byte_end":137013,"line_start":277,"line_end":277,"column_start":1,"column_end":68}},{"value":"/ the element sets of two iterators `I` and `J`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137014,"byte_end":137064,"line_start":278,"line_end":278,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137065,"byte_end":137068,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(I::Item, J::Item)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137069,"byte_end":137119,"line_start":280,"line_end":280,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137120,"byte_end":137123,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ See [`.cartesian_product()`](crate::Itertools::cartesian_product) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137124,"byte_end":137215,"line_start":282,"line_end":282,"column_start":1,"column_end":92}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137216,"byte_end":137289,"line_start":283,"line_end":283,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3001},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140172,"byte_end":140180,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"Batching","qualname":"::adaptors::Batching","value":"Batching {  }","parent":null,"children":[{"krate":0,"index":3004},{"krate":0,"index":3005}],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the iterator\n and may pick off as many elements as it likes, to produce the next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139737,"byte_end":139820,"line_start":373,"line_end":373,"column_start":1,"column_end":80}},{"value":"/ and may pick off as many elements as it likes, to produce the next iterator element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139821,"byte_end":139909,"line_start":374,"line_end":374,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139910,"byte_end":139913,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is *X*, if the return type of `F` is *Option\\<X\\>*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139914,"byte_end":139991,"line_start":376,"line_end":376,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139992,"byte_end":139995,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ See [`.batching()`](crate::Itertools::batching) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139996,"byte_end":140069,"line_start":378,"line_end":378,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140087,"byte_end":140160,"line_start":380,"line_end":380,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3011},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":141154,"byte_end":141158,"line_start":417,"line_end":417,"column_start":12,"column_end":16},"name":"Step","qualname":"::adaptors::Step","value":"Step {  }","parent":null,"children":[{"krate":0,"index":3013},{"krate":0,"index":3014}],"decl_id":null,"docs":" An iterator adaptor that steps a number elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ An iterator adaptor that steps a number elements in the base iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140670,"byte_end":140743,"line_start":406,"line_end":406,"column_start":1,"column_end":74}},{"value":"/ for each iteration.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140744,"byte_end":140767,"line_start":407,"line_end":407,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140768,"byte_end":140771,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140772,"byte_end":140847,"line_start":409,"line_end":409,"column_start":1,"column_end":76}},{"value":"/ then skipping forward *n-1* elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140848,"byte_end":140889,"line_start":410,"line_end":410,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140890,"byte_end":140893,"line_start":411,"line_end":411,"column_start":1,"column_end":4}},{"value":"/ See [`.step()`](crate::Itertools::step) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140894,"byte_end":140959,"line_start":412,"line_end":412,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140960,"byte_end":141023,"line_start":413,"line_end":413,"column_start":1,"column_end":64}},{"value":"allow(deprecated)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":141024,"byte_end":141044,"line_start":414,"line_end":414,"column_start":1,"column_end":21}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":141069,"byte_end":141142,"line_start":416,"line_end":416,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":662},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142179,"byte_end":142193,"line_start":469,"line_end":469,"column_start":11,"column_end":25},"name":"MergePredicate","qualname":"::adaptors::MergePredicate","value":"MergePredicate<T>","parent":null,"children":[{"krate":0,"index":664}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142206,"byte_end":142216,"line_start":470,"line_end":470,"column_start":8,"column_end":18},"name":"merge_pred","qualname":"::adaptors::MergePredicate::merge_pred","value":"pub fn merge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":662},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3021},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142289,"byte_end":142297,"line_start":474,"line_end":474,"column_start":12,"column_end":20},"name":"MergeLte","qualname":"::adaptors::MergeLte","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":668},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142710,"byte_end":142715,"line_start":488,"line_end":488,"column_start":10,"column_end":15},"name":"Merge","qualname":"::adaptors::Merge","value":"MergeBy<I, J, MergeLte>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142430,"byte_end":142508,"line_start":482,"line_end":482,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142509,"byte_end":142581,"line_start":483,"line_end":483,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142582,"byte_end":142585,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142586,"byte_end":142625,"line_start":485,"line_end":485,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142626,"byte_end":142629,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ See [`.merge()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142630,"byte_end":142700,"line_start":487,"line_end":487,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":671},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143035,"byte_end":143040,"line_start":501,"line_end":501,"column_start":8,"column_end":13},"name":"merge","qualname":"::adaptors::merge","value":"pub fn merge<I, J>(I, J)\n-> Merge<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter> where\nI: IntoIterator, J: IntoIterator<Item = I::Item>, I::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements in `i` and `j`.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements in `i` and `j`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142750,"byte_end":142809,"line_start":490,"line_end":490,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142810,"byte_end":142813,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::merge`](crate::Itertools::merge).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142814,"byte_end":142900,"line_start":492,"line_end":492,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142901,"byte_end":142904,"line_start":493,"line_end":493,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142905,"byte_end":142912,"line_start":494,"line_end":494,"column_start":1,"column_end":8}},{"value":"/ use itertools::merge;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142913,"byte_end":142938,"line_start":495,"line_end":495,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142939,"byte_end":142942,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ for elt in merge(&[1, 2, 3], &[2, 3, 4]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142943,"byte_end":142989,"line_start":497,"line_end":497,"column_start":1,"column_end":47}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142990,"byte_end":143013,"line_start":498,"line_end":498,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143014,"byte_end":143019,"line_start":499,"line_end":499,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143020,"byte_end":143027,"line_start":500,"line_end":500,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":674},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143627,"byte_end":143634,"line_start":516,"line_end":516,"column_start":12,"column_end":19},"name":"MergeBy","qualname":"::adaptors::MergeBy","value":"MergeBy {  }","parent":null,"children":[{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"decl_id":null,"docs":" An iterator adaptor that merges the two base iterators in ascending order.\n If both base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges the two base iterators in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143268,"byte_end":143346,"line_start":509,"line_end":509,"column_start":1,"column_end":79}},{"value":"/ If both base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143347,"byte_end":143419,"line_start":510,"line_end":510,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143420,"byte_end":143423,"line_start":511,"line_end":511,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143424,"byte_end":143463,"line_start":512,"line_end":512,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143464,"byte_end":143467,"line_start":513,"line_end":513,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_by()`](crate::Itertools::merge_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143468,"byte_end":143541,"line_start":514,"line_end":514,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143542,"byte_end":143615,"line_start":515,"line_end":515,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":709},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146219,"byte_end":146231,"line_start":610,"line_end":610,"column_start":12,"column_end":24},"name":"TakeWhileRef","qualname":"::adaptors::TakeWhileRef","value":"TakeWhileRef {  }","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714}],"decl_id":null,"docs":" An iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":145912,"byte_end":145977,"line_start":605,"line_end":605,"column_start":1,"column_end":66}},{"value":"/ to only pick off elements while the predicate returns `true`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":145978,"byte_end":146043,"line_start":606,"line_end":606,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146044,"byte_end":146047,"line_start":607,"line_end":607,"column_start":1,"column_end":4}},{"value":"/ See [`.take_while_ref()`](crate::Itertools::take_while_ref) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146048,"byte_end":146133,"line_start":608,"line_end":608,"column_start":1,"column_end":86}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146134,"byte_end":146207,"line_start":609,"line_end":609,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3030},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147561,"byte_end":147570,"line_start":660,"line_end":660,"column_start":12,"column_end":21},"name":"WhileSome","qualname":"::adaptors::WhileSome","value":"WhileSome {  }","parent":null,"children":[{"krate":0,"index":3032}],"decl_id":null,"docs":" An iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ An iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147242,"byte_end":147308,"line_start":654,"line_end":654,"column_start":1,"column_end":67}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147309,"byte_end":147369,"line_start":655,"line_end":655,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147370,"byte_end":147373,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ See [`.while_some()`](crate::Itertools::while_some) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147374,"byte_end":147451,"line_start":657,"line_end":657,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147476,"byte_end":147549,"line_start":659,"line_end":659,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3039},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148397,"byte_end":148414,"line_start":693,"line_end":693,"column_start":12,"column_end":29},"name":"TupleCombinations","qualname":"::adaptors::TupleCombinations","value":"TupleCombinations {  }","parent":null,"children":[{"krate":0,"index":3042},{"krate":0,"index":3043}],"decl_id":null,"docs":" An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all combinations in a `Clone`-able iterator that produces tuples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148062,"byte_end":148161,"line_start":686,"line_end":686,"column_start":1,"column_end":100}},{"value":"/ of a specific size.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148162,"byte_end":148185,"line_start":687,"line_end":687,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148186,"byte_end":148189,"line_start":688,"line_end":688,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_combinations()`](crate::Itertools::tuple_combinations) for more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148190,"byte_end":148270,"line_start":689,"line_end":689,"column_start":1,"column_end":81}},{"value":"/ information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148271,"byte_end":148287,"line_start":690,"line_end":690,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148312,"byte_end":148385,"line_start":692,"line_end":692,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":737},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148541,"byte_end":148555,"line_start":701,"line_end":701,"column_start":11,"column_end":25},"name":"HasCombination","qualname":"::adaptors::HasCombination","value":"HasCombination<I>: Sized","parent":null,"children":[{"krate":0,"index":739}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":739},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148577,"byte_end":148588,"line_start":702,"line_end":702,"column_start":10,"column_end":21},"name":"Combination","qualname":"::adaptors::HasCombination::Combination","value":"type Combination: From<I> + Iterator<Item = Self>;","parent":{"krate":0,"index":737},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3052},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149307,"byte_end":149324,"line_start":734,"line_end":734,"column_start":12,"column_end":29},"name":"Tuple1Combination","qualname":"::adaptors::Tuple1Combination","value":"Tuple1Combination {  }","parent":null,"children":[{"krate":0,"index":3054}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3078},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":151851,"byte_end":151868,"line_start":822,"line_end":822,"column_start":25,"column_end":42},"name":"Tuple2Combination","qualname":"::adaptors::Tuple2Combination","value":"Tuple2Combination {  }","parent":null,"children":[{"krate":0,"index":3080},{"krate":0,"index":3081},{"krate":0,"index":3082}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3106},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":151916,"byte_end":151933,"line_start":823,"line_end":823,"column_start":25,"column_end":42},"name":"Tuple3Combination","qualname":"::adaptors::Tuple3Combination","value":"Tuple3Combination {  }","parent":null,"children":[{"krate":0,"index":3108},{"krate":0,"index":3109},{"krate":0,"index":3110}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3134},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":151983,"byte_end":152000,"line_start":824,"line_end":824,"column_start":25,"column_end":42},"name":"Tuple4Combination","qualname":"::adaptors::Tuple4Combination","value":"Tuple4Combination {  }","parent":null,"children":[{"krate":0,"index":3136},{"krate":0,"index":3137},{"krate":0,"index":3138}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3162},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152052,"byte_end":152069,"line_start":825,"line_end":825,"column_start":25,"column_end":42},"name":"Tuple5Combination","qualname":"::adaptors::Tuple5Combination","value":"Tuple5Combination {  }","parent":null,"children":[{"krate":0,"index":3164},{"krate":0,"index":3165},{"krate":0,"index":3166}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3190},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152123,"byte_end":152140,"line_start":826,"line_end":826,"column_start":25,"column_end":42},"name":"Tuple6Combination","qualname":"::adaptors::Tuple6Combination","value":"Tuple6Combination {  }","parent":null,"children":[{"krate":0,"index":3192},{"krate":0,"index":3193},{"krate":0,"index":3194}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3218},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152196,"byte_end":152213,"line_start":827,"line_end":827,"column_start":25,"column_end":42},"name":"Tuple7Combination","qualname":"::adaptors::Tuple7Combination","value":"Tuple7Combination {  }","parent":null,"children":[{"krate":0,"index":3220},{"krate":0,"index":3221},{"krate":0,"index":3222}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3246},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152271,"byte_end":152288,"line_start":828,"line_end":828,"column_start":25,"column_end":42},"name":"Tuple8Combination","qualname":"::adaptors::Tuple8Combination","value":"Tuple8Combination {  }","parent":null,"children":[{"krate":0,"index":3248},{"krate":0,"index":3249},{"krate":0,"index":3250}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3274},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152348,"byte_end":152365,"line_start":829,"line_end":829,"column_start":25,"column_end":42},"name":"Tuple9Combination","qualname":"::adaptors::Tuple9Combination","value":"Tuple9Combination {  }","parent":null,"children":[{"krate":0,"index":3276},{"krate":0,"index":3277},{"krate":0,"index":3278}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152427,"byte_end":152445,"line_start":830,"line_end":830,"column_start":25,"column_end":43},"name":"Tuple10Combination","qualname":"::adaptors::Tuple10Combination","value":"Tuple10Combination {  }","parent":null,"children":[{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3330},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152509,"byte_end":152527,"line_start":831,"line_end":831,"column_start":25,"column_end":43},"name":"Tuple11Combination","qualname":"::adaptors::Tuple11Combination","value":"Tuple11Combination {  }","parent":null,"children":[{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3358},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152594,"byte_end":152612,"line_start":832,"line_end":832,"column_start":25,"column_end":43},"name":"Tuple12Combination","qualname":"::adaptors::Tuple12Combination","value":"Tuple12Combination {  }","parent":null,"children":[{"krate":0,"index":3360},{"krate":0,"index":3361},{"krate":0,"index":3362}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3369},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152911,"byte_end":152919,"line_start":839,"line_end":839,"column_start":12,"column_end":20},"name":"FilterOk","qualname":"::adaptors::FilterOk","value":"FilterOk {  }","parent":null,"children":[{"krate":0,"index":3372},{"krate":0,"index":3373}],"decl_id":null,"docs":" An iterator adapter to filter values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter values within a nested `Result::Ok`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152658,"byte_end":152728,"line_start":834,"line_end":834,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152729,"byte_end":152732,"line_start":835,"line_end":835,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_ok()`](crate::Itertools::filter_ok) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152733,"byte_end":152808,"line_start":836,"line_end":836,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152826,"byte_end":152899,"line_start":838,"line_end":838,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154807,"byte_end":154818,"line_start":914,"line_end":914,"column_start":12,"column_end":23},"name":"FilterMapOk","qualname":"::adaptors::FilterMapOk","value":"FilterMapOk {  }","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795}],"decl_id":null,"docs":" An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter and apply a transformation on values within a nested `Result::Ok`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154533,"byte_end":154633,"line_start":910,"line_end":910,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154634,"byte_end":154637,"line_start":911,"line_end":911,"column_start":1,"column_end":4}},{"value":"/ See [`.filter_map_ok()`](crate::Itertools::filter_map_ok) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154638,"byte_end":154721,"line_start":912,"line_end":912,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154722,"byte_end":154795,"line_start":913,"line_end":913,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3380},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156955,"byte_end":156964,"line_start":998,"line_end":998,"column_start":12,"column_end":21},"name":"Positions","qualname":"::adaptors::Positions","value":"Positions {  }","parent":null,"children":[{"krate":0,"index":3383},{"krate":0,"index":3384},{"krate":0,"index":3385}],"decl_id":null,"docs":" An iterator adapter to get the positions of each element that matches a predicate.","sig":null,"attributes":[{"value":"/ An iterator adapter to get the positions of each element that matches a predicate.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156686,"byte_end":156772,"line_start":993,"line_end":993,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156773,"byte_end":156776,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ See [`.positions()`](crate::Itertools::positions) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156777,"byte_end":156852,"line_start":995,"line_end":995,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156870,"byte_end":156943,"line_start":997,"line_end":997,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3391},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158608,"byte_end":158614,"line_start":1069,"line_end":1069,"column_start":12,"column_end":18},"name":"Update","qualname":"::adaptors::Update","value":"Update {  }","parent":null,"children":[{"krate":0,"index":3394},{"krate":0,"index":3395}],"decl_id":null,"docs":" An iterator adapter to apply a mutating function to each element before yielding it.","sig":null,"attributes":[{"value":"/ An iterator adapter to apply a mutating function to each element before yielding it.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158343,"byte_end":158431,"line_start":1064,"line_end":1064,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158432,"byte_end":158435,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ See [`.update()`](crate::Itertools::update) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158436,"byte_end":158505,"line_start":1066,"line_end":1066,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158523,"byte_end":158596,"line_start":1068,"line_end":1068,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3404},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176252,"byte_end":176256,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Both","qualname":"::either_or_both::EitherOrBoth::Both","value":"EitherOrBoth::Both(A, B)","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Both values are present.\n","sig":null,"attributes":[{"value":"/ Both values are present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176219,"byte_end":176247,"line_start":8,"line_end":8,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3408},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176320,"byte_end":176324,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Left","qualname":"::either_or_both::EitherOrBoth::Left","value":"EitherOrBoth::Left(A)","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Only the left value of type `A` is present.\n","sig":null,"attributes":[{"value":"/ Only the left value of type `A` is present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176268,"byte_end":176315,"line_start":10,"line_end":10,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3411},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176386,"byte_end":176391,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Right","qualname":"::either_or_both::EitherOrBoth::Right","value":"EitherOrBoth::Right(B)","parent":{"krate":0,"index":3401},"children":[],"decl_id":null,"docs":" Only the right value of type `B` is present.\n","sig":null,"attributes":[{"value":"/ Only the right value of type `B` is present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176333,"byte_end":176381,"line_start":12,"line_end":12,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":3401},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176194,"byte_end":176206,"line_start":7,"line_end":7,"column_start":10,"column_end":22},"name":"EitherOrBoth","qualname":"::either_or_both::EitherOrBoth","value":"pub enum EitherOrBoth<A, B> { Both(A, B), Left(A), Right(B), }","parent":null,"children":[{"krate":0,"index":3404},{"krate":0,"index":3408},{"krate":0,"index":3411}],"decl_id":null,"docs":" Value that either holds a single A or B, or both.\n","sig":null,"attributes":[{"value":"/ Value that either holds a single A or B, or both.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176086,"byte_end":176139,"line_start":5,"line_end":5,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176510,"byte_end":176518,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"has_left","qualname":"<EitherOrBoth<A, B>>::has_left","value":"pub fn has_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176435,"byte_end":176498,"line_start":17,"line_end":17,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176662,"byte_end":176671,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"has_right","qualname":"<EitherOrBoth<A, B>>::has_right","value":"pub fn has_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return true, otherwise, return false.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return true, otherwise, return false.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176586,"byte_end":176650,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176868,"byte_end":176875,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"is_left","qualname":"<EitherOrBoth<A, B>>::is_left","value":"pub fn is_left(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Left, return true otherwise, return false.\n Exclusive version of [`has_left`](EitherOrBoth::has_left).\n","sig":null,"attributes":[{"value":"/ If Left, return true otherwise, return false.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176740,"byte_end":176789,"line_start":27,"line_end":27,"column_start":5,"column_end":54}},{"value":"/ Exclusive version of [`has_left`](EitherOrBoth::has_left).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176794,"byte_end":176856,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177120,"byte_end":177128,"line_start":38,"line_end":38,"column_start":12,"column_end":20},"name":"is_right","qualname":"<EitherOrBoth<A, B>>::is_right","value":"pub fn is_right(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Exclusive version of [`has_right`](EitherOrBoth::has_right).\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176989,"byte_end":177039,"line_start":36,"line_end":36,"column_start":5,"column_end":55}},{"value":"/ Exclusive version of [`has_right`](EitherOrBoth::has_right).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177044,"byte_end":177108,"line_start":37,"line_end":37,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177361,"byte_end":177368,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"is_both","qualname":"<EitherOrBoth<A, B>>::is_both","value":"pub fn is_both(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If Right, return true otherwise, return false.\n Equivalent to `self.as_ref().both().is_some()`.\n","sig":null,"attributes":[{"value":"/ If Right, return true otherwise, return false.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177243,"byte_end":177293,"line_start":45,"line_end":45,"column_start":5,"column_end":55}},{"value":"/ Equivalent to `self.as_ref().both().is_some()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177298,"byte_end":177349,"line_start":46,"line_end":46,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177534,"byte_end":177538,"line_start":52,"line_end":52,"column_start":12,"column_end":16},"name":"left","qualname":"<EitherOrBoth<A, B>>::left","value":"pub fn left(Self) -> Option<A>","parent":null,"children":[],"decl_id":null,"docs":" If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Left`, or `Both`, return `Some` with the left value, otherwise, return `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177436,"byte_end":177522,"line_start":51,"line_end":51,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177779,"byte_end":177784,"line_start":60,"line_end":60,"column_start":12,"column_end":17},"name":"right","qualname":"<EitherOrBoth<A, B>>::right","value":"pub fn right(Self) -> Option<B>","parent":null,"children":[],"decl_id":null,"docs":" If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `Right`, or `Both`, return `Some` with the right value, otherwise, return `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177679,"byte_end":177767,"line_start":59,"line_end":59,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178000,"byte_end":178004,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"both","qualname":"<EitherOrBoth<A, B>>::both","value":"pub fn both(Self) -> Option<(A, B)>","parent":null,"children":[],"decl_id":null,"docs":" If Both, return `Some` tuple containing left and right.\n","sig":null,"attributes":[{"value":"/ If Both, return `Some` tuple containing left and right.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":177929,"byte_end":177988,"line_start":67,"line_end":67,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178214,"byte_end":178220,"line_start":76,"line_end":76,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<EitherOrBoth<A, B>>::as_ref","value":"pub fn as_ref(&Self) -> EitherOrBoth<&A, &B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&EitherOrBoth<A, B>` to `EitherOrBoth<&A, &B>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178136,"byte_end":178202,"line_start":75,"line_end":75,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178535,"byte_end":178541,"line_start":85,"line_end":85,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<EitherOrBoth<A, B>>::as_mut","value":"pub fn as_mut(&mut Self) -> EitherOrBoth<&mut A, &mut B>","parent":null,"children":[],"decl_id":null,"docs":" Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.\n","sig":null,"attributes":[{"value":"/ Converts from `&mut EitherOrBoth<A, B>` to `EitherOrBoth<&mut A, &mut B>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178445,"byte_end":178523,"line_start":84,"line_end":84,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178863,"byte_end":178867,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"flip","qualname":"<EitherOrBoth<A, B>>::flip","value":"pub fn flip(Self) -> EitherOrBoth<B, A>","parent":null,"children":[],"decl_id":null,"docs":" Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.\n","sig":null,"attributes":[{"value":"/ Convert `EitherOrBoth<A, B>` to `EitherOrBoth<B, A>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":178794,"byte_end":178851,"line_start":93,"line_end":93,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179215,"byte_end":179223,"line_start":104,"line_end":104,"column_start":12,"column_end":20},"name":"map_left","qualname":"<EitherOrBoth<A, B>>::map_left","value":"pub fn map_left<F, M>(Self, F) -> EitherOrBoth<M, B> where F: FnOnce(A) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is\n present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, b)` variants. If it is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179044,"byte_end":179135,"line_start":102,"line_end":102,"column_start":5,"column_end":96}},{"value":"/ present rewrapping the result in `self`'s original variant.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179140,"byte_end":179203,"line_start":103,"line_end":103,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179631,"byte_end":179640,"line_start":117,"line_end":117,"column_start":12,"column_end":21},"name":"map_right","qualname":"<EitherOrBoth<A, B>>::map_right","value":"pub fn map_right<F, M>(Self, F) -> EitherOrBoth<A, M> where F: FnOnce(B) -> M","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.\n If it is present rewrapping the result in `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b` in `Right(b)` or `Both(a, b)` variants.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179459,"byte_end":179542,"line_start":115,"line_end":115,"column_start":5,"column_end":88}},{"value":"/ If it is present rewrapping the result in `self`'s original variant.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179547,"byte_end":179619,"line_start":116,"line_end":116,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180087,"byte_end":180094,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"map_any","qualname":"<EitherOrBoth<A, B>>::map_any","value":"pub fn map_any<F, L, G, R>(Self, F, G) -> EitherOrBoth<L, R> where\nF: FnOnce(A) -> L, G: FnOnce(B) -> R","parent":null,"children":[],"decl_id":null,"docs":" Apply the functions `f` and `g` on the value `a` and `b` respectively;\n found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.\n The Result is rewrapped `self`'s original variant.\n","sig":null,"attributes":[{"value":"/ Apply the functions `f` and `g` on the value `a` and `b` respectively;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179876,"byte_end":179950,"line_start":128,"line_end":128,"column_start":5,"column_end":79}},{"value":"/ found in `Left(a)`, `Right(b)`, or `Both(a, b)` variants.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":179955,"byte_end":180016,"line_start":129,"line_end":129,"column_start":5,"column_end":66}},{"value":"/ The Result is rewrapped `self`'s original variant.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180021,"byte_end":180075,"line_start":130,"line_end":130,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180494,"byte_end":180507,"line_start":145,"line_end":145,"column_start":12,"column_end":25},"name":"left_and_then","qualname":"<EitherOrBoth<A, B>>::left_and_then","value":"pub fn left_and_then<F, L>(Self, F) -> EitherOrBoth<L, B> where F: FnOnce(A)\n-> EitherOrBoth<L, B>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is\n present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `a` in `Left(a)` or `Both(a, _)` variants if it is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180375,"byte_end":180465,"line_start":143,"line_end":143,"column_start":5,"column_end":95}},{"value":"/ present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180470,"byte_end":180482,"line_start":144,"line_end":144,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180846,"byte_end":180860,"line_start":157,"line_end":157,"column_start":12,"column_end":26},"name":"right_and_then","qualname":"<EitherOrBoth<A, B>>::right_and_then","value":"pub fn right_and_then<F, R>(Self, F) -> EitherOrBoth<A, R> where F: FnOnce(B)\n-> EitherOrBoth<A, R>","parent":null,"children":[],"decl_id":null,"docs":" Apply the function `f` on the value `b`\n in `Right(b)` or `Both(_, b)` variants if it is present.\n","sig":null,"attributes":[{"value":"/ Apply the function `f` on the value `b`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180726,"byte_end":180769,"line_start":155,"line_end":155,"column_start":5,"column_end":48}},{"value":"/ in `Right(b)` or `Both(_, b)` variants if it is present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":180774,"byte_end":180834,"line_start":156,"line_end":156,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181988,"byte_end":181990,"line_start":186,"line_end":186,"column_start":12,"column_end":14},"name":"or","qualname":"<EitherOrBoth<A, B>>::or","value":"pub fn or(Self, A, B) -> (A, B)","parent":null,"children":[],"decl_id":null,"docs":" Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.\n Otherwise, returns the wrapped value for the present element, and the supplied\n value for the other. The first (`l`) argument is used for a missing `Left`\n value. The second (`r`) argument is used for a missing `Right` value.","sig":null,"attributes":[{"value":"/ Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181078,"byte_end":181156,"line_start":167,"line_end":167,"column_start":5,"column_end":83}},{"value":"/ Otherwise, returns the wrapped value for the present element, and the supplied","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181161,"byte_end":181243,"line_start":168,"line_end":168,"column_start":5,"column_end":87}},{"value":"/ value for the other. The first (`l`) argument is used for a missing `Left`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181248,"byte_end":181326,"line_start":169,"line_end":169,"column_start":5,"column_end":83}},{"value":"/ value. The second (`r`) argument is used for a missing `Right` value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181331,"byte_end":181404,"line_start":170,"line_end":170,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181409,"byte_end":181412,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Arguments passed to `or` are eagerly evaluated; if you are passing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181417,"byte_end":181487,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/ the result of a function call, it is recommended to use [`or_else`],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181492,"byte_end":181564,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ which is lazily evaluated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181569,"byte_end":181599,"line_start":174,"line_end":174,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181604,"byte_end":181607,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`or_else`]: EitherOrBoth::or_else","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181612,"byte_end":181650,"line_start":176,"line_end":176,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181655,"byte_end":181658,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181663,"byte_end":181677,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181682,"byte_end":181685,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181690,"byte_end":181697,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ # use itertools::EitherOrBoth;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181702,"byte_end":181736,"line_start":181,"line_end":181,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(EitherOrBoth::Both(\"tree\", 1).or(\"stone\", 5), (\"tree\", 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181741,"byte_end":181815,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(EitherOrBoth::Left(\"tree\").or(\"stone\", 5), (\"tree\", 5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181820,"byte_end":181891,"line_start":183,"line_end":183,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(EitherOrBoth::Right(1).or(\"stone\", 5), (\"stone\", 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181896,"byte_end":181964,"line_start":184,"line_end":184,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":181969,"byte_end":181976,"line_start":185,"line_end":185,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182429,"byte_end":182439,"line_start":197,"line_end":197,"column_start":12,"column_end":22},"name":"or_default","qualname":"<EitherOrBoth<A, B>>::or_default","value":"pub fn or_default(Self) -> (A, B) where A: Default, B: Default","parent":null,"children":[],"decl_id":null,"docs":" Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.\n Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)\n for the other.\n","sig":null,"attributes":[{"value":"/ Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182208,"byte_end":182286,"line_start":194,"line_end":194,"column_start":5,"column_end":83}},{"value":"/ Otherwise, returns the wrapped value for the present element, and the [`default`](Default::default)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182291,"byte_end":182394,"line_start":195,"line_end":195,"column_start":5,"column_end":108}},{"value":"/ for the other.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182399,"byte_end":182417,"line_start":196,"line_end":196,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183465,"byte_end":183472,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"or_else","qualname":"<EitherOrBoth<A, B>>::or_else","value":"pub fn or_else<L: FnOnce() -> A, R: FnOnce() -> B>(Self, L, R) -> (A, B)","parent":null,"children":[],"decl_id":null,"docs":" Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.\n Otherwise, returns the wrapped value for the present element, and computes the\n missing value with the supplied closure. The first argument (`l`) is used for a\n missing `Left` value. The second argument (`r`) is used for a missing `Right` value.","sig":null,"attributes":[{"value":"/ Returns a tuple consisting of the `l` and `r` in `Both(l, r)`, if present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182715,"byte_end":182793,"line_start":209,"line_end":209,"column_start":5,"column_end":83}},{"value":"/ Otherwise, returns the wrapped value for the present element, and computes the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182798,"byte_end":182880,"line_start":210,"line_end":210,"column_start":5,"column_end":87}},{"value":"/ missing value with the supplied closure. The first argument (`l`) is used for a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182885,"byte_end":182968,"line_start":211,"line_end":211,"column_start":5,"column_end":88}},{"value":"/ missing `Left` value. The second argument (`r`) is used for a missing `Right` value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":182973,"byte_end":183061,"line_start":212,"line_end":212,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183066,"byte_end":183069,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183074,"byte_end":183088,"line_start":214,"line_end":214,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183093,"byte_end":183096,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183101,"byte_end":183108,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/ # use itertools::EitherOrBoth;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183113,"byte_end":183147,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ let k = 10;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183152,"byte_end":183167,"line_start":218,"line_end":218,"column_start":5,"column_end":20}},{"value":"/ assert_eq!(EitherOrBoth::Both(\"tree\", 1).or_else(|| \"stone\", || 2 * k), (\"tree\", 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183172,"byte_end":183261,"line_start":219,"line_end":219,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(EitherOrBoth::Left(\"tree\").or_else(|| \"stone\", || 2 * k), (\"tree\", 20));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183266,"byte_end":183353,"line_start":220,"line_end":220,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(EitherOrBoth::Right(1).or_else(|| \"stone\", || 2 * k), (\"stone\", 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183358,"byte_end":183441,"line_start":221,"line_end":221,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183446,"byte_end":183453,"line_start":222,"line_end":222,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183868,"byte_end":183874,"line_start":234,"line_end":234,"column_start":12,"column_end":18},"name":"reduce","qualname":"<EitherOrBoth<T, T>>::reduce","value":"pub fn reduce<F>(Self, F) -> T where F: FnOnce(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return either value of left, right, or the product of `f` applied where `Both` are present.\n","sig":null,"attributes":[{"value":"/ Return either value of left, right, or the product of `f` applied where `Both` are present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183761,"byte_end":183856,"line_start":233,"line_end":233,"column_start":5,"column_end":100}}]},{"kind":"Mod","id":{"krate":0,"index":930},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"free","qualname":"::free","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":985},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1007},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1019},{"krate":0,"index":1021},{"krate":0,"index":1023}],"decl_id":null,"docs":" Free functions that create iterator adaptors or call iterator methods.","sig":null,"attributes":[{"value":"/ Free functions that create iterator adaptors or call iterator methods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184361,"byte_end":184435,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184436,"byte_end":184439,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The benefit of free functions is that they accept any [`IntoIterator`] as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184440,"byte_end":184517,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ argument, so the resulting code may be easier to read.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":184518,"byte_end":184576,"line_start":4,"line_end":4,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":988},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185662,"byte_end":185673,"line_start":47,"line_end":47,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::free::intersperse","value":"pub fn intersperse<I>(I, I::Item) -> Intersperse<I::IntoIter> where\nI: IntoIterator, <I as IntoIterator>::Item: Clone","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a particular value inserted between each element.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a particular value inserted between each element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185376,"byte_end":185453,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185454,"byte_end":185457,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::intersperse`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185458,"byte_end":185524,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185525,"byte_end":185528,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185529,"byte_end":185536,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/ use itertools::intersperse;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185537,"byte_end":185568,"line_start":43,"line_end":43,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185569,"byte_end":185572,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(intersperse((0..3), 8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185573,"byte_end":185646,"line_start":45,"line_end":45,"column_start":1,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185647,"byte_end":185654,"line_start":46,"line_end":46,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":990},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186253,"byte_end":186269,"line_start":66,"line_end":66,"column_start":8,"column_end":24},"name":"intersperse_with","qualname":"::free::intersperse_with","value":"pub fn intersperse_with<I, F>(I, F) -> IntersperseWith<I::IntoIter, F> where\nI: IntoIterator, F: FnMut() -> I::Item","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a particular value created by a function inserted\n between each element.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a particular value created by a function inserted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185869,"byte_end":185946,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ between each element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185947,"byte_end":185972,"line_start":55,"line_end":55,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185973,"byte_end":185976,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::intersperse_with`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":185977,"byte_end":186048,"line_start":57,"line_end":57,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186049,"byte_end":186052,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186053,"byte_end":186060,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use itertools::intersperse_with;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186061,"byte_end":186097,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186098,"byte_end":186101,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ let mut i = 10;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186102,"byte_end":186121,"line_start":62,"line_end":62,"column_start":1,"column_end":20}},{"value":"/ itertools::assert_equal(intersperse_with((0..3), || { i -= 1; i }), vec![0, 9, 1, 8, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186122,"byte_end":186215,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(i, 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186216,"byte_end":186237,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186238,"byte_end":186245,"line_start":65,"line_end":65,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":993},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186712,"byte_end":186721,"line_start":84,"line_end":84,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::free::enumerate","value":"pub fn enumerate<I>(I) -> iter::Enumerate<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` with a running index.","sig":null,"attributes":[{"value":"/ Iterate `iterable` with a running index.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186463,"byte_end":186507,"line_start":73,"line_end":73,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186508,"byte_end":186511,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::enumerate`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186512,"byte_end":186576,"line_start":75,"line_end":75,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186577,"byte_end":186580,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186581,"byte_end":186588,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use itertools::enumerate;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186589,"byte_end":186618,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186619,"byte_end":186622,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ for (i, elt) in enumerate(&[1, 2, 3]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186623,"byte_end":186666,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186667,"byte_end":186690,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186691,"byte_end":186696,"line_start":82,"line_end":82,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186697,"byte_end":186704,"line_start":83,"line_end":83,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":995},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187054,"byte_end":187057,"line_start":101,"line_end":101,"column_start":8,"column_end":11},"name":"rev","qualname":"::free::rev","value":"pub fn rev<I>(I) -> iter::Rev<I::IntoIter> where I: IntoIterator,\nI::IntoIter: DoubleEndedIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `iterable` in reverse.","sig":null,"attributes":[{"value":"/ Iterate `iterable` in reverse.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186838,"byte_end":186872,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186873,"byte_end":186876,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::rev`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186877,"byte_end":186935,"line_start":92,"line_end":92,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186936,"byte_end":186939,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186940,"byte_end":186947,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/ use itertools::rev;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186948,"byte_end":186971,"line_start":95,"line_end":95,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186972,"byte_end":186975,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ for elt in rev(&[1, 2, 3]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":186976,"byte_end":187008,"line_start":97,"line_end":97,"column_start":1,"column_end":33}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187009,"byte_end":187032,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187033,"byte_end":187038,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187039,"byte_end":187046,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":997},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187724,"byte_end":187727,"line_start":125,"line_end":125,"column_start":8,"column_end":11},"name":"zip","qualname":"::free::zip","value":"pub fn zip<I, J>(I, J) -> Zip<I::IntoIter, J::IntoIter> where I: IntoIterator,\nJ: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Converts the arguments to iterators and zips them.","sig":null,"attributes":[{"value":"/ Converts the arguments to iterators and zips them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187206,"byte_end":187260,"line_start":108,"line_end":108,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187261,"byte_end":187264,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::zip`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187265,"byte_end":187323,"line_start":110,"line_end":110,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187324,"byte_end":187328,"line_start":111,"line_end":111,"column_start":1,"column_end":5}},{"value":"/ ## Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187329,"byte_end":187343,"line_start":112,"line_end":112,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187344,"byte_end":187347,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187348,"byte_end":187355,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187356,"byte_end":187379,"line_start":115,"line_end":115,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187380,"byte_end":187383,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ let mut result: Vec<(i32, char)> = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187384,"byte_end":187434,"line_start":117,"line_end":117,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187435,"byte_end":187438,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ for (a, b) in zip(&[1, 2, 3, 4, 5], &['a', 'b', 'c']) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187439,"byte_end":187498,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/     result.push((*a, *b));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187499,"byte_end":187529,"line_start":120,"line_end":120,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187530,"byte_end":187535,"line_start":121,"line_end":121,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(result, vec![(1, 'a'),(2, 'b'),(3, 'c')]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187536,"byte_end":187593,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187594,"byte_end":187601,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"deprecated(note =\n\"Use [std::iter::zip](https://doc.rust-lang.org/std/iter/fn.zip.html) instead\",\nsince = \"0.10.4\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187602,"byte_end":187716,"line_start":124,"line_end":124,"column_start":1,"column_end":115}}]},{"kind":"Function","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188246,"byte_end":188251,"line_start":148,"line_end":148,"column_start":8,"column_end":13},"name":"chain","qualname":"::free::chain","value":"pub fn chain<I, J>(I, J)\n-> iter::Chain<<I as IntoIterator>::IntoIter, <J as IntoIterator>::IntoIter>\nwhere I: IntoIterator, J: IntoIterator<Item = I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Takes two iterables and creates a new iterator over both in sequence. ","sig":null,"attributes":[{"value":"/ Takes two iterables and creates a new iterator over both in sequence. ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187863,"byte_end":187937,"line_start":133,"line_end":133,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187938,"byte_end":187941,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::chain`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":187942,"byte_end":188002,"line_start":135,"line_end":135,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188003,"byte_end":188006,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188007,"byte_end":188021,"line_start":137,"line_end":137,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188022,"byte_end":188029,"line_start":138,"line_end":138,"column_start":1,"column_end":8}},{"value":"/ use itertools::chain;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188030,"byte_end":188055,"line_start":139,"line_end":139,"column_start":1,"column_end":26}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188056,"byte_end":188060,"line_start":140,"line_end":140,"column_start":1,"column_end":5}},{"value":"/ let mut result:Vec<i32> = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188061,"byte_end":188102,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188103,"byte_end":188106,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ for element in chain(&[1, 2, 3], &[4]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188107,"byte_end":188151,"line_start":143,"line_end":143,"column_start":1,"column_end":45}},{"value":"/     result.push(*element);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188152,"byte_end":188182,"line_start":144,"line_end":144,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188183,"byte_end":188188,"line_start":145,"line_end":145,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(result, vec![1, 2, 3, 4]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188189,"byte_end":188230,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188231,"byte_end":188238,"line_start":147,"line_end":147,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188684,"byte_end":188690,"line_start":164,"line_end":164,"column_start":8,"column_end":14},"name":"cloned","qualname":"::free::cloned","value":"pub fn cloned<'a, I, T: 'a>(I) -> iter::Cloned<I::IntoIter> where\nI: IntoIterator<Item = &'a T>, T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that clones each element from &T to T","sig":null,"attributes":[{"value":"/ Create an iterator that clones each element from &T to T","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188448,"byte_end":188508,"line_start":155,"line_end":155,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188509,"byte_end":188512,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::cloned`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188513,"byte_end":188574,"line_start":157,"line_end":157,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188575,"byte_end":188578,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188579,"byte_end":188586,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/ use itertools::cloned;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188587,"byte_end":188613,"line_start":160,"line_end":160,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188614,"byte_end":188617,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cloned(b\"abc\").next(), Some(b'a'));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188618,"byte_end":188668,"line_start":162,"line_end":162,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188669,"byte_end":188676,"line_start":163,"line_end":163,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189082,"byte_end":189086,"line_start":180,"line_end":180,"column_start":8,"column_end":12},"name":"fold","qualname":"::free::fold","value":"pub fn fold<I, B, F>(I, B, F) -> B where I: IntoIterator, F: FnMut(B, I::Item)\n-> B","parent":null,"children":[],"decl_id":null,"docs":" Perform a fold operation over the iterable.","sig":null,"attributes":[{"value":"/ Perform a fold operation over the iterable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188845,"byte_end":188892,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188893,"byte_end":188896,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::fold`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188897,"byte_end":188956,"line_start":173,"line_end":173,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188957,"byte_end":188960,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188961,"byte_end":188968,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/ use itertools::fold;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188969,"byte_end":188993,"line_start":176,"line_end":176,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188994,"byte_end":188997,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(fold(&[1., 2., 3.], 0., |a, &b| f32::max(a, b)), 3.);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":188998,"byte_end":189066,"line_start":178,"line_end":178,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189067,"byte_end":189074,"line_start":179,"line_end":179,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1011},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189471,"byte_end":189474,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"all","qualname":"::free::all","value":"pub fn all<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for all elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for all elements in the iterable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189236,"byte_end":189306,"line_start":187,"line_end":187,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189307,"byte_end":189310,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::all`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189311,"byte_end":189369,"line_start":189,"line_end":189,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189370,"byte_end":189373,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189374,"byte_end":189381,"line_start":191,"line_end":191,"column_start":1,"column_end":8}},{"value":"/ use itertools::all;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189382,"byte_end":189405,"line_start":192,"line_end":192,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189406,"byte_end":189409,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ assert!(all(&[1, 2, 3], |elt| *elt > 0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189410,"byte_end":189455,"line_start":194,"line_end":194,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189456,"byte_end":189463,"line_start":195,"line_end":195,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1014},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189844,"byte_end":189847,"line_start":212,"line_end":212,"column_start":8,"column_end":11},"name":"any","qualname":"::free::any","value":"pub fn any<I, F>(I, F) -> bool where I: IntoIterator, F: FnMut(I::Item) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the predicate holds for any elements in the iterable.","sig":null,"attributes":[{"value":"/ Test whether the predicate holds for any elements in the iterable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189608,"byte_end":189678,"line_start":203,"line_end":203,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189679,"byte_end":189682,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::any`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189683,"byte_end":189741,"line_start":205,"line_end":205,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189742,"byte_end":189745,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189746,"byte_end":189753,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"/ use itertools::any;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189754,"byte_end":189777,"line_start":208,"line_end":208,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189778,"byte_end":189781,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ assert!(any(&[0, -1, 2], |elt| *elt > 0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189782,"byte_end":189828,"line_start":210,"line_end":210,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189829,"byte_end":189836,"line_start":211,"line_end":211,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190182,"byte_end":190185,"line_start":228,"line_end":228,"column_start":8,"column_end":11},"name":"max","qualname":"::free::max","value":"pub fn max<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the maximum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the maximum value of the iterable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":189981,"byte_end":190026,"line_start":219,"line_end":219,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190027,"byte_end":190030,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::max`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190031,"byte_end":190089,"line_start":221,"line_end":221,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190090,"byte_end":190093,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190094,"byte_end":190101,"line_start":223,"line_end":223,"column_start":1,"column_end":8}},{"value":"/ use itertools::max;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190102,"byte_end":190125,"line_start":224,"line_end":224,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190126,"byte_end":190129,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(max(0..10), Some(9));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190130,"byte_end":190166,"line_start":226,"line_end":226,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190167,"byte_end":190174,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190508,"byte_end":190511,"line_start":244,"line_end":244,"column_start":8,"column_end":11},"name":"min","qualname":"::free::min","value":"pub fn min<I>(I) -> Option<I::Item> where I: IntoIterator, I::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Return the minimum value of the iterable.","sig":null,"attributes":[{"value":"/ Return the minimum value of the iterable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190307,"byte_end":190352,"line_start":235,"line_end":235,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190353,"byte_end":190356,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::min`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190357,"byte_end":190415,"line_start":237,"line_end":237,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190416,"byte_end":190419,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190420,"byte_end":190427,"line_start":239,"line_end":239,"column_start":1,"column_end":8}},{"value":"/ use itertools::min;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190428,"byte_end":190451,"line_start":240,"line_end":240,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190452,"byte_end":190455,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(min(0..10), Some(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190456,"byte_end":190492,"line_start":242,"line_end":242,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190493,"byte_end":190500,"line_start":243,"line_end":243,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":1021},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190907,"byte_end":190911,"line_start":262,"line_end":262,"column_start":8,"column_end":12},"name":"join","qualname":"::free::join","value":"pub fn join<I>(I, &str) -> String where I: IntoIterator, I::Item: Display","parent":null,"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190634,"byte_end":190704,"line_start":252,"line_end":252,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190705,"byte_end":190708,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::join`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190709,"byte_end":190769,"line_start":254,"line_end":254,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190770,"byte_end":190773,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190774,"byte_end":190781,"line_start":256,"line_end":256,"column_start":1,"column_end":8}},{"value":"/ use itertools::join;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190782,"byte_end":190806,"line_start":257,"line_end":257,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190807,"byte_end":190810,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(join(&[1, 2, 3], \", \"), \"1, 2, 3\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190811,"byte_end":190861,"line_start":259,"line_end":259,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190862,"byte_end":190869,"line_start":260,"line_end":260,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":190870,"byte_end":190899,"line_start":261,"line_end":261,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191360,"byte_end":191366,"line_start":280,"line_end":280,"column_start":8,"column_end":14},"name":"sorted","qualname":"::free::sorted","value":"pub fn sorted<I>(I) -> VecIntoIter<I::Item> where I: IntoIterator,\nI::Item: Ord","parent":null,"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191043,"byte_end":191113,"line_start":269,"line_end":269,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191114,"byte_end":191117,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::sorted`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191118,"byte_end":191180,"line_start":271,"line_end":271,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191181,"byte_end":191184,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191185,"byte_end":191192,"line_start":273,"line_end":273,"column_start":1,"column_end":8}},{"value":"/ use itertools::sorted;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191193,"byte_end":191219,"line_start":274,"line_end":274,"column_start":1,"column_end":27}},{"value":"/ use itertools::assert_equal;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191220,"byte_end":191252,"line_start":275,"line_end":275,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191253,"byte_end":191256,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ assert_equal(sorted(\"rust\".chars()), \"rstu\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191257,"byte_end":191314,"line_start":277,"line_end":277,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191315,"byte_end":191322,"line_start":278,"line_end":278,"column_start":1,"column_end":8}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/free.rs","byte_start":191323,"byte_end":191352,"line_start":279,"line_end":279,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":192021,"byte_end":192027,"line_start":17,"line_end":17,"column_start":8,"column_end":14},"name":"concat","qualname":"::concat_impl::concat","value":"pub fn concat<I>(I) -> I::Item where I: IntoIterator,\nI::Item: Extend<<<I as IntoIterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":null,"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191520,"byte_end":191596,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191597,"byte_end":191600,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`]-enabled version of [`Itertools::concat`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191601,"byte_end":191663,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191664,"byte_end":191667,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191668,"byte_end":191743,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191744,"byte_end":191817,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191818,"byte_end":191844,"line_start":9,"line_end":9,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191845,"byte_end":191848,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191849,"byte_end":191860,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/ use itertools::concat;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191861,"byte_end":191887,"line_start":12,"line_end":12,"column_start":1,"column_end":27}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191888,"byte_end":191892,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191893,"byte_end":191950,"line_start":14,"line_end":14,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(concat(input), vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":191951,"byte_end":192005,"line_start":15,"line_end":15,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/concat_impl.rs","byte_start":192006,"byte_end":192013,"line_start":16,"line_end":16,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":3732},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193885,"byte_end":193895,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"ConsTuples","qualname":"::cons_tuples_impl::ConsTuples","value":"ConsTuples {  }","parent":null,"children":[{"krate":0,"index":3735}],"decl_id":null,"docs":" An iterator that maps an iterator of tuples like\n `((A, B), C)` to an iterator of `(A, B, C)`.","sig":null,"attributes":[{"value":"/ An iterator that maps an iterator of tuples like","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193640,"byte_end":193692,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ `((A, B), C)` to an iterator of `(A, B, C)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193693,"byte_end":193741,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193742,"byte_end":193745,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Used by the `iproduct!()` macro.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193746,"byte_end":193782,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193783,"byte_end":193856,"line_start":44,"line_end":44,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1038},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":194157,"byte_end":194168,"line_start":60,"line_end":60,"column_start":8,"column_end":19},"name":"cons_tuples","qualname":"::cons_tuples_impl::cons_tuples","value":"pub fn cons_tuples<I, J>(I) -> ConsTuples<I::IntoIter, J> where\nI: IntoIterator<Item = J>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that maps for example iterators of\n `((A, B), C)` to `(A, B, C)`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that maps for example iterators of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":194058,"byte_end":194115,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ `((A, B), C)` to `(A, B, C)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":194116,"byte_end":194149,"line_start":59,"line_end":59,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194660,"byte_end":194672,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"Combinations","qualname":"::combinations::Combinations","value":"Combinations {  }","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" An iterator to iterate through all the `k`-length combinations in an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `k`-length combinations in an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194406,"byte_end":194488,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194489,"byte_end":194492,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations()`](crate::Itertools::combinations) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194493,"byte_end":194574,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194575,"byte_end":194648,"line_start":10,"line_end":10,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195502,"byte_end":195503,"line_start":48,"line_end":48,"column_start":12,"column_end":13},"name":"k","qualname":"<Combinations<I>>::k","value":"pub fn k(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of a combination produced by this iterator.\n","sig":null,"attributes":[{"value":"/ Returns the length of a combination produced by this iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195410,"byte_end":195476,"line_start":46,"line_end":46,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195481,"byte_end":195490,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195747,"byte_end":195748,"line_start":53,"line_end":53,"column_start":12,"column_end":13},"name":"n","qualname":"<Combinations<I>>::n","value":"pub fn n(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the (current) length of the pool from which combination elements are\n selected. This value can change between invocations of [`next`](Combinations::next).\n","sig":null,"attributes":[{"value":"/ Returns the (current) length of the pool from which combination elements are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195548,"byte_end":195628,"line_start":50,"line_end":50,"column_start":5,"column_end":85}},{"value":"/ selected. This value can change between invocations of [`next`](Combinations::next).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195633,"byte_end":195721,"line_start":51,"line_end":51,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195726,"byte_end":195735,"line_start":52,"line_end":52,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":3743},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198435,"byte_end":198462,"line_start":12,"line_end":12,"column_start":12,"column_end":39},"name":"CombinationsWithReplacement","qualname":"::combinations_with_replacement::CombinationsWithReplacement","value":"CombinationsWithReplacement {  }","parent":null,"children":[{"krate":0,"index":3745},{"krate":0,"index":3746},{"krate":0,"index":3747}],"decl_id":null,"docs":" An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","sig":null,"attributes":[{"value":"/ An iterator to iterate through all the `n`-length combinations in an iterator, with replacement.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198182,"byte_end":198282,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198283,"byte_end":198286,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.combinations_with_replacement()`](crate::Itertools::combinations_with_replacement)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198287,"byte_end":198380,"line_start":9,"line_end":9,"column_start":1,"column_end":94}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198381,"byte_end":198406,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3752},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201836,"byte_end":201851,"line_start":20,"line_end":20,"column_start":12,"column_end":27},"name":"ExactlyOneError","qualname":"::exactly_one_err::ExactlyOneError","value":"ExactlyOneError {  }","parent":null,"children":[{"krate":0,"index":3754},{"krate":0,"index":3756}],"decl_id":null,"docs":" Iterator returned for the error case of `IterTools::exactly_one()`\n This iterator yields exactly the same elements as the input iterator.","sig":null,"attributes":[{"value":"/ Iterator returned for the error case of `IterTools::exactly_one()`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201370,"byte_end":201440,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ This iterator yields exactly the same elements as the input iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201441,"byte_end":201514,"line_start":12,"line_end":12,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201515,"byte_end":201518,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ During the execution of `exactly_one` the iterator must be mutated.  This wrapper","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201519,"byte_end":201604,"line_start":14,"line_end":14,"column_start":1,"column_end":86}},{"value":"/ effectively \"restores\" the state of the input iterator when it's handed back.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201605,"byte_end":201686,"line_start":15,"line_end":15,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201687,"byte_end":201690,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is very similar to `PutBackN` except this iterator only supports 0-2 elements and does not","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201691,"byte_end":201790,"line_start":17,"line_end":17,"column_start":1,"column_end":100}},{"value":"/ use a `Vec`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201791,"byte_end":201807,"line_start":18,"line_end":18,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205024,"byte_end":205037,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"FirstMismatch","qualname":"::diff::Diff::FirstMismatch","value":"Diff::FirstMismatch(usize, PutBack<I>, PutBack<J>)","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" The index of the first non-matching element along with both iterator's remaining elements\n starting with the first mis-match.\n","sig":null,"attributes":[{"value":"/ The index of the first non-matching element along with both iterator's remaining elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204883,"byte_end":204976,"line_start":19,"line_end":19,"column_start":5,"column_end":98}},{"value":"/ starting with the first mis-match.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204981,"byte_end":205019,"line_start":20,"line_end":20,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205170,"byte_end":205177,"line_start":23,"line_end":23,"column_start":5,"column_end":12},"name":"Shorter","qualname":"::diff::Diff::Shorter","value":"Diff::Shorter(usize, PutBack<I>)","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" The total number of elements that were in `J` along with the remaining elements of `I`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `J` along with the remaining elements of `I`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205074,"byte_end":205165,"line_start":22,"line_end":22,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205298,"byte_end":205304,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Longer","qualname":"::diff::Diff::Longer","value":"Diff::Longer(usize, PutBack<J>)","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" The total number of elements that were in `I` along with the remaining elements of `J`.\n","sig":null,"attributes":[{"value":"/ The total number of elements that were in `I` along with the remaining elements of `J`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205202,"byte_end":205293,"line_start":24,"line_end":24,"column_start":5,"column_end":96}}]},{"kind":"Enum","id":{"krate":0,"index":1158},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204821,"byte_end":204825,"line_start":15,"line_end":15,"column_start":10,"column_end":14},"name":"Diff","qualname":"::diff::Diff","value":"pub enum Diff<I, J> where I: Iterator, J: Iterator {\n    FirstMismatch(usize, PutBack<I>, PutBack<J>),\n    Shorter(usize, PutBack<I>),\n    Longer(usize, PutBack<J>),\n}","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1166},{"krate":0,"index":1170}],"decl_id":null,"docs":" A type returned by the [`diff_with`] function.","sig":null,"attributes":[{"value":"/ A type returned by the [`diff_with`] function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204644,"byte_end":204694,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204695,"byte_end":204698,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `Diff` represents the way in which the elements yielded by the iterator `I` differ to some","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204699,"byte_end":204793,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ iterator `J`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":204794,"byte_end":204811,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1174},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":206055,"byte_end":206064,"line_start":40,"line_end":40,"column_start":8,"column_end":17},"name":"diff_with","qualname":"::diff::diff_with","value":"pub fn diff_with<I, J, F>(I, J, F) -> Option<Diff<I::IntoIter, J::IntoIter>>\nwhere I: IntoIterator, J: IntoIterator, F: Fn(&I::Item, &J::Item) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compares every element yielded by both `i` and `j` with the given function in lock-step and\n returns a [`Diff`] which describes how `j` differs from `i`.","sig":null,"attributes":[{"value":"/ Compares every element yielded by both `i` and `j` with the given function in lock-step and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205328,"byte_end":205423,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ returns a [`Diff`] which describes how `j` differs from `i`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205424,"byte_end":205488,"line_start":29,"line_end":29,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205489,"byte_end":205492,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If the number of elements yielded by `j` is less than the number of elements yielded by `i`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205493,"byte_end":205589,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ the number of `j` elements yielded will be returned along with `i`'s remaining elements as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205590,"byte_end":205684,"line_start":32,"line_end":32,"column_start":1,"column_end":95}},{"value":"/ `Diff::Shorter`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205685,"byte_end":205705,"line_start":33,"line_end":33,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205706,"byte_end":205709,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the two elements of a step differ, the index of those elements along with the remaining","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205710,"byte_end":205804,"line_start":35,"line_end":35,"column_start":1,"column_end":95}},{"value":"/ elements of both `i` and `j` are returned as `Diff::FirstMismatch`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205805,"byte_end":205876,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205877,"byte_end":205880,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ If `i` becomes exhausted before `j` becomes exhausted, the number of elements in `i` along with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205881,"byte_end":205980,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ the remaining `j` elements will be returned as `Diff::Longer`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/diff.rs","byte_start":205981,"byte_end":206047,"line_start":39,"line_end":39,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1198},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207472,"byte_end":207481,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"FlattenOk","qualname":"::flatten_ok::FlattenOk","value":"FlattenOk {  }","parent":null,"children":[{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204}],"decl_id":null,"docs":" An iterator adaptor that flattens `Result::Ok` values and\n allows `Result::Err` values through unchanged.","sig":null,"attributes":[{"value":"/ An iterator adaptor that flattens `Result::Ok` values and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207192,"byte_end":207253,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/ allows `Result::Err` values through unchanged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207254,"byte_end":207304,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207305,"byte_end":207308,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.flatten_ok()`](crate::Itertools::flatten_ok) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207309,"byte_end":207386,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207387,"byte_end":207460,"line_start":23,"line_end":23,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3761},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213808,"byte_end":213818,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"FormatWith","qualname":"::format::FormatWith","value":"FormatWith {  }","parent":null,"children":[{"krate":0,"index":3765},{"krate":0,"index":3766}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213540,"byte_end":213600,"line_start":4,"line_end":4,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213601,"byte_end":213604,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213605,"byte_end":213680,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213681,"byte_end":213695,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213696,"byte_end":213699,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.format_with()`](crate::Itertools::format_with) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213700,"byte_end":213779,"line_start":9,"line_end":9,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3772},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214228,"byte_end":214234,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"Format","qualname":"::format::Format","value":"Format {  }","parent":null,"children":[{"krate":0,"index":3775},{"krate":0,"index":3776}],"decl_id":null,"docs":" Format all iterator elements lazily, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements lazily, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":213966,"byte_end":214026,"line_start":17,"line_end":17,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214027,"byte_end":214030,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The format value can only be formatted once, after that the iterator is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214031,"byte_end":214106,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ exhausted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214107,"byte_end":214121,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214122,"byte_end":214125,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`.format()`](crate::Itertools::format)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214126,"byte_end":214173,"line_start":22,"line_end":22,"column_start":1,"column_end":48}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214174,"byte_end":214199,"line_start":23,"line_end":23,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3817},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217116,"byte_end":217130,"line_start":12,"line_end":12,"column_start":12,"column_end":26},"name":"MapForGrouping","qualname":"::grouping_map::MapForGrouping","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)\n","sig":null,"attributes":[{"value":"/ A wrapper to allow for an easy [`into_grouping_map_by`](crate::Itertools::into_grouping_map_by)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":216981,"byte_end":217080,"line_start":10,"line_end":10,"column_start":1,"column_end":100}}]},{"kind":"Type","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217880,"byte_end":217893,"line_start":42,"line_end":42,"column_start":10,"column_end":23},"name":"GroupingMapBy","qualname":"::grouping_map::GroupingMapBy","value":"GroupingMap<MapForGrouping<I, F>>","parent":null,"children":[],"decl_id":null,"docs":" `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.\n \n See [`GroupingMap`] for more informations.\n","sig":null,"attributes":[{"value":"/ `GroupingMapBy` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217732,"byte_end":217818,"line_start":39,"line_end":39,"column_start":1,"column_end":87}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217819,"byte_end":217823,"line_start":40,"line_end":40,"column_start":1,"column_end":5}},{"value":"/ See [`GroupingMap`] for more informations.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217824,"byte_end":217870,"line_start":41,"line_end":41,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3831},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218302,"byte_end":218313,"line_start":51,"line_end":51,"column_start":12,"column_end":23},"name":"GroupingMap","qualname":"::grouping_map::GroupingMap","value":"GroupingMap {  }","parent":null,"children":[{"krate":0,"index":3833}],"decl_id":null,"docs":" `GroupingMap` is an intermediate struct for efficient group-and-fold operations.\n It groups elements by their key and at the same time fold each group\n using some aggregating operation.\n \n No method on this struct performs temporary allocations.\n","sig":null,"attributes":[{"value":"/ `GroupingMap` is an intermediate struct for efficient group-and-fold operations.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217938,"byte_end":218022,"line_start":44,"line_end":44,"column_start":1,"column_end":85}},{"value":"/ It groups elements by their key and at the same time fold each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218023,"byte_end":218095,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ using some aggregating operation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218096,"byte_end":218133,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218134,"byte_end":218138,"line_start":47,"line_end":47,"column_start":1,"column_end":5}},{"value":"/ No method on this struct performs temporary allocations.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218139,"byte_end":218199,"line_start":48,"line_end":48,"column_start":1,"column_end":61}},{"value":"must_use = \"GroupingMap is lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218224,"byte_end":218290,"line_start":50,"line_end":50,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220486,"byte_end":220495,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"aggregate","qualname":"<GroupingMap<I>>::aggregate","value":"pub fn aggregate<FO, R>(Self, FO) -> HashMap<K, R> where\nFO: FnMut(Option<R>, &K, V) -> Option<R>","parent":null,"children":[],"decl_id":null,"docs":" This is the generic way to perform any operation on a `GroupingMap`.\n It's suggested to use this method only to implement custom operations\n when the already provided ones are not enough.\n \n Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in an `HashMap`.","sig":null,"attributes":[{"value":"/ This is the generic way to perform any operation on a `GroupingMap`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218432,"byte_end":218504,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ It's suggested to use this method only to implement custom operations","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218509,"byte_end":218582,"line_start":60,"line_end":60,"column_start":5,"column_end":78}},{"value":"/ when the already provided ones are not enough.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218587,"byte_end":218637,"line_start":61,"line_end":61,"column_start":5,"column_end":55}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218642,"byte_end":218646,"line_start":62,"line_end":62,"column_start":5,"column_end":9}},{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218651,"byte_end":218747,"line_start":63,"line_end":63,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218752,"byte_end":218848,"line_start":64,"line_end":64,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in an `HashMap`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218853,"byte_end":218934,"line_start":65,"line_end":65,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218939,"byte_end":218942,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ The `operation` function is invoked on each element with the following parameters:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218947,"byte_end":219033,"line_start":67,"line_end":67,"column_start":5,"column_end":91}},{"value":"/  - the current value of the accumulator of the group if there is currently one;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219038,"byte_end":219121,"line_start":68,"line_end":68,"column_start":5,"column_end":88}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219126,"byte_end":219193,"line_start":69,"line_end":69,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being aggregated;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219198,"byte_end":219250,"line_start":70,"line_end":70,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219255,"byte_end":219259,"line_start":71,"line_end":71,"column_start":5,"column_end":9}},{"value":"/ If `operation` returns `Some(element)` then the accumulator is updated with `element`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219264,"byte_end":219354,"line_start":72,"line_end":72,"column_start":5,"column_end":95}},{"value":"/ otherwise the previous accumulation is discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219359,"byte_end":219412,"line_start":73,"line_end":73,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219417,"byte_end":219420,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of aggregation of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219425,"byte_end":219515,"line_start":75,"line_end":75,"column_start":5,"column_end":95}},{"value":"/ that group's elements. If the aggregation of the last element of a group discards the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219520,"byte_end":219609,"line_start":76,"line_end":76,"column_start":5,"column_end":94}},{"value":"/ accumulator then there won't be an entry associated to that group's key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219614,"byte_end":219690,"line_start":77,"line_end":77,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219695,"byte_end":219699,"line_start":78,"line_end":78,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219704,"byte_end":219711,"line_start":79,"line_end":79,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219716,"byte_end":219745,"line_start":80,"line_end":80,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219750,"byte_end":219754,"line_start":81,"line_end":81,"column_start":5,"column_end":9}},{"value":"/ let data = vec![2, 8, 5, 7, 9, 0, 4, 10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219759,"byte_end":219804,"line_start":82,"line_end":82,"column_start":5,"column_end":50}},{"value":"/ let lookup = data.into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219809,"byte_end":219842,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/     .into_grouping_map_by(|&n| n % 4)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219847,"byte_end":219888,"line_start":84,"line_end":84,"column_start":5,"column_end":46}},{"value":"/     .aggregate(|acc, _key, val| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219893,"byte_end":219930,"line_start":85,"line_end":85,"column_start":5,"column_end":42}},{"value":"/         if val == 0 || val == 10 {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219935,"byte_end":219973,"line_start":86,"line_end":86,"column_start":5,"column_end":43}},{"value":"/             None","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":219978,"byte_end":219998,"line_start":87,"line_end":87,"column_start":5,"column_end":25}},{"value":"/         } else {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220003,"byte_end":220023,"line_start":88,"line_end":88,"column_start":5,"column_end":25}},{"value":"/             Some(acc.unwrap_or(0) + val)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220028,"byte_end":220072,"line_start":89,"line_end":89,"column_start":5,"column_end":49}},{"value":"/         }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220077,"byte_end":220090,"line_start":90,"line_end":90,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220095,"byte_end":220106,"line_start":91,"line_end":91,"column_start":5,"column_end":16}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220111,"byte_end":220115,"line_start":92,"line_end":92,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 4);        // 0 resets the accumulator so only 4 is summed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220120,"byte_end":220205,"line_start":93,"line_end":93,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(lookup[&1], 5 + 9);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220210,"byte_end":220244,"line_start":94,"line_end":94,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.get(&2), None); // 10 resets the accumulator and nothing is summed afterward","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220249,"byte_end":220347,"line_start":95,"line_end":95,"column_start":5,"column_end":103}},{"value":"/ assert_eq!(lookup[&3], 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220352,"byte_end":220382,"line_start":96,"line_end":96,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);      // The final keys are only 0, 1 and 2","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220387,"byte_end":220462,"line_start":97,"line_end":97,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220467,"byte_end":220474,"line_start":98,"line_end":98,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222106,"byte_end":222110,"line_start":139,"line_end":139,"column_start":12,"column_end":16},"name":"fold","qualname":"<GroupingMap<I>>::fold","value":"pub fn fold<FO, R>(Self, R, FO) -> HashMap<K, R> where R: Clone,\nFO: FnMut(R, &K, V) -> R","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":220929,"byte_end":221025,"line_start":114,"line_end":114,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221030,"byte_end":221126,"line_start":115,"line_end":115,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221131,"byte_end":221209,"line_start":116,"line_end":116,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221214,"byte_end":221217,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ `init` is the value from which will be cloned the initial value of each accumulator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221222,"byte_end":221310,"line_start":118,"line_end":118,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221315,"byte_end":221318,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221323,"byte_end":221415,"line_start":120,"line_end":120,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221420,"byte_end":221477,"line_start":121,"line_end":121,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221482,"byte_end":221549,"line_start":122,"line_end":122,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221554,"byte_end":221607,"line_start":123,"line_end":123,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221612,"byte_end":221615,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221620,"byte_end":221726,"line_start":125,"line_end":125,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221731,"byte_end":221735,"line_start":126,"line_end":126,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221740,"byte_end":221747,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221752,"byte_end":221781,"line_start":128,"line_end":128,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221786,"byte_end":221790,"line_start":129,"line_end":129,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221795,"byte_end":221819,"line_start":130,"line_end":130,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221824,"byte_end":221865,"line_start":131,"line_end":131,"column_start":5,"column_end":46}},{"value":"/     .fold(0, |acc, _key, val| acc + val);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221870,"byte_end":221915,"line_start":132,"line_end":132,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221920,"byte_end":221924,"line_start":133,"line_end":133,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221929,"byte_end":221963,"line_start":134,"line_end":134,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":221968,"byte_end":222006,"line_start":135,"line_end":135,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222011,"byte_end":222045,"line_start":136,"line_end":136,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222050,"byte_end":222082,"line_start":137,"line_end":137,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222087,"byte_end":222094,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223648,"byte_end":223658,"line_start":176,"line_end":176,"column_start":12,"column_end":22},"name":"fold_first","qualname":"<GroupingMap<I>>::fold_first","value":"pub fn fold_first<FO>(Self, FO) -> HashMap<K, V> where FO: FnMut(V, &K, V) ->\nV","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and applies `operation` to the elements\n of each group sequentially, passing the previously accumulated value, a reference to the key\n and the current element as arguments, and stores the results in a new map.","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and applies `operation` to the elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222404,"byte_end":222500,"line_start":149,"line_end":149,"column_start":5,"column_end":101}},{"value":"/ of each group sequentially, passing the previously accumulated value, a reference to the key","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222505,"byte_end":222601,"line_start":150,"line_end":150,"column_start":5,"column_end":101}},{"value":"/ and the current element as arguments, and stores the results in a new map.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222606,"byte_end":222684,"line_start":151,"line_end":151,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222689,"byte_end":222692,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This is similar to [`fold`] but the initial value of the accumulator is the first element of the group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222697,"byte_end":222804,"line_start":153,"line_end":153,"column_start":5,"column_end":112}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222809,"byte_end":222812,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ `operation` is a function that is invoked on each element with the following parameters:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222817,"byte_end":222909,"line_start":155,"line_end":155,"column_start":5,"column_end":97}},{"value":"/  - the current value of the accumulator of the group;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222914,"byte_end":222971,"line_start":156,"line_end":156,"column_start":5,"column_end":62}},{"value":"/  - a reference to the key of the group this element belongs to;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":222976,"byte_end":223043,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/  - the element from the source being accumulated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223048,"byte_end":223101,"line_start":158,"line_end":158,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223106,"byte_end":223109,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Return a `HashMap` associating the key of each group with the result of folding that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223114,"byte_end":223220,"line_start":160,"line_end":160,"column_start":5,"column_end":111}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223225,"byte_end":223229,"line_start":161,"line_end":161,"column_start":5,"column_end":9}},{"value":"/ [`fold`]: GroupingMap::fold","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223234,"byte_end":223265,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223270,"byte_end":223274,"line_start":163,"line_end":163,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223279,"byte_end":223286,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223291,"byte_end":223320,"line_start":165,"line_end":165,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223325,"byte_end":223329,"line_start":166,"line_end":166,"column_start":5,"column_end":9}},{"value":"/ let lookup = (1..=7)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223334,"byte_end":223358,"line_start":167,"line_end":167,"column_start":5,"column_end":29}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223363,"byte_end":223404,"line_start":168,"line_end":168,"column_start":5,"column_end":46}},{"value":"/     .fold_first(|acc, _key, val| acc + val);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223409,"byte_end":223457,"line_start":169,"line_end":169,"column_start":5,"column_end":53}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223462,"byte_end":223466,"line_start":170,"line_end":170,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 6);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223471,"byte_end":223505,"line_start":171,"line_end":171,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223510,"byte_end":223548,"line_start":172,"line_end":172,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 2 + 5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223553,"byte_end":223587,"line_start":173,"line_end":173,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223592,"byte_end":223624,"line_start":174,"line_end":174,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223629,"byte_end":223636,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224820,"byte_end":224827,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"collect","qualname":"<GroupingMap<I>>::collect","value":"pub fn collect<C>(Self) -> HashMap<K, C> where C: Default + Extend<V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and collects the elements of each group in\n an instance of `C`. The iteration order is preserved when inserting elements. \n \n Return a `HashMap` associating the key of each group with the collection containing that group's elements.\n \n ```\n use itertools::Itertools;\n use std::collections::HashSet;\n \n let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .collect::<HashSet<_>>();\n \n assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and collects the elements of each group in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":223942,"byte_end":224041,"line_start":187,"line_end":187,"column_start":5,"column_end":104}},{"value":"/ an instance of `C`. The iteration order is preserved when inserting elements. ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224046,"byte_end":224128,"line_start":188,"line_end":188,"column_start":5,"column_end":87}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224133,"byte_end":224137,"line_start":189,"line_end":189,"column_start":5,"column_end":9}},{"value":"/ Return a `HashMap` associating the key of each group with the collection containing that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224142,"byte_end":224252,"line_start":190,"line_end":190,"column_start":5,"column_end":115}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224257,"byte_end":224261,"line_start":191,"line_end":191,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224266,"byte_end":224273,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224278,"byte_end":224307,"line_start":193,"line_end":193,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashSet;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224312,"byte_end":224346,"line_start":194,"line_end":194,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224351,"byte_end":224355,"line_start":195,"line_end":195,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![0, 1, 2, 3, 4, 5, 6, 2, 3, 6].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224360,"byte_end":224423,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224428,"byte_end":224469,"line_start":197,"line_end":197,"column_start":5,"column_end":46}},{"value":"/     .collect::<HashSet<_>>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224474,"byte_end":224507,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224512,"byte_end":224516,"line_start":199,"line_end":199,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], vec![0, 3, 6].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224521,"byte_end":224599,"line_start":200,"line_end":200,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(lookup[&1], vec![1, 4].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224604,"byte_end":224679,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup[&2], vec![2, 5].into_iter().collect::<HashSet<_>>());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224684,"byte_end":224759,"line_start":202,"line_end":202,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224764,"byte_end":224796,"line_start":203,"line_end":203,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":224801,"byte_end":224808,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225786,"byte_end":225789,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"max","qualname":"<GroupingMap<I>>::max","value":"pub fn max(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max();\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225124,"byte_end":225217,"line_start":217,"line_end":217,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225222,"byte_end":225226,"line_start":218,"line_end":218,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225231,"byte_end":225303,"line_start":219,"line_end":219,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225308,"byte_end":225312,"line_start":220,"line_end":220,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225317,"byte_end":225417,"line_start":221,"line_end":221,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225422,"byte_end":225426,"line_start":222,"line_end":222,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225431,"byte_end":225438,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225443,"byte_end":225472,"line_start":224,"line_end":224,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225477,"byte_end":225481,"line_start":225,"line_end":225,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225486,"byte_end":225544,"line_start":226,"line_end":226,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225549,"byte_end":225590,"line_start":227,"line_end":227,"column_start":5,"column_end":46}},{"value":"/     .max();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225595,"byte_end":225610,"line_start":228,"line_end":228,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225615,"byte_end":225619,"line_start":229,"line_end":229,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225624,"byte_end":225655,"line_start":230,"line_end":230,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225660,"byte_end":225690,"line_start":231,"line_end":231,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225695,"byte_end":225725,"line_start":232,"line_end":232,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225730,"byte_end":225762,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225767,"byte_end":225774,"line_start":234,"line_end":234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226643,"byte_end":226649,"line_start":260,"line_end":260,"column_start":12,"column_end":18},"name":"max_by","qualname":"<GroupingMap<I>>::max_by","value":"pub fn max_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the maximum of each group\n with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the maximum of each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225900,"byte_end":225992,"line_start":241,"line_end":241,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":225997,"byte_end":226051,"line_start":242,"line_end":242,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226056,"byte_end":226060,"line_start":243,"line_end":243,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226065,"byte_end":226137,"line_start":244,"line_end":244,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226142,"byte_end":226146,"line_start":245,"line_end":245,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226151,"byte_end":226251,"line_start":246,"line_end":246,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226256,"byte_end":226260,"line_start":247,"line_end":247,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226265,"byte_end":226272,"line_start":248,"line_end":248,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226277,"byte_end":226306,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226311,"byte_end":226315,"line_start":250,"line_end":250,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226320,"byte_end":226378,"line_start":251,"line_end":251,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226383,"byte_end":226424,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"/     .max_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226429,"byte_end":226468,"line_start":253,"line_end":253,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226473,"byte_end":226477,"line_start":254,"line_end":254,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226482,"byte_end":226512,"line_start":255,"line_end":255,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226517,"byte_end":226547,"line_start":256,"line_end":256,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226552,"byte_end":226582,"line_start":257,"line_end":257,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226587,"byte_end":226619,"line_start":258,"line_end":258,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226624,"byte_end":226631,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227678,"byte_end":227688,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"max_by_key","qualname":"<GroupingMap<I>>::max_by_key","value":"pub fn max_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n \n Returns a `HashMap` associating the key of each group with the maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .max_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":226931,"byte_end":227023,"line_start":269,"line_end":269,"column_start":5,"column_end":97}},{"value":"/ that gives the maximum from the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227028,"byte_end":227083,"line_start":270,"line_end":270,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227088,"byte_end":227092,"line_start":271,"line_end":271,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227097,"byte_end":227169,"line_start":272,"line_end":272,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227174,"byte_end":227178,"line_start":273,"line_end":273,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227183,"byte_end":227283,"line_start":274,"line_end":274,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227288,"byte_end":227292,"line_start":275,"line_end":275,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227297,"byte_end":227304,"line_start":276,"line_end":276,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227309,"byte_end":227338,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227343,"byte_end":227347,"line_start":278,"line_end":278,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227352,"byte_end":227410,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227415,"byte_end":227456,"line_start":280,"line_end":280,"column_start":5,"column_end":46}},{"value":"/     .max_by_key(|_key, &val| val % 4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227461,"byte_end":227503,"line_start":281,"line_end":281,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227508,"byte_end":227512,"line_start":282,"line_end":282,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227517,"byte_end":227547,"line_start":283,"line_end":283,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227552,"byte_end":227582,"line_start":284,"line_end":284,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227587,"byte_end":227617,"line_start":285,"line_end":285,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227622,"byte_end":227654,"line_start":286,"line_end":286,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227659,"byte_end":227666,"line_start":287,"line_end":287,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228532,"byte_end":228535,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"min","qualname":"<GroupingMap<I>>::min","value":"pub fn min(Self) -> HashMap<K, V> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min();\n \n assert_eq!(lookup[&0], 3);\n assert_eq!(lookup[&1], 1);\n assert_eq!(lookup[&2], 5);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227870,"byte_end":227963,"line_start":295,"line_end":295,"column_start":5,"column_end":98}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227968,"byte_end":227972,"line_start":296,"line_end":296,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":227977,"byte_end":228050,"line_start":297,"line_end":297,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228055,"byte_end":228059,"line_start":298,"line_end":298,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228064,"byte_end":228164,"line_start":299,"line_end":299,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228169,"byte_end":228173,"line_start":300,"line_end":300,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228178,"byte_end":228185,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228190,"byte_end":228219,"line_start":302,"line_end":302,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228224,"byte_end":228228,"line_start":303,"line_end":303,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228233,"byte_end":228291,"line_start":304,"line_end":304,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228296,"byte_end":228337,"line_start":305,"line_end":305,"column_start":5,"column_end":46}},{"value":"/     .min();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228342,"byte_end":228357,"line_start":306,"line_end":306,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228362,"byte_end":228366,"line_start":307,"line_end":307,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228371,"byte_end":228401,"line_start":308,"line_end":308,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&1], 1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228406,"byte_end":228436,"line_start":309,"line_end":309,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228441,"byte_end":228471,"line_start":310,"line_end":310,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228476,"byte_end":228508,"line_start":311,"line_end":311,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228513,"byte_end":228520,"line_start":312,"line_end":312,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229391,"byte_end":229397,"line_start":338,"line_end":338,"column_start":12,"column_end":18},"name":"min_by","qualname":"<GroupingMap<I>>::min_by","value":"pub fn min_by<F>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V, &V) ->\nOrdering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the minimum of each group\n with respect to the specified comparison function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 7);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the minimum of each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228646,"byte_end":228738,"line_start":319,"line_end":319,"column_start":5,"column_end":97}},{"value":"/ with respect to the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228743,"byte_end":228797,"line_start":320,"line_end":320,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228802,"byte_end":228806,"line_start":321,"line_end":321,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228811,"byte_end":228884,"line_start":322,"line_end":322,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228889,"byte_end":228893,"line_start":323,"line_end":323,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":228898,"byte_end":228998,"line_start":324,"line_end":324,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229003,"byte_end":229007,"line_start":325,"line_end":325,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229012,"byte_end":229019,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229024,"byte_end":229053,"line_start":327,"line_end":327,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229058,"byte_end":229062,"line_start":328,"line_end":328,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229067,"byte_end":229125,"line_start":329,"line_end":329,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229130,"byte_end":229171,"line_start":330,"line_end":330,"column_start":5,"column_end":46}},{"value":"/     .min_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229176,"byte_end":229215,"line_start":331,"line_end":331,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229220,"byte_end":229224,"line_start":332,"line_end":332,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229229,"byte_end":229260,"line_start":333,"line_end":333,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229265,"byte_end":229295,"line_start":334,"line_end":334,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229300,"byte_end":229330,"line_start":335,"line_end":335,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229335,"byte_end":229367,"line_start":336,"line_end":336,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229372,"byte_end":229379,"line_start":337,"line_end":337,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230428,"byte_end":230438,"line_start":366,"line_end":366,"column_start":12,"column_end":22},"name":"min_by_key","qualname":"<GroupingMap<I>>::min_by_key","value":"pub fn min_by_key<F, CK>(Self, F) -> HashMap<K, V> where F: FnMut(&K, &V) ->\nCK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and finds the element of each group\n that gives the minimum from the specified function.\n \n If several elements are equally minimum, the first element is picked.\n \n Returns a `HashMap` associating the key of each group with the minimum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .min_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], 12);\n assert_eq!(lookup[&1], 4);\n assert_eq!(lookup[&2], 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and finds the element of each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229679,"byte_end":229771,"line_start":347,"line_end":347,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum from the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229776,"byte_end":229831,"line_start":348,"line_end":348,"column_start":5,"column_end":60}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229836,"byte_end":229840,"line_start":349,"line_end":349,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229845,"byte_end":229918,"line_start":350,"line_end":350,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229923,"byte_end":229927,"line_start":351,"line_end":351,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":229932,"byte_end":230032,"line_start":352,"line_end":352,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230037,"byte_end":230041,"line_start":353,"line_end":353,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230046,"byte_end":230053,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230058,"byte_end":230087,"line_start":355,"line_end":355,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230092,"byte_end":230096,"line_start":356,"line_end":356,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230101,"byte_end":230159,"line_start":357,"line_end":357,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230164,"byte_end":230205,"line_start":358,"line_end":358,"column_start":5,"column_end":46}},{"value":"/     .min_by_key(|_key, &val| val % 4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230210,"byte_end":230252,"line_start":359,"line_end":359,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230257,"byte_end":230261,"line_start":360,"line_end":360,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 12);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230266,"byte_end":230297,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lookup[&1], 4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230302,"byte_end":230332,"line_start":362,"line_end":362,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup[&2], 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230337,"byte_end":230367,"line_start":363,"line_end":363,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230372,"byte_end":230404,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230409,"byte_end":230416,"line_start":365,"line_end":365,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231728,"byte_end":231734,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"minmax","qualname":"<GroupingMap<I>>::minmax","value":"pub fn minmax(Self) -> HashMap<K, MinMaxResult<V>> where V: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n See [.minmax()](crate::Itertools::minmax) for the non-grouping version.\n \n Differences from the non grouping version:\n - It never produces a `MinMaxResult::NoElements`\n - It doesn't have any speedup\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax();\n \n assert_eq!(lookup[&0], MinMax(3, 12));\n assert_eq!(lookup[&1], MinMax(1, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230620,"byte_end":230712,"line_start":373,"line_end":373,"column_start":5,"column_end":97}},{"value":"/ each group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230717,"byte_end":230732,"line_start":374,"line_end":374,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230737,"byte_end":230741,"line_start":375,"line_end":375,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230746,"byte_end":230818,"line_start":376,"line_end":376,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230823,"byte_end":230896,"line_start":377,"line_end":377,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230901,"byte_end":230905,"line_start":378,"line_end":378,"column_start":5,"column_end":9}},{"value":"/ See [.minmax()](crate::Itertools::minmax) for the non-grouping version.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230910,"byte_end":230985,"line_start":379,"line_end":379,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230990,"byte_end":230994,"line_start":380,"line_end":380,"column_start":5,"column_end":9}},{"value":"/ Differences from the non grouping version:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":230999,"byte_end":231045,"line_start":381,"line_end":381,"column_start":5,"column_end":51}},{"value":"/ - It never produces a `MinMaxResult::NoElements`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231050,"byte_end":231102,"line_start":382,"line_end":382,"column_start":5,"column_end":57}},{"value":"/ - It doesn't have any speedup","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231107,"byte_end":231140,"line_start":383,"line_end":383,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231145,"byte_end":231149,"line_start":384,"line_end":384,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231154,"byte_end":231266,"line_start":385,"line_end":385,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231271,"byte_end":231275,"line_start":386,"line_end":386,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231280,"byte_end":231287,"line_start":387,"line_end":387,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231292,"byte_end":231321,"line_start":388,"line_end":388,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231326,"byte_end":231380,"line_start":389,"line_end":389,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231385,"byte_end":231389,"line_start":390,"line_end":390,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231394,"byte_end":231449,"line_start":391,"line_end":391,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231454,"byte_end":231495,"line_start":392,"line_end":392,"column_start":5,"column_end":46}},{"value":"/     .minmax();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231500,"byte_end":231518,"line_start":393,"line_end":393,"column_start":5,"column_end":23}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231523,"byte_end":231527,"line_start":394,"line_end":394,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(3, 12));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231532,"byte_end":231574,"line_start":395,"line_end":395,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(1, 7));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231579,"byte_end":231620,"line_start":396,"line_end":396,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231625,"byte_end":231667,"line_start":397,"line_end":397,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231672,"byte_end":231704,"line_start":398,"line_end":398,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231709,"byte_end":231716,"line_start":399,"line_end":399,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232888,"byte_end":232897,"line_start":429,"line_end":429,"column_start":12,"column_end":21},"name":"minmax_by","qualname":"<GroupingMap<I>>::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V, &V) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the maximum and minimum of\n each group with respect to the specified comparison function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by(|_key, x, y| y.cmp(x));\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(7, 1));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the maximum and minimum of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231862,"byte_end":231954,"line_start":406,"line_end":406,"column_start":5,"column_end":97}},{"value":"/ each group with respect to the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":231959,"byte_end":232024,"line_start":407,"line_end":407,"column_start":5,"column_end":70}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232029,"byte_end":232033,"line_start":408,"line_end":408,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232038,"byte_end":232110,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232115,"byte_end":232188,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232193,"byte_end":232197,"line_start":411,"line_end":411,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232202,"byte_end":232276,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232281,"byte_end":232285,"line_start":413,"line_end":413,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232290,"byte_end":232402,"line_start":414,"line_end":414,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232407,"byte_end":232411,"line_start":415,"line_end":415,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232416,"byte_end":232423,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232428,"byte_end":232457,"line_start":417,"line_end":417,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232462,"byte_end":232516,"line_start":418,"line_end":418,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232521,"byte_end":232525,"line_start":419,"line_end":419,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232530,"byte_end":232585,"line_start":420,"line_end":420,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232590,"byte_end":232631,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/     .minmax_by(|_key, x, y| y.cmp(x));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232636,"byte_end":232678,"line_start":422,"line_end":422,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232683,"byte_end":232687,"line_start":423,"line_end":423,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232692,"byte_end":232734,"line_start":424,"line_end":424,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(7, 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232739,"byte_end":232780,"line_start":425,"line_end":425,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232785,"byte_end":232827,"line_start":426,"line_end":426,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232832,"byte_end":232864,"line_start":427,"line_end":427,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":232869,"byte_end":232876,"line_start":428,"line_end":428,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234998,"byte_end":235011,"line_start":479,"line_end":479,"column_start":12,"column_end":25},"name":"minmax_by_key","qualname":"<GroupingMap<I>>::minmax_by_key","value":"pub fn minmax_by_key<F, CK>(Self, F) -> HashMap<K, MinMaxResult<V>> where\nF: FnMut(&K, &V) -> CK, CK: Ord","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and find the elements of each group\n that gives the minimum and maximum from the specified function.\n \n If several elements are equally maximum, the last element is picked.\n If several elements are equally minimum, the first element is picked.\n \n It has the same differences from the non-grouping version as `minmax`.\n \n Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.\n \n ```\n use itertools::Itertools;\n use itertools::MinMaxResult::{OneElement, MinMax};\n \n let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .minmax_by_key(|_key, &val| val % 4);\n \n assert_eq!(lookup[&0], MinMax(12, 3));\n assert_eq!(lookup[&1], MinMax(4, 7));\n assert_eq!(lookup[&2], OneElement(5));\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and find the elements of each group","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":233967,"byte_end":234059,"line_start":456,"line_end":456,"column_start":5,"column_end":97}},{"value":"/ that gives the minimum and maximum from the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234064,"byte_end":234131,"line_start":457,"line_end":457,"column_start":5,"column_end":72}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234136,"byte_end":234140,"line_start":458,"line_end":458,"column_start":5,"column_end":9}},{"value":"/ If several elements are equally maximum, the last element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234145,"byte_end":234217,"line_start":459,"line_end":459,"column_start":5,"column_end":77}},{"value":"/ If several elements are equally minimum, the first element is picked.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234222,"byte_end":234295,"line_start":460,"line_end":460,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234300,"byte_end":234304,"line_start":461,"line_end":461,"column_start":5,"column_end":9}},{"value":"/ It has the same differences from the non-grouping version as `minmax`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234309,"byte_end":234383,"line_start":462,"line_end":462,"column_start":5,"column_end":79}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234388,"byte_end":234392,"line_start":463,"line_end":463,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the minimum and maximum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234397,"byte_end":234509,"line_start":464,"line_end":464,"column_start":5,"column_end":117}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234514,"byte_end":234518,"line_start":465,"line_end":465,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234523,"byte_end":234530,"line_start":466,"line_end":466,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234535,"byte_end":234564,"line_start":467,"line_end":467,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234569,"byte_end":234623,"line_start":468,"line_end":468,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234628,"byte_end":234632,"line_start":469,"line_end":469,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234637,"byte_end":234692,"line_start":470,"line_end":470,"column_start":5,"column_end":60}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234697,"byte_end":234738,"line_start":471,"line_end":471,"column_start":5,"column_end":46}},{"value":"/     .minmax_by_key(|_key, &val| val % 4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234743,"byte_end":234788,"line_start":472,"line_end":472,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234793,"byte_end":234797,"line_start":473,"line_end":473,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], MinMax(12, 3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234802,"byte_end":234844,"line_start":474,"line_end":474,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup[&1], MinMax(4, 7));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234849,"byte_end":234890,"line_start":475,"line_end":475,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&2], OneElement(5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234895,"byte_end":234937,"line_start":476,"line_end":476,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234942,"byte_end":234974,"line_start":477,"line_end":477,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":234979,"byte_end":234986,"line_start":478,"line_end":478,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235960,"byte_end":235963,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"sum","qualname":"<GroupingMap<I>>::sum","value":"pub fn sum(Self) -> HashMap<K, V> where V: Add<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and sums them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.\n It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.\n \n Returns a `HashMap` associating the key of each group with the sum of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .sum();\n \n assert_eq!(lookup[&0], 3 + 9 + 12);\n assert_eq!(lookup[&1], 1 + 4 + 7);\n assert_eq!(lookup[&2], 5 + 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and sums them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235214,"byte_end":235285,"line_start":486,"line_end":486,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235290,"byte_end":235294,"line_start":487,"line_end":487,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc + val)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235299,"byte_end":235375,"line_start":488,"line_end":488,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::sum` since it doesn't use the `Sum` trait.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235380,"byte_end":235461,"line_start":489,"line_end":489,"column_start":5,"column_end":86}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235466,"byte_end":235470,"line_start":490,"line_end":490,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the sum of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235475,"byte_end":235571,"line_start":491,"line_end":491,"column_start":5,"column_end":101}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235576,"byte_end":235580,"line_start":492,"line_end":492,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235585,"byte_end":235592,"line_start":493,"line_end":493,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235597,"byte_end":235626,"line_start":494,"line_end":494,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235631,"byte_end":235635,"line_start":495,"line_end":495,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235640,"byte_end":235698,"line_start":496,"line_end":496,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235703,"byte_end":235744,"line_start":497,"line_end":497,"column_start":5,"column_end":46}},{"value":"/     .sum();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235749,"byte_end":235764,"line_start":498,"line_end":498,"column_start":5,"column_end":20}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235769,"byte_end":235773,"line_start":499,"line_end":499,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 + 9 + 12);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235778,"byte_end":235817,"line_start":500,"line_end":500,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 + 4 + 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235822,"byte_end":235860,"line_start":501,"line_end":501,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 + 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235865,"byte_end":235899,"line_start":502,"line_end":502,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235904,"byte_end":235936,"line_start":503,"line_end":503,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":235941,"byte_end":235948,"line_start":504,"line_end":504,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236855,"byte_end":236862,"line_start":530,"line_end":530,"column_start":12,"column_end":19},"name":"product","qualname":"<GroupingMap<I>>::product","value":"pub fn product(Self) -> HashMap<K, V> where V: Mul<V, Output = V>","parent":null,"children":[],"decl_id":null,"docs":" Groups elements from the `GroupingMap` source by key and multiply them.\n \n This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.\n It is more limited than `Iterator::product` since it doesn't use the `Product` trait.\n \n Returns a `HashMap` associating the key of each group with the product of that group's elements.\n \n ```\n use itertools::Itertools;\n \n let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()\n     .into_grouping_map_by(|&n| n % 3)\n     .product();\n \n assert_eq!(lookup[&0], 3 * 9 * 12);\n assert_eq!(lookup[&1], 1 * 4 * 7);\n assert_eq!(lookup[&2], 5 * 8);\n assert_eq!(lookup.len(), 3);\n ```\n","sig":null,"attributes":[{"value":"/ Groups elements from the `GroupingMap` source by key and multiply them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236089,"byte_end":236164,"line_start":511,"line_end":511,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236169,"byte_end":236173,"line_start":512,"line_end":512,"column_start":5,"column_end":9}},{"value":"/ This is just a shorthand for `self.fold_first(|acc, _, val| acc * val)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236178,"byte_end":236254,"line_start":513,"line_end":513,"column_start":5,"column_end":81}},{"value":"/ It is more limited than `Iterator::product` since it doesn't use the `Product` trait.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236259,"byte_end":236348,"line_start":514,"line_end":514,"column_start":5,"column_end":94}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236353,"byte_end":236357,"line_start":515,"line_end":515,"column_start":5,"column_end":9}},{"value":"/ Returns a `HashMap` associating the key of each group with the product of that group's elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236362,"byte_end":236462,"line_start":516,"line_end":516,"column_start":5,"column_end":105}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236467,"byte_end":236471,"line_start":517,"line_end":517,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236476,"byte_end":236483,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236488,"byte_end":236517,"line_start":519,"line_end":519,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236522,"byte_end":236526,"line_start":520,"line_end":520,"column_start":5,"column_end":9}},{"value":"/ let lookup = vec![1, 3, 4, 5, 7, 8, 9, 12].into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236531,"byte_end":236589,"line_start":521,"line_end":521,"column_start":5,"column_end":63}},{"value":"/     .into_grouping_map_by(|&n| n % 3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236594,"byte_end":236635,"line_start":522,"line_end":522,"column_start":5,"column_end":46}},{"value":"/     .product();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236640,"byte_end":236659,"line_start":523,"line_end":523,"column_start":5,"column_end":24}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236664,"byte_end":236668,"line_start":524,"line_end":524,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(lookup[&0], 3 * 9 * 12);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236673,"byte_end":236712,"line_start":525,"line_end":525,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(lookup[&1], 1 * 4 * 7);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236717,"byte_end":236755,"line_start":526,"line_end":526,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(lookup[&2], 5 * 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236760,"byte_end":236794,"line_start":527,"line_end":527,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(lookup.len(), 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236799,"byte_end":236831,"line_start":528,"line_end":528,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":236836,"byte_end":236843,"line_start":529,"line_end":529,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":237931,"byte_end":237934,"line_start":6,"line_end":6,"column_start":10,"column_end":13},"name":"Key","qualname":"::groupbylazy::KeyFunction::Key","value":"type Key;","parent":{"krate":0,"index":1402},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247379,"byte_end":247386,"line_start":289,"line_end":289,"column_start":12,"column_end":19},"name":"GroupBy","qualname":"::groupbylazy::GroupBy","value":"GroupBy {  }","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457}],"decl_id":null,"docs":" `GroupBy` is the storage for the lazy grouping operation.","sig":null,"attributes":[{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246689,"byte_end":246750,"line_start":275,"line_end":275,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246751,"byte_end":246754,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ If the groups are consumed in their original order, or if each","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246755,"byte_end":246821,"line_start":277,"line_end":277,"column_start":1,"column_end":67}},{"value":"/ group is dropped without keeping it around, then `GroupBy` uses","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246822,"byte_end":246889,"line_start":278,"line_end":278,"column_start":1,"column_end":68}},{"value":"/ no allocations. It needs allocations only if several group iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246890,"byte_end":246962,"line_start":279,"line_end":279,"column_start":1,"column_end":73}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246963,"byte_end":246994,"line_start":280,"line_end":280,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246995,"byte_end":246998,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246999,"byte_end":247067,"line_start":282,"line_end":282,"column_start":1,"column_end":69}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247068,"byte_end":247133,"line_start":283,"line_end":283,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247134,"byte_end":247201,"line_start":284,"line_end":284,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247202,"byte_end":247215,"line_start":285,"line_end":285,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247216,"byte_end":247219,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247220,"byte_end":247293,"line_start":287,"line_end":287,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":247294,"byte_end":247367,"line_start":288,"line_end":288,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249241,"byte_end":249247,"line_start":359,"line_end":359,"column_start":12,"column_end":18},"name":"Groups","qualname":"::groupbylazy::Groups","value":"Groups {  }","parent":null,"children":[{"krate":0,"index":1481}],"decl_id":null,"docs":" An iterator that yields the Group iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Group iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":248932,"byte_end":248980,"line_start":352,"line_end":352,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":248981,"byte_end":248984,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `(K, Group)`:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":248985,"byte_end":249027,"line_start":354,"line_end":354,"column_start":1,"column_end":43}},{"value":"/ the group's key `K` and the group's iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249028,"byte_end":249077,"line_start":355,"line_end":355,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249078,"byte_end":249081,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ See [`.group_by()`](crate::Itertools::group_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249082,"byte_end":249155,"line_start":357,"line_end":357,"column_start":1,"column_end":74}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249156,"byte_end":249229,"line_start":358,"line_end":358,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1490},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250108,"byte_end":250113,"line_start":393,"line_end":393,"column_start":12,"column_end":17},"name":"Group","qualname":"::groupbylazy::Group","value":"Group {  }","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497}],"decl_id":null,"docs":" An iterator for the elements in a single group.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250001,"byte_end":250052,"line_start":390,"line_end":390,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250053,"byte_end":250056,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250057,"byte_end":250096,"line_start":392,"line_end":392,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1513},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252037,"byte_end":252047,"line_start":465,"line_end":465,"column_start":12,"column_end":22},"name":"IntoChunks","qualname":"::groupbylazy::IntoChunks","value":"IntoChunks {  }","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"decl_id":null,"docs":" `ChunkLazy` is the storage for a lazy chunking operation.","sig":null,"attributes":[{"value":"/ `ChunkLazy` is the storage for a lazy chunking operation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251385,"byte_end":251446,"line_start":451,"line_end":451,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251447,"byte_end":251450,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ `IntoChunks` behaves just like `GroupBy`: it is iterable, and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251451,"byte_end":251516,"line_start":453,"line_end":453,"column_start":1,"column_end":66}},{"value":"/ it only buffers if several chunk iterators are alive at the same time.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251517,"byte_end":251591,"line_start":454,"line_end":454,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251592,"byte_end":251595,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251596,"byte_end":251664,"line_start":456,"line_end":456,"column_start":1,"column_end":69}},{"value":"/ itself), because the chunk iterators need to borrow from this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251665,"byte_end":251730,"line_start":457,"line_end":457,"column_start":1,"column_end":66}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251731,"byte_end":251798,"line_start":458,"line_end":458,"column_start":1,"column_end":68}},{"value":"/ iterated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251799,"byte_end":251812,"line_start":459,"line_end":459,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251813,"byte_end":251816,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251817,"byte_end":251877,"line_start":461,"line_end":461,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251878,"byte_end":251881,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251882,"byte_end":251951,"line_start":463,"line_end":463,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":251952,"byte_end":252025,"line_start":464,"line_end":464,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1527},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253158,"byte_end":253164,"line_start":510,"line_end":510,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::groupbylazy::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":1530}],"decl_id":null,"docs":" An iterator that yields the Chunk iterators.","sig":null,"attributes":[{"value":"/ An iterator that yields the Chunk iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252908,"byte_end":252956,"line_start":504,"line_end":504,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252957,"byte_end":252960,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Chunk`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252961,"byte_end":252998,"line_start":506,"line_end":506,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252999,"byte_end":253002,"line_start":507,"line_end":507,"column_start":1,"column_end":4}},{"value":"/ See [`.chunks()`](crate::Itertools::chunks) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253003,"byte_end":253072,"line_start":508,"line_end":508,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253073,"byte_end":253146,"line_start":509,"line_end":509,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1537},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253875,"byte_end":253880,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"Chunk","qualname":"::groupbylazy::Chunk","value":"Chunk {  }","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542}],"decl_id":null,"docs":" An iterator for the elements in a single chunk.","sig":null,"attributes":[{"value":"/ An iterator for the elements in a single chunk.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253768,"byte_end":253819,"line_start":538,"line_end":538,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253820,"byte_end":253823,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253824,"byte_end":253863,"line_start":540,"line_end":540,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254555,"byte_end":254573,"line_start":4,"line_end":4,"column_start":11,"column_end":29},"name":"IntersperseElement","qualname":"::intersperse::IntersperseElement","value":"IntersperseElement<Item>","parent":null,"children":[{"krate":0,"index":1565}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254589,"byte_end":254597,"line_start":5,"line_end":5,"column_start":8,"column_end":16},"name":"generate","qualname":"::intersperse::IntersperseElement::generate","value":"pub fn generate(&mut Self) -> Item","parent":{"krate":0,"index":1563},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3846},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254656,"byte_end":254680,"line_start":9,"line_end":9,"column_start":12,"column_end":36},"name":"IntersperseElementSimple","qualname":"::intersperse::IntersperseElementSimple","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255117,"byte_end":255128,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"Intersperse","qualname":"::intersperse::Intersperse","value":"IntersperseWith<I, IntersperseElementSimple<<I as Iterator>::Item>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254844,"byte_end":254896,"line_start":17,"line_end":17,"column_start":1,"column_end":53}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254897,"byte_end":254946,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254947,"byte_end":254950,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254951,"byte_end":254989,"line_start":20,"line_end":20,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254990,"byte_end":254993,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254994,"byte_end":255023,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255024,"byte_end":255027,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse()`](crate::Itertools::intersperse) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255028,"byte_end":255107,"line_start":24,"line_end":24,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":3856},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255919,"byte_end":255934,"line_start":50,"line_end":50,"column_start":12,"column_end":27},"name":"IntersperseWith","qualname":"::intersperse::IntersperseWith","value":"IntersperseWith {  }","parent":null,"children":[{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861}],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255514,"byte_end":255588,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255589,"byte_end":255638,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255639,"byte_end":255642,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255643,"byte_end":255681,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255682,"byte_end":255685,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255686,"byte_end":255715,"line_start":45,"line_end":45,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255716,"byte_end":255719,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ See [`.intersperse_with()`](crate::Itertools::intersperse_with) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255720,"byte_end":255809,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255810,"byte_end":255883,"line_start":48,"line_end":48,"column_start":1,"column_end":74}}]},{"kind":"Type","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261471,"byte_end":261477,"line_start":107,"line_end":107,"column_start":10,"column_end":16},"name":"KMerge","qualname":"::kmerge_impl::KMerge","value":"KMergeBy<I, KMergeByLt>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators in ascending order.\n If all base iterators are sorted (ascending), the result is sorted.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261179,"byte_end":261271,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261272,"byte_end":261343,"line_start":102,"line_end":102,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261344,"byte_end":261347,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261348,"byte_end":261387,"line_start":104,"line_end":104,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261388,"byte_end":261391,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge()`](crate::Itertools::kmerge) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261392,"byte_end":261461,"line_start":106,"line_end":106,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1639},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261519,"byte_end":261534,"line_start":109,"line_end":109,"column_start":11,"column_end":26},"name":"KMergePredicate","qualname":"::kmerge_impl::KMergePredicate","value":"KMergePredicate<T>","parent":null,"children":[{"krate":0,"index":1641}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261547,"byte_end":261558,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"kmerge_pred","qualname":"::kmerge_impl::KMergePredicate::kmerge_pred","value":"pub fn kmerge_pred(&mut Self, &T, &T) -> bool","parent":{"krate":0,"index":1639},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3878},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261631,"byte_end":261641,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"KMergeByLt","qualname":"::kmerge_impl::KMergeByLt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1649},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262249,"byte_end":262255,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::kmerge_impl::kmerge","value":"pub fn kmerge<I>(I) -> KMerge<<I::Item as IntoIterator>::IntoIter> where\nI: IntoIterator, I::Item: IntoIterator,\n<<I as IntoIterator>::Item as IntoIterator>::Item: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators using\n the ordering function.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators using","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261918,"byte_end":261994,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"/ the ordering function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261995,"byte_end":262021,"line_start":129,"line_end":129,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262022,"byte_end":262025,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::kmerge`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262026,"byte_end":262088,"line_start":131,"line_end":131,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262089,"byte_end":262092,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262093,"byte_end":262100,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use itertools::kmerge;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262101,"byte_end":262127,"line_start":134,"line_end":134,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262128,"byte_end":262131,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ for elt in kmerge(vec![vec![0, 2, 4], vec![1, 3, 5], vec![6, 7]]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262132,"byte_end":262203,"line_start":136,"line_end":136,"column_start":1,"column_end":72}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262204,"byte_end":262227,"line_start":137,"line_end":137,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262228,"byte_end":262233,"line_start":138,"line_end":138,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262234,"byte_end":262241,"line_start":139,"line_end":139,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1651},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262817,"byte_end":262825,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"KMergeBy","qualname":"::kmerge_impl::KMergeBy","value":"KMergeBy {  }","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655}],"decl_id":null,"docs":" An iterator adaptor that merges an abitrary number of base iterators\n according to an ordering function.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merges an abitrary number of base iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262492,"byte_end":262564,"line_start":148,"line_end":148,"column_start":1,"column_end":73}},{"value":"/ according to an ordering function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262565,"byte_end":262603,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262604,"byte_end":262607,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262608,"byte_end":262647,"line_start":151,"line_end":151,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262648,"byte_end":262651,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ See [`.kmerge_by()`](crate::Itertools::kmerge_by) for more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262652,"byte_end":262714,"line_start":153,"line_end":153,"column_start":1,"column_end":63}},{"value":"/ information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262715,"byte_end":262731,"line_start":154,"line_end":154,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262732,"byte_end":262805,"line_start":155,"line_end":155,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":1659},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263207,"byte_end":263216,"line_start":173,"line_end":173,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::kmerge_impl::kmerge_by","value":"pub fn kmerge_by<I, F>(I, F)\n-> KMergeBy<<I::Item as IntoIterator>::IntoIter, F> where I: IntoIterator,\nI::Item: IntoIterator,\nF: KMergePredicate<<<I as IntoIterator>::Item as IntoIterator>::Item>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that merges elements of the contained iterators.","sig":null,"attributes":[{"value":"/ Create an iterator that merges elements of the contained iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263058,"byte_end":263129,"line_start":170,"line_end":170,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263130,"byte_end":263133,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::kmerge_by`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263134,"byte_end":263199,"line_start":172,"line_end":172,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266500,"byte_end":266513,"line_start":13,"line_end":13,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::merge_join::merge_join_by","value":"pub fn merge_join_by<I, J, F>(I, J, F)\n-> MergeJoinBy<I::IntoIter, J::IntoIter, F> where I: IntoIterator,\nJ: IntoIterator, F: FnMut(&I::Item, &J::Item) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266317,"byte_end":266418,"line_start":10,"line_end":10,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266419,"byte_end":266422,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::merge_join_by`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266423,"byte_end":266492,"line_start":12,"line_end":12,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267119,"byte_end":267130,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"MergeJoinBy","qualname":"::merge_join::MergeJoinBy","value":"MergeJoinBy {  }","parent":null,"children":[{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1726}],"decl_id":null,"docs":" An iterator adaptor that merge-joins items from the two base iterators in ascending order.","sig":null,"attributes":[{"value":"/ An iterator adaptor that merge-joins items from the two base iterators in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266851,"byte_end":266945,"line_start":26,"line_end":26,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266946,"byte_end":266949,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See [`.merge_join_by()`](crate::Itertools::merge_join_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":266950,"byte_end":267033,"line_start":28,"line_end":28,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267034,"byte_end":267107,"line_start":29,"line_end":29,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3901},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272182,"byte_end":272192,"line_start":8,"line_end":8,"column_start":5,"column_end":15},"name":"NoElements","qualname":"::minmax::MinMaxResult::NoElements","value":"MinMaxResult::NoElements","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Empty iterator\n","sig":null,"attributes":[{"value":"/ Empty iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272159,"byte_end":272177,"line_start":7,"line_end":7,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3903},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272274,"byte_end":272284,"line_start":11,"line_end":11,"column_start":5,"column_end":15},"name":"OneElement","qualname":"::minmax::MinMaxResult::OneElement","value":"MinMaxResult::OneElement(T)","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" Iterator with one element, so the minimum and maximum are the same\n","sig":null,"attributes":[{"value":"/ Iterator with one element, so the minimum and maximum are the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272199,"byte_end":272269,"line_start":10,"line_end":10,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3906},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272397,"byte_end":272403,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"MinMax","qualname":"::minmax::MinMaxResult::MinMax","value":"MinMaxResult::MinMax(T, T)","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":" More than one element in the iterator, the first element is not larger\n than the second\n","sig":null,"attributes":[{"value":"/ More than one element in the iterator, the first element is not larger","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272294,"byte_end":272368,"line_start":13,"line_end":13,"column_start":5,"column_end":79}},{"value":"/ than the second","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272373,"byte_end":272392,"line_start":14,"line_end":14,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":3899},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272137,"byte_end":272149,"line_start":6,"line_end":6,"column_start":10,"column_end":22},"name":"MinMaxResult","qualname":"::minmax::MinMaxResult","value":"pub enum MinMaxResult<T> { NoElements, OneElement(T), MinMax(T, T), }","parent":null,"children":[{"krate":0,"index":3901},{"krate":0,"index":3903},{"krate":0,"index":3906}],"decl_id":null,"docs":" `MinMaxResult` is an enum returned by `minmax`.","sig":null,"attributes":[{"value":"/ `MinMaxResult` is an enum returned by `minmax`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":271966,"byte_end":272017,"line_start":2,"line_end":2,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272018,"byte_end":272021,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ See [`.minmax()`](crate::Itertools::minmax) for more detail.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272022,"byte_end":272086,"line_start":4,"line_end":4,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273221,"byte_end":273232,"line_start":39,"line_end":39,"column_start":12,"column_end":23},"name":"into_option","qualname":"<MinMaxResult<T>>::into_option","value":"pub fn into_option(Self) -> Option<(T, T)>","parent":null,"children":[],"decl_id":null,"docs":" `into_option` creates an `Option` of type `(T, T)`. The returned `Option`\n has variant `None` if and only if the `MinMaxResult` has variant\n `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.\n If the `MinMaxResult` has variant `OneElement(x)`, performing this\n operation will make one clone of `x`.","sig":null,"attributes":[{"value":"/ `into_option` creates an `Option` of type `(T, T)`. The returned `Option`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272450,"byte_end":272527,"line_start":19,"line_end":19,"column_start":5,"column_end":82}},{"value":"/ has variant `None` if and only if the `MinMaxResult` has variant","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272532,"byte_end":272600,"line_start":20,"line_end":20,"column_start":5,"column_end":73}},{"value":"/ `NoElements`. Otherwise `Some((x, y))` is returned where `x <= y`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272605,"byte_end":272675,"line_start":21,"line_end":21,"column_start":5,"column_end":75}},{"value":"/ If the `MinMaxResult` has variant `OneElement(x)`, performing this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272680,"byte_end":272750,"line_start":22,"line_end":22,"column_start":5,"column_end":75}},{"value":"/ operation will make one clone of `x`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272755,"byte_end":272796,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272801,"byte_end":272804,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272809,"byte_end":272823,"line_start":25,"line_end":25,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272828,"byte_end":272831,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272836,"byte_end":272843,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"/ use itertools::MinMaxResult::{self, NoElements, OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272848,"byte_end":272920,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272925,"byte_end":272928,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ let r: MinMaxResult<i32> = NoElements;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272933,"byte_end":272975,"line_start":30,"line_end":30,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(r.into_option(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272980,"byte_end":273018,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273023,"byte_end":273026,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ let r = OneElement(1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273031,"byte_end":273057,"line_start":33,"line_end":33,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(r.into_option(), Some((1, 1)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273062,"byte_end":273108,"line_start":34,"line_end":34,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273113,"byte_end":273116,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let r = MinMax(1, 2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273121,"byte_end":273146,"line_start":36,"line_end":36,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(r.into_option(), Some((1, 2)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273151,"byte_end":273197,"line_start":37,"line_end":37,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":273202,"byte_end":273209,"line_start":38,"line_end":38,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3924},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276058,"byte_end":276067,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"MultiPeek","qualname":"::multipeek_impl::MultiPeek","value":"MultiPeek {  }","parent":null,"children":[{"krate":0,"index":3926},{"krate":0,"index":3927},{"krate":0,"index":3928}],"decl_id":null,"docs":" See [`multipeek()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multipeek()`] for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":275977,"byte_end":276022,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1767},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276363,"byte_end":276372,"line_start":22,"line_end":22,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::multipeek_impl::multipeek","value":"pub fn multipeek<I>(I) -> MultiPeek<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276163,"byte_end":276237,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276238,"byte_end":276285,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276286,"byte_end":276289,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::multipeek`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276290,"byte_end":276355,"line_start":21,"line_end":21,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276654,"byte_end":276664,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"reset_peek","qualname":"<MultiPeek<I>>::reset_peek","value":"pub fn reset_peek(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the peeking “cursor”\n","sig":null,"attributes":[{"value":"/ Reset the peeking “cursor”","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276608,"byte_end":276642,"line_start":35,"line_end":35,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276994,"byte_end":276998,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"peek","qualname":"<MultiPeek<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like `.next()` with the only difference that it doesn't\n advance itself. `.peek()` can be called multiple times, to peek\n further ahead.\n When `.next()` is called, reset the peeking “cursor”.\n","sig":null,"attributes":[{"value":"/ Works exactly like `.next()` with the only difference that it doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276748,"byte_end":276821,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ advance itself. `.peek()` can be called multiple times, to peek","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276826,"byte_end":276893,"line_start":43,"line_end":43,"column_start":5,"column_end":72}},{"value":"/ further ahead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276898,"byte_end":276916,"line_start":44,"line_end":44,"column_start":5,"column_end":23}},{"value":"/ When `.next()` is called, reset the peeking “cursor”.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276921,"byte_end":276982,"line_start":45,"line_end":45,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3935},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278715,"byte_end":278723,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"PadUsing","qualname":"::pad_tail::PadUsing","value":"PadUsing {  }","parent":null,"children":[{"krate":0,"index":3938},{"krate":0,"index":3939},{"krate":0,"index":3940},{"krate":0,"index":3941}],"decl_id":null,"docs":" An iterator adaptor that pads a sequence to a minimum length by filling\n missing elements using a closure.","sig":null,"attributes":[{"value":"/ An iterator adaptor that pads a sequence to a minimum length by filling","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278375,"byte_end":278450,"line_start":4,"line_end":4,"column_start":1,"column_end":76}},{"value":"/ missing elements using a closure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278451,"byte_end":278488,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278489,"byte_end":278492,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278493,"byte_end":278532,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278533,"byte_end":278536,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.pad_using()`](crate::Itertools::pad_using) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278537,"byte_end":278612,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278630,"byte_end":278703,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":3947},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":280850,"byte_end":280857,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"PeekNth","qualname":"::peek_nth::PeekNth","value":"PeekNth {  }","parent":null,"children":[{"krate":0,"index":3949},{"krate":0,"index":3950}],"decl_id":null,"docs":" See [`peek_nth()`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`peek_nth()`] for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":280770,"byte_end":280814,"line_start":6,"line_end":6,"column_start":1,"column_end":45}}]},{"kind":"Function","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281326,"byte_end":281334,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"peek_nth","qualname":"::peek_nth::peek_nth","value":"pub fn peek_nth<I>(I) -> PeekNth<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`\n method allowing the user to `peek` at a value several iterations forward\n without advancing the base iterator.","sig":null,"attributes":[{"value":"/ A drop-in replacement for [`std::iter::Peekable`] which adds a `peek_nth`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":280936,"byte_end":281013,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ method allowing the user to `peek` at a value several iterations forward","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281014,"byte_end":281090,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ without advancing the base iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281091,"byte_end":281131,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281132,"byte_end":281135,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This differs from `multipeek` in that subsequent calls to `peek` or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281136,"byte_end":281207,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ `peek_nth` will always return the same value until `next` is called","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281208,"byte_end":281279,"line_start":21,"line_end":21,"column_start":1,"column_end":72}},{"value":"/ (making `reset_peek` unnecessary).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281280,"byte_end":281318,"line_start":22,"line_end":22,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281625,"byte_end":281629,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"peek","qualname":"<PeekNth<I>>::peek","value":"pub fn peek(&mut Self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Works exactly like the `peek` method in `std::iter::Peekable`\n","sig":null,"attributes":[{"value":"/ Works exactly like the `peek` method in `std::iter::Peekable`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281548,"byte_end":281613,"line_start":37,"line_end":37,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282454,"byte_end":282462,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"peek_nth","qualname":"<PeekNth<I>>::peek_nth","value":"pub fn peek_nth(&mut Self, usize) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the `nth` value without advancing the iterator.","sig":null,"attributes":[{"value":"/ Returns a reference to the `nth` value without advancing the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281699,"byte_end":281773,"line_start":42,"line_end":42,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281778,"byte_end":281781,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281786,"byte_end":281800,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281805,"byte_end":281808,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281813,"byte_end":281829,"line_start":46,"line_end":46,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281834,"byte_end":281837,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281842,"byte_end":281853,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use itertools::peek_nth;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281858,"byte_end":281886,"line_start":49,"line_end":49,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281891,"byte_end":281894,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ let xs = vec![1,2,3];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281899,"byte_end":281924,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/ let mut iter = peek_nth(xs.iter());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281929,"byte_end":281968,"line_start":52,"line_end":52,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281973,"byte_end":281976,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281981,"byte_end":282025,"line_start":54,"line_end":54,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282030,"byte_end":282068,"line_start":55,"line_end":55,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282073,"byte_end":282076,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ // The iterator does not advance even if we call `peek_nth` multiple times","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282081,"byte_end":282159,"line_start":57,"line_end":57,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(iter.peek_nth(0), Some(&&2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282164,"byte_end":282208,"line_start":58,"line_end":58,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.peek_nth(1), Some(&&3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282213,"byte_end":282257,"line_start":59,"line_end":59,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282262,"byte_end":282300,"line_start":60,"line_end":60,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282305,"byte_end":282308,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ // Calling `peek_nth` past the end of the iterator will return `None`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282313,"byte_end":282386,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(iter.peek_nth(1), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282391,"byte_end":282430,"line_start":63,"line_end":63,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282435,"byte_end":282442,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283832,"byte_end":283843,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"PeekingNext","qualname":"::peeking_take_while::PeekingNext","value":"PeekingNext: Iterator","parent":null,"children":[{"krate":0,"index":1863}],"decl_id":null,"docs":" An iterator that allows peeking at an element before deciding to accept it.","sig":null,"attributes":[{"value":"/ An iterator that allows peeking at an element before deciding to accept it.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283436,"byte_end":283515,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283516,"byte_end":283519,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283520,"byte_end":283591,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283592,"byte_end":283617,"line_start":9,"line_end":9,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283618,"byte_end":283621,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This is implemented by peeking adaptors like peekable and put back,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283622,"byte_end":283693,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ but also by a few iterators that can be peeked natively, like the slice’s","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283694,"byte_end":283773,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ by reference iterator (`std::slice::Iter`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283774,"byte_end":283821,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284027,"byte_end":284039,"line_start":18,"line_end":18,"column_start":8,"column_end":20},"name":"peeking_next","qualname":"::peeking_take_while::PeekingNext::peeking_next","value":"pub fn peeking_next<F>(&mut Self, F) -> Option<Self::Item> where\nF: FnOnce(&Self::Item) -> bool","parent":{"krate":0,"index":1862},"children":[],"decl_id":null,"docs":" Pass a reference to the next iterator element to the closure `accept`;\n if `accept` returns true, return it as the next element,\n else None.\n","sig":null,"attributes":[{"value":"/ Pass a reference to the next iterator element to the closure `accept`;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283861,"byte_end":283935,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ if `accept` returns true, return it as the next element,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283940,"byte_end":284000,"line_start":16,"line_end":16,"column_start":5,"column_end":65}},{"value":"/ else None.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284005,"byte_end":284019,"line_start":17,"line_end":17,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":1877},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285547,"byte_end":285563,"line_start":79,"line_end":79,"column_start":12,"column_end":28},"name":"PeekingTakeWhile","qualname":"::peeking_take_while::PeekingTakeWhile","value":"PeekingTakeWhile {  }","parent":null,"children":[{"krate":0,"index":1881},{"krate":0,"index":1882}],"decl_id":null,"docs":" An iterator adaptor that takes items while a closure returns `true`.","sig":null,"attributes":[{"value":"/ An iterator adaptor that takes items while a closure returns `true`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285287,"byte_end":285359,"line_start":74,"line_end":74,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285360,"byte_end":285363,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ See [`.peeking_take_while()`](crate::Itertools::peeking_take_while)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285364,"byte_end":285435,"line_start":76,"line_end":76,"column_start":1,"column_end":72}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285436,"byte_end":285461,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285462,"byte_end":285535,"line_start":78,"line_end":78,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288250,"byte_end":288262,"line_start":13,"line_end":13,"column_start":12,"column_end":24},"name":"Permutations","qualname":"::permutations::Permutations","value":"Permutations {  }","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1914}],"decl_id":null,"docs":" An iterator adaptor that iterates through all the `k`-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that iterates through all the `k`-permutations of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":287966,"byte_end":288043,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288044,"byte_end":288074,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288075,"byte_end":288078,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See [`.permutations()`](crate::Itertools::permutations) for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288079,"byte_end":288142,"line_start":10,"line_end":10,"column_start":1,"column_end":64}},{"value":"/ more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288143,"byte_end":288164,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288165,"byte_end":288238,"line_start":12,"line_end":12,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296369,"byte_end":296377,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"Powerset","qualname":"::powerset::Powerset","value":"Powerset {  }","parent":null,"children":[{"krate":0,"index":1977},{"krate":0,"index":1978}],"decl_id":null,"docs":" An iterator to iterate through the powerset of the elements from an iterator.","sig":null,"attributes":[{"value":"/ An iterator to iterate through the powerset of the elements from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296120,"byte_end":296201,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296202,"byte_end":296205,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [`.powerset()`](crate::Itertools::powerset) for more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296206,"byte_end":296266,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296267,"byte_end":296283,"line_start":12,"line_end":12,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296284,"byte_end":296357,"line_start":13,"line_end":13,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4033},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298656,"byte_end":298670,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"ProcessResults","qualname":"::process_results_impl::ProcessResults","value":"ProcessResults {  }","parent":null,"children":[{"krate":0,"index":4037},{"krate":0,"index":4038}],"decl_id":null,"docs":" An iterator that produces only the `T` values as long as the\n inner iterator produces `Ok(T)`.","sig":null,"attributes":[{"value":"/ An iterator that produces only the `T` values as long as the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298352,"byte_end":298416,"line_start":2,"line_end":2,"column_start":1,"column_end":65}},{"value":"/ inner iterator produces `Ok(T)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298417,"byte_end":298453,"line_start":3,"line_end":3,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298454,"byte_end":298457,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Used by [`process_results`](crate::process_results), see its docs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298458,"byte_end":298527,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/ for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298528,"byte_end":298553,"line_start":6,"line_end":6,"column_start":1,"column_end":26}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298554,"byte_end":298627,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2007},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300988,"byte_end":301003,"line_start":87,"line_end":87,"column_start":8,"column_end":23},"name":"process_results","qualname":"::process_results_impl::process_results","value":"pub fn process_results<I, F, T, E, R>(I, F) -> Result<R, E> where\nI: IntoIterator<Item = Result<T, E>>,\nF: FnOnce(ProcessResults<, I::IntoIter, E>) -> R","parent":null,"children":[],"decl_id":null,"docs":" “Lift” a function of the values of an iterator so that it can process\n an iterator of `Result` values instead.","sig":null,"attributes":[{"value":"/ “Lift” a function of the values of an iterator so that it can process","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299655,"byte_end":299732,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ an iterator of `Result` values instead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299733,"byte_end":299776,"line_start":53,"line_end":53,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299777,"byte_end":299780,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ `iterable` is an iterator or iterable with `Result<T, E>` elements, where","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299781,"byte_end":299858,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ `T` is the value type and `E` the error type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299859,"byte_end":299908,"line_start":56,"line_end":56,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299909,"byte_end":299912,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ `processor` is a closure that receives an adapted version of the iterable","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299913,"byte_end":299990,"line_start":58,"line_end":58,"column_start":1,"column_end":78}},{"value":"/ as the only argument — the adapted iterator produces elements of type `T`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":299991,"byte_end":300071,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ as long as the original iterator produces `Ok` values.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300072,"byte_end":300130,"line_start":60,"line_end":60,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300131,"byte_end":300134,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ If the original iterable produces an error at any point, the adapted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300135,"byte_end":300207,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/ iterator ends and the `process_results` function will return the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300208,"byte_end":300276,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ error iself.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300277,"byte_end":300293,"line_start":64,"line_end":64,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300294,"byte_end":300297,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Otherwise, the return value from the closure is returned wrapped","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300298,"byte_end":300366,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ inside `Ok`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300367,"byte_end":300383,"line_start":67,"line_end":67,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300384,"byte_end":300387,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300388,"byte_end":300401,"line_start":69,"line_end":69,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300402,"byte_end":300405,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300406,"byte_end":300413,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use itertools::process_results;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300414,"byte_end":300449,"line_start":72,"line_end":72,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300450,"byte_end":300453,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ type R = Result<i32, &'static str>;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300454,"byte_end":300493,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300494,"byte_end":300497,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ let first_values: Vec<R> = vec![Ok(1), Ok(0), Ok(3)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300498,"byte_end":300555,"line_start":76,"line_end":76,"column_start":1,"column_end":58}},{"value":"/ let second_values: Vec<R> = vec![Ok(2), Ok(1), Err(\"overflow\")];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300556,"byte_end":300624,"line_start":77,"line_end":77,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300625,"byte_end":300628,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // “Lift” the iterator .max() method to work on the values in Results using process_results","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300629,"byte_end":300728,"line_start":79,"line_end":79,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300729,"byte_end":300732,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let first_max = process_results(first_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300733,"byte_end":300815,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/ let second_max = process_results(second_values, |iter| iter.max().unwrap_or(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300816,"byte_end":300900,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300901,"byte_end":300904,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(first_max, Ok(3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300905,"byte_end":300938,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/ assert!(second_max.is_err());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300939,"byte_end":300972,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":300973,"byte_end":300980,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4044},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301550,"byte_end":301558,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"PutBackN","qualname":"::put_back_n_impl::PutBackN","value":"PutBackN {  }","parent":null,"children":[{"krate":0,"index":4046},{"krate":0,"index":4047}],"decl_id":null,"docs":" An iterator adaptor that allows putting multiple\n items in front of the iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows putting multiple","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301382,"byte_end":301434,"line_start":5,"line_end":5,"column_start":1,"column_end":53}},{"value":"/ items in front of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301435,"byte_end":301470,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301471,"byte_end":301474,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301475,"byte_end":301514,"line_start":8,"line_end":8,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":2021},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301761,"byte_end":301771,"line_start":19,"line_end":19,"column_start":8,"column_end":18},"name":"put_back_n","qualname":"::put_back_n_impl::put_back_n","value":"pub fn put_back_n<I>(I) -> PutBackN<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator where you can put back multiple values to the front\n of the iteration.","sig":null,"attributes":[{"value":"/ Create an iterator where you can put back multiple values to the front","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301613,"byte_end":301687,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the iteration.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301688,"byte_end":301709,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301710,"byte_end":301713,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `I::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301714,"byte_end":301753,"line_start":18,"line_end":18,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2025},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302354,"byte_end":302362,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"put_back","qualname":"<PutBackN<I>>::put_back","value":"pub fn put_back(&mut Self, I::Item)","parent":null,"children":[],"decl_id":null,"docs":" Puts x in front of the iterator.\n The values are yielded in order of the most recently put back\n values first.","sig":null,"attributes":[{"value":"/ Puts x in front of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301962,"byte_end":301998,"line_start":29,"line_end":29,"column_start":5,"column_end":41}},{"value":"/ The values are yielded in order of the most recently put back","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302003,"byte_end":302068,"line_start":30,"line_end":30,"column_start":5,"column_end":70}},{"value":"/ values first.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302073,"byte_end":302090,"line_start":31,"line_end":31,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302095,"byte_end":302098,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302103,"byte_end":302114,"line_start":33,"line_end":33,"column_start":5,"column_end":16}},{"value":"/ use itertools::put_back_n;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302119,"byte_end":302149,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302154,"byte_end":302157,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ let mut it = put_back_n(1..5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302162,"byte_end":302196,"line_start":36,"line_end":36,"column_start":5,"column_end":39}},{"value":"/ it.next();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302201,"byte_end":302215,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/ it.put_back(1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302220,"byte_end":302239,"line_start":38,"line_end":38,"column_start":5,"column_end":24}},{"value":"/ it.put_back(0);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302244,"byte_end":302263,"line_start":39,"line_end":39,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302268,"byte_end":302271,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ assert!(itertools::equal(it, 0..5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302276,"byte_end":302316,"line_start":41,"line_end":41,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302321,"byte_end":302328,"line_start":42,"line_end":42,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302333,"byte_end":302342,"line_start":43,"line_end":43,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":4054},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":302951,"byte_end":302957,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"RcIter","qualname":"::rciter_impl::RcIter","value":"RcIter { rciter }","parent":null,"children":[{"krate":0,"index":4056}],"decl_id":null,"docs":" A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.\n","sig":null,"attributes":[{"value":"/ A wrapper for `Rc<RefCell<I>>`, that implements the `Iterator` trait.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":302849,"byte_end":302922,"line_start":6,"line_end":6,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":4056},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":302999,"byte_end":303005,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"rciter","qualname":"::rciter_impl::RcIter::rciter","value":"std::rc::Rc<std::cell::RefCell<I>>","parent":{"krate":0,"index":4054},"children":[],"decl_id":null,"docs":" The boxed iterator.\n","sig":null,"attributes":[{"value":"/ The boxed iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":302967,"byte_end":302990,"line_start":9,"line_end":9,"column_start":5,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":2046},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304274,"byte_end":304280,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"rciter","qualname":"::rciter_impl::rciter","value":"pub fn rciter<I>(I) -> RcIter<I::IntoIter> where I: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator inside a `Rc<RefCell<_>>` wrapper.","sig":null,"attributes":[{"value":"/ Return an iterator inside a `Rc<RefCell<_>>` wrapper.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303026,"byte_end":303083,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303084,"byte_end":303087,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The returned `RcIter` can be cloned, and each clone will refer back to the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303088,"byte_end":303166,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ same original iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303167,"byte_end":303194,"line_start":16,"line_end":16,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303195,"byte_end":303198,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `RcIter` allows doing interesting things like using `.zip()` on an iterator with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303199,"byte_end":303283,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ itself, at the cost of runtime borrow checking which may have a performance","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303284,"byte_end":303363,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ penalty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303364,"byte_end":303376,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303377,"byte_end":303380,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303381,"byte_end":303423,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303424,"byte_end":303427,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303428,"byte_end":303435,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ use itertools::rciter;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303436,"byte_end":303462,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ use itertools::zip;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303463,"byte_end":303486,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303487,"byte_end":303490,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ // In this example a range iterator is created and we iterate it using","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303491,"byte_end":303565,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ // three separate handles (two of them given to zip).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303566,"byte_end":303623,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ // We also use the IntoIterator implementation for `&RcIter`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303624,"byte_end":303689,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303690,"byte_end":303693,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut iter = rciter(0..9);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303694,"byte_end":303726,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/ let mut z = zip(&iter, &iter);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303727,"byte_end":303761,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303762,"byte_end":303765,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(z.next(), Some((0, 1)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303766,"byte_end":303805,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((2, 3)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303806,"byte_end":303845,"line_start":36,"line_end":36,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), Some((4, 5)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303846,"byte_end":303885,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(iter.next(), Some(6));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303886,"byte_end":303923,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(z.next(), Some((7, 8)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303924,"byte_end":303963,"line_start":39,"line_end":39,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(z.next(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303964,"byte_end":303995,"line_start":40,"line_end":40,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":303996,"byte_end":304003,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304004,"byte_end":304007,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ **Panics** in iterator methods if a borrow error is encountered in the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304008,"byte_end":304082,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ iterator methods. It can only happen if the `RcIter` is reentered in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304083,"byte_end":304155,"line_start":44,"line_end":44,"column_start":1,"column_end":73}},{"value":"/ `.next()`, i.e. if it somehow participates in an “iterator knot”","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304156,"byte_end":304228,"line_start":45,"line_end":45,"column_start":1,"column_end":69}},{"value":"/ where it is an adaptor of itself.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304229,"byte_end":304266,"line_start":46,"line_end":46,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":4061},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305814,"byte_end":305821,"line_start":8,"line_end":8,"column_start":12,"column_end":19},"name":"RepeatN","qualname":"::repeatn::RepeatN","value":"RepeatN {  }","parent":null,"children":[{"krate":0,"index":4063},{"krate":0,"index":4064}],"decl_id":null,"docs":" An iterator that produces *n* repetitions of an element.","sig":null,"attributes":[{"value":"/ An iterator that produces *n* repetitions of an element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305586,"byte_end":305646,"line_start":3,"line_end":3,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305647,"byte_end":305650,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`repeat_n()`](crate::repeat_n) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305651,"byte_end":305712,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305713,"byte_end":305778,"line_start":6,"line_end":6,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2072},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305938,"byte_end":305946,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"repeat_n","qualname":"::repeatn::repeat_n","value":"pub fn repeat_n<A>(A, usize) -> RepeatN<A> where A: Clone","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator that produces `n` repetitions of `element`.\n","sig":null,"attributes":[{"value":"/ Create an iterator that produces `n` repetitions of `element`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":305864,"byte_end":305930,"line_start":13,"line_end":13,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":4071},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310062,"byte_end":310072,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"RepeatCall","qualname":"::sources::RepeatCall","value":"RepeatCall {  }","parent":null,"children":[{"krate":0,"index":4073}],"decl_id":null,"docs":" See [`repeat_call`](crate::repeat_call) for more information.\n","sig":null,"attributes":[{"value":"/ See [`repeat_call`](crate::repeat_call) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":309901,"byte_end":309966,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":309984,"byte_end":310050,"line_start":10,"line_end":10,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310831,"byte_end":310842,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"repeat_call","qualname":"::sources::repeat_call","value":"pub fn repeat_call<F, A>(F) -> RepeatCall<F> where F: FnMut() -> A","parent":null,"children":[],"decl_id":null,"docs":" An iterator source that produces elements indefinitely by calling\n a given closure.","sig":null,"attributes":[{"value":"/ An iterator source that produces elements indefinitely by calling","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310170,"byte_end":310239,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ a given closure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310240,"byte_end":310260,"line_start":21,"line_end":21,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310261,"byte_end":310264,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is the return type of the closure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310265,"byte_end":310325,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310326,"byte_end":310329,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310330,"byte_end":310337,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use itertools::repeat_call;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310338,"byte_end":310369,"line_start":26,"line_end":26,"column_start":1,"column_end":32}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310370,"byte_end":310399,"line_start":27,"line_end":27,"column_start":1,"column_end":30}},{"value":"/ use std::collections::BinaryHeap;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310400,"byte_end":310437,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310438,"byte_end":310441,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let mut heap = BinaryHeap::from(vec![2, 5, 3, 7, 8]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310442,"byte_end":310499,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310500,"byte_end":310503,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // extract each element in sorted order","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310504,"byte_end":310547,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/ for element in repeat_call(|| heap.pop()).while_some() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310548,"byte_end":310608,"line_start":33,"line_end":33,"column_start":1,"column_end":61}},{"value":"/     print!(\"{}\", element);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310609,"byte_end":310639,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310640,"byte_end":310645,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310646,"byte_end":310649,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310650,"byte_end":310678,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/     repeat_call(|| 1).take(5),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310679,"byte_end":310713,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/     vec![1, 1, 1, 1, 1]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310714,"byte_end":310741,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310742,"byte_end":310748,"line_start":40,"line_end":40,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310749,"byte_end":310756,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"deprecated(note = \"Use std repeat_with() instead\", since = \"0.8.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310757,"byte_end":310823,"line_start":42,"line_end":42,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":2127},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312446,"byte_end":312452,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"unfold","qualname":"::sources::unfold","value":"pub fn unfold<A, St, F>(St, F) -> Unfold<St, F> where F: FnMut(&mut St) ->\nOption<A>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new unfold source with the specified closure as the \"iterator\n function\" and an initial state to eventually pass to the closure","sig":null,"attributes":[{"value":"/ Creates a new unfold source with the specified closure as the \"iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311216,"byte_end":311291,"line_start":64,"line_end":64,"column_start":1,"column_end":76}},{"value":"/ function\" and an initial state to eventually pass to the closure","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311292,"byte_end":311360,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311361,"byte_end":311364,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ `unfold` is a general iterator builder: it has a mutable state value,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311365,"byte_end":311438,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ and a closure with access to the state that produces the next value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311439,"byte_end":311511,"line_start":68,"line_end":68,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311512,"byte_end":311515,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ This more or less equivalent to a regular struct with an [`Iterator`]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311516,"byte_end":311589,"line_start":70,"line_end":70,"column_start":1,"column_end":74}},{"value":"/ implementation, and is useful for one-off iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311590,"byte_end":311646,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311647,"byte_end":311650,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311651,"byte_end":311658,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ // an iterator that yields sequential Fibonacci numbers,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311659,"byte_end":311719,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/ // and stops at the maximum representable value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311720,"byte_end":311772,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311773,"byte_end":311776,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ use itertools::unfold;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311777,"byte_end":311803,"line_start":77,"line_end":77,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311804,"byte_end":311807,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ let mut fibonacci = unfold((1u32, 1u32), |(x1, x2)| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311808,"byte_end":311865,"line_start":79,"line_end":79,"column_start":1,"column_end":58}},{"value":"/     // Attempt to get the next Fibonacci number","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311866,"byte_end":311917,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/     let next = x1.saturating_add(*x2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311918,"byte_end":311960,"line_start":81,"line_end":81,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311961,"byte_end":311964,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/     // Shift left: ret <- x1 <- x2 <- next","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":311965,"byte_end":312011,"line_start":83,"line_end":83,"column_start":1,"column_end":47}},{"value":"/     let ret = *x1;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312012,"byte_end":312034,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/     *x1 = *x2;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312035,"byte_end":312053,"line_start":85,"line_end":85,"column_start":1,"column_end":19}},{"value":"/     *x2 = next;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312054,"byte_end":312073,"line_start":86,"line_end":86,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312074,"byte_end":312077,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/     // If addition has saturated at the maximum, we are finished","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312078,"byte_end":312146,"line_start":88,"line_end":88,"column_start":1,"column_end":69}},{"value":"/     if ret == *x1 && ret > 1 {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312147,"byte_end":312181,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/         None","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312182,"byte_end":312198,"line_start":90,"line_end":90,"column_start":1,"column_end":17}},{"value":"/     } else {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312199,"byte_end":312215,"line_start":91,"line_end":91,"column_start":1,"column_end":17}},{"value":"/         Some(ret)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312216,"byte_end":312237,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312238,"byte_end":312247,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312248,"byte_end":312255,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312256,"byte_end":312259,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(fibonacci.by_ref().take(8),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312260,"byte_end":312315,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/                         vec![1, 1, 2, 3, 5, 8, 13, 21]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312316,"byte_end":312376,"line_start":97,"line_end":97,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(fibonacci.last(), Some(2_971_215_073))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312377,"byte_end":312430,"line_start":98,"line_end":98,"column_start":1,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312431,"byte_end":312438,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4079},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312871,"byte_end":312877,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"Unfold","qualname":"::sources::Unfold","value":"Unfold { state }","parent":null,"children":[{"krate":0,"index":4082},{"krate":0,"index":4083}],"decl_id":null,"docs":" See [`unfold`](crate::unfold) for more information.\n","sig":null,"attributes":[{"value":"/ See [`unfold`](crate::unfold) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312721,"byte_end":312776,"line_start":115,"line_end":115,"column_start":1,"column_end":56}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312794,"byte_end":312859,"line_start":117,"line_end":117,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":4083},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312985,"byte_end":312990,"line_start":121,"line_end":121,"column_start":9,"column_end":14},"name":"state","qualname":"::sources::Unfold::state","value":"St","parent":{"krate":0,"index":4079},"children":[],"decl_id":null,"docs":" Internal state that will be passed to the closure on the next iteration\n","sig":null,"attributes":[{"value":"/ Internal state that will be passed to the closure on the next iteration","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312901,"byte_end":312976,"line_start":120,"line_end":120,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":4088},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313496,"byte_end":313503,"line_start":141,"line_end":141,"column_start":12,"column_end":19},"name":"Iterate","qualname":"::sources::Iterate","value":"Iterate {  }","parent":null,"children":[{"krate":0,"index":4091},{"krate":0,"index":4092}],"decl_id":null,"docs":" An iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ An iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313208,"byte_end":313285,"line_start":135,"line_end":135,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313286,"byte_end":313289,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`iterate()`](crate::iterate) function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313290,"byte_end":313365,"line_start":137,"line_end":137,"column_start":1,"column_end":76}},{"value":"/ See its documentation for more.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313366,"byte_end":313401,"line_start":138,"line_end":138,"column_start":1,"column_end":36}},{"value":"must_use = \"iterators are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313419,"byte_end":313484,"line_start":140,"line_end":140,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314260,"byte_end":314267,"line_start":176,"line_end":176,"column_start":8,"column_end":15},"name":"iterate","qualname":"::sources::iterate","value":"pub fn iterate<St, F>(St, F) -> Iterate<St, F> where F: FnMut(&St) -> St","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that infinitely applies function to value and yields results.","sig":null,"attributes":[{"value":"/ Creates a new iterator that infinitely applies function to value and yields results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314028,"byte_end":314116,"line_start":169,"line_end":169,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314117,"byte_end":314120,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314121,"byte_end":314128,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/ use itertools::iterate;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314129,"byte_end":314156,"line_start":172,"line_end":172,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314157,"byte_end":314160,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ itertools::assert_equal(iterate(1, |&i| i * 3).take(5), vec![1, 3, 9, 27, 81]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314161,"byte_end":314244,"line_start":174,"line_end":174,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":314245,"byte_end":314252,"line_start":175,"line_end":175,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4108},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":314976,"byte_end":314979,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Tee","qualname":"::tee::Tee","value":"Tee {  }","parent":null,"children":[{"krate":0,"index":4110},{"krate":0,"index":4111}],"decl_id":null,"docs":" One half of an iterator pair where both return the same elements.","sig":null,"attributes":[{"value":"/ One half of an iterator pair where both return the same elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":314736,"byte_end":314805,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":314806,"byte_end":314809,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [`.tee()`](crate::Itertools::tee) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":314810,"byte_end":314873,"line_start":18,"line_end":18,"column_start":1,"column_end":64}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":314874,"byte_end":314947,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317047,"byte_end":317063,"line_start":15,"line_end":15,"column_start":11,"column_end":27},"name":"HomogeneousTuple","qualname":"::tuple_impl::HomogeneousTuple","value":"HomogeneousTuple: TupleCollect","parent":null,"children":[],"decl_id":null,"docs":" Implemented for homogeneous tuples of size up to 12.\n","sig":null,"attributes":[{"value":"/ Implemented for homogeneous tuples of size up to 12.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":316980,"byte_end":317036,"line_start":14,"line_end":14,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":4115},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317299,"byte_end":317310,"line_start":26,"line_end":26,"column_start":12,"column_end":23},"name":"TupleBuffer","qualname":"::tuple_impl::TupleBuffer","value":"TupleBuffer {  }","parent":null,"children":[{"krate":0,"index":4117},{"krate":0,"index":4118}],"decl_id":null,"docs":" An iterator over a incomplete tuple.","sig":null,"attributes":[{"value":"/ An iterator over a incomplete tuple.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317136,"byte_end":317176,"line_start":21,"line_end":21,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317177,"byte_end":317180,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317181,"byte_end":317232,"line_start":23,"line_end":23,"column_start":1,"column_end":52}},{"value":"/ [`Tuples::into_buffer()`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317233,"byte_end":317263,"line_start":24,"line_end":24,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4125},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318566,"byte_end":318572,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"Tuples","qualname":"::tuple_impl::Tuples","value":"Tuples {  }","parent":null,"children":[{"krate":0,"index":4128},{"krate":0,"index":4129}],"decl_id":null,"docs":" An iterator that groups the items in tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator that groups the items in tuples of a specific size.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318315,"byte_end":318382,"line_start":77,"line_end":77,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318383,"byte_end":318386,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ See [`.tuples()`](crate::Itertools::tuples) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318387,"byte_end":318456,"line_start":79,"line_end":79,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318481,"byte_end":318554,"line_start":81,"line_end":81,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319636,"byte_end":319647,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Tuples<I, T>>::into_buffer","value":"pub fn into_buffer(Self) -> TupleBuffer<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a buffer with the produced items that was not enough to be grouped in a tuple.","sig":null,"attributes":[{"value":"/ Return a buffer with the produced items that was not enough to be grouped in a tuple.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319267,"byte_end":319356,"line_start":116,"line_end":116,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319361,"byte_end":319364,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319369,"byte_end":319376,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319381,"byte_end":319410,"line_start":119,"line_end":119,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319415,"byte_end":319418,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..5).tuples();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319423,"byte_end":319458,"line_start":121,"line_end":121,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(Some((0, 1, 2)), iter.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319463,"byte_end":319508,"line_start":122,"line_end":122,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(None, iter.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319513,"byte_end":319547,"line_start":123,"line_end":123,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(vec![3, 4], iter.into_buffer());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319552,"byte_end":319612,"line_start":124,"line_end":124,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319617,"byte_end":319624,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":4138},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":320005,"byte_end":320017,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"TupleWindows","qualname":"::tuple_impl::TupleWindows","value":"TupleWindows {  }","parent":null,"children":[{"krate":0,"index":4141},{"krate":0,"index":4142}],"decl_id":null,"docs":" An iterator over all contiguous windows that produces tuples of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all contiguous windows that produces tuples of a specific size.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319719,"byte_end":319803,"line_start":132,"line_end":132,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319804,"byte_end":319807,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ See [`.tuple_windows()`](crate::Itertools::tuple_windows) for more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319808,"byte_end":319878,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/ information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319879,"byte_end":319895,"line_start":135,"line_end":135,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319896,"byte_end":319969,"line_start":136,"line_end":136,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4151},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321866,"byte_end":321886,"line_start":205,"line_end":205,"column_start":12,"column_end":32},"name":"CircularTupleWindows","qualname":"::tuple_impl::CircularTupleWindows","value":"CircularTupleWindows {  }","parent":null,"children":[{"krate":0,"index":4154},{"krate":0,"index":4155}],"decl_id":null,"docs":" An iterator over all windows,wrapping back to the first elements when the\n window would otherwise exceed the length of the iterator, producing tuples\n of a specific size.","sig":null,"attributes":[{"value":"/ An iterator over all windows,wrapping back to the first elements when the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321473,"byte_end":321550,"line_start":197,"line_end":197,"column_start":1,"column_end":78}},{"value":"/ window would otherwise exceed the length of the iterator, producing tuples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321551,"byte_end":321629,"line_start":198,"line_end":198,"column_start":1,"column_end":79}},{"value":"/ of a specific size.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321630,"byte_end":321653,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321654,"byte_end":321657,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See [`.circular_tuple_windows()`](crate::Itertools::circular_tuple_windows) for more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321658,"byte_end":321746,"line_start":201,"line_end":201,"column_start":1,"column_end":89}},{"value":"/ information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321747,"byte_end":321763,"line_start":202,"line_end":202,"column_start":1,"column_end":17}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321764,"byte_end":321837,"line_start":203,"line_end":203,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322704,"byte_end":322716,"line_start":239,"line_end":239,"column_start":11,"column_end":23},"name":"TupleCollect","qualname":"::tuple_impl::TupleCollect","value":"TupleCollect: Sized","parent":null,"children":[{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2244},{"krate":0,"index":2246},{"krate":0,"index":2247}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322735,"byte_end":322739,"line_start":240,"line_end":240,"column_start":10,"column_end":14},"name":"Item","qualname":"::tuple_impl::TupleCollect::Item","value":"type Item;","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2241},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322750,"byte_end":322756,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"name":"Buffer","qualname":"::tuple_impl::TupleCollect::Buffer","value":"type Buffer: Default + AsRef<[Option<Self::Item>]> + AsMut<[Option<Self::Item>]>;","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322835,"byte_end":322852,"line_start":243,"line_end":243,"column_start":8,"column_end":25},"name":"collect_from_iter","qualname":"::tuple_impl::TupleCollect::collect_from_iter","value":"pub fn collect_from_iter<I>(I, &mut Self::Buffer) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322963,"byte_end":322987,"line_start":246,"line_end":246,"column_start":8,"column_end":32},"name":"collect_from_iter_no_buf","qualname":"::tuple_impl::TupleCollect::collect_from_iter_no_buf","value":"pub fn collect_from_iter_no_buf<I>(I) -> Option<Self> where\nI: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":323074,"byte_end":323083,"line_start":249,"line_end":249,"column_start":8,"column_end":17},"name":"num_items","qualname":"::tuple_impl::TupleCollect::num_items","value":"pub fn num_items() -> usize","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2247},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":323104,"byte_end":323119,"line_start":251,"line_end":251,"column_start":8,"column_end":23},"name":"left_shift_push","qualname":"::tuple_impl::TupleCollect::left_shift_push","value":"pub fn left_shift_push(&mut Self, Self::Item)","parent":{"krate":0,"index":2239},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4340},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":325698,"byte_end":325710,"line_start":10,"line_end":10,"column_start":16,"column_end":28},"name":"DuplicatesBy","qualname":"::duplicates_impl::private::DuplicatesBy","value":"DuplicatesBy {  }","parent":null,"children":[{"krate":0,"index":4344},{"krate":0,"index":4345}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":325609,"byte_end":325682,"line_start":9,"line_end":9,"column_start":5,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329036,"byte_end":329045,"line_start":118,"line_end":118,"column_start":15,"column_end":24},"name":"KeyMethod","qualname":"::duplicates_impl::private::KeyMethod","value":"KeyMethod<K, V>","parent":null,"children":[{"krate":0,"index":2297},{"krate":0,"index":2298}],"decl_id":null,"docs":" A keying method for use with `DuplicatesBy`\n","sig":null,"attributes":[{"value":"/ A keying method for use with `DuplicatesBy`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":328974,"byte_end":329021,"line_start":117,"line_end":117,"column_start":5,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":2297},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329067,"byte_end":329076,"line_start":119,"line_end":119,"column_start":14,"column_end":23},"name":"Container","qualname":"::duplicates_impl::private::KeyMethod::Container","value":"type Container: KeyXorValue<K, V>;","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329109,"byte_end":329113,"line_start":121,"line_end":121,"column_start":12,"column_end":16},"name":"make","qualname":"::duplicates_impl::private::KeyMethod::make","value":"pub fn make(&mut Self, V) -> Self::Container","parent":{"krate":0,"index":2294},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4362},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329281,"byte_end":329285,"line_start":126,"line_end":126,"column_start":16,"column_end":20},"name":"ById","qualname":"::duplicates_impl::private::ById","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply the identity function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply the identity function to elements before checking them for equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329166,"byte_end":329244,"line_start":124,"line_end":124,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329563,"byte_end":329567,"line_start":136,"line_end":136,"column_start":16,"column_end":20},"name":"ByFn","qualname":"::duplicates_impl::private::ByFn","value":"","parent":null,"children":[],"decl_id":null,"docs":" Apply a user-supplied function to elements before checking them for equality.\n","sig":null,"attributes":[{"value":"/ Apply a user-supplied function to elements before checking them for equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329466,"byte_end":329547,"line_start":135,"line_end":135,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":4367},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330255,"byte_end":330263,"line_start":160,"line_end":160,"column_start":16,"column_end":24},"name":"KeyValue","qualname":"::duplicates_impl::private::KeyValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":4377},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330554,"byte_end":330563,"line_start":174,"line_end":174,"column_start":16,"column_end":25},"name":"JustValue","qualname":"::duplicates_impl::private::JustValue","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2332},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330964,"byte_end":330976,"line_start":191,"line_end":191,"column_start":10,"column_end":22},"name":"DuplicatesBy","qualname":"::duplicates_impl::DuplicatesBy","value":"private::DuplicatesBy<I, V, private::ByFn<F>>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter for duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter for duplicate elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330809,"byte_end":330866,"line_start":188,"line_end":188,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330867,"byte_end":330870,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates_by()`](crate::Itertools::duplicates_by) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330871,"byte_end":330954,"line_start":190,"line_end":190,"column_start":1,"column_end":84}}]},{"kind":"Type","id":{"krate":0,"index":2340},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":331426,"byte_end":331436,"line_start":206,"line_end":206,"column_start":10,"column_end":20},"name":"Duplicates","qualname":"::duplicates_impl::Duplicates","value":"private::DuplicatesBy<I, <I as Iterator>::Item, private::ById>","parent":null,"children":[],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":331277,"byte_end":331334,"line_start":203,"line_end":203,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":331335,"byte_end":331338,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ See [`.duplicates()`](crate::Itertools::duplicates) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":331339,"byte_end":331416,"line_start":205,"line_end":205,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":4384},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":332061,"byte_end":332069,"line_start":12,"line_end":12,"column_start":12,"column_end":20},"name":"UniqueBy","qualname":"::unique_impl::UniqueBy","value":"UniqueBy {  }","parent":null,"children":[{"krate":0,"index":4388},{"krate":0,"index":4389},{"krate":0,"index":4390}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":331824,"byte_end":331881,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":331882,"byte_end":331885,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ See [`.unique_by()`](crate::Itertools::unique) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":331886,"byte_end":331958,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":331976,"byte_end":332049,"line_start":11,"line_end":11,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4397},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335975,"byte_end":335981,"line_start":157,"line_end":157,"column_start":12,"column_end":18},"name":"Unique","qualname":"::unique_impl::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":4399}],"decl_id":null,"docs":" An iterator adapter to filter out duplicate elements.","sig":null,"attributes":[{"value":"/ An iterator adapter to filter out duplicate elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335741,"byte_end":335798,"line_start":152,"line_end":152,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335799,"byte_end":335802,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ See [`.unique()`](crate::Itertools::unique) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335803,"byte_end":335872,"line_start":154,"line_end":154,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335890,"byte_end":335963,"line_start":156,"line_end":156,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2406},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336993,"byte_end":337003,"line_start":21,"line_end":21,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::unziptuple::multiunzip","value":"pub fn multiunzip<FromI, I>(I) -> FromI where I: IntoIterator,\nI::IntoIter: MultiUnzip<FromI>","parent":null,"children":[],"decl_id":null,"docs":" Converts an iterator of tuples into a tuple of containers.","sig":null,"attributes":[{"value":"/ Converts an iterator of tuples into a tuple of containers.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336412,"byte_end":336474,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336475,"byte_end":336478,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336479,"byte_end":336577,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ column.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336578,"byte_end":336589,"line_start":4,"line_end":4,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336590,"byte_end":336593,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This function is, in some sense, the opposite of [`multizip`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336594,"byte_end":336660,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336661,"byte_end":336664,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336665,"byte_end":336672,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use itertools::multiunzip;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336673,"byte_end":336703,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336704,"byte_end":336707,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ let inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336708,"byte_end":336763,"line_start":11,"line_end":11,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336764,"byte_end":336767,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ let (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = multiunzip(inputs);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336768,"byte_end":336833,"line_start":13,"line_end":13,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336834,"byte_end":336837,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(a, vec![1, 4, 7]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336838,"byte_end":336871,"line_start":15,"line_end":15,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(b, vec![2, 5, 8]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336872,"byte_end":336905,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(c, vec![3, 6, 9]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336906,"byte_end":336939,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336940,"byte_end":336947,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336948,"byte_end":336951,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ [`multizip`]: crate::multizip","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":336952,"byte_end":336985,"line_start":20,"line_end":20,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337284,"byte_end":337294,"line_start":32,"line_end":32,"column_start":11,"column_end":21},"name":"MultiUnzip","qualname":"::unziptuple::MultiUnzip","value":"MultiUnzip<FromI>: Iterator","parent":null,"children":[{"krate":0,"index":2411}],"decl_id":null,"docs":" An iterator that can be unzipped into multiple collections.","sig":null,"attributes":[{"value":"/ An iterator that can be unzipped into multiple collections.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337128,"byte_end":337191,"line_start":29,"line_end":29,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337192,"byte_end":337195,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See [`.multiunzip()`](crate::Itertools::multiunzip) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337196,"byte_end":337273,"line_start":31,"line_end":31,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337376,"byte_end":337386,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::unziptuple::MultiUnzip::multiunzip","value":"pub fn multiunzip(Self) -> FromI","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Unzip this iterator into multiple collections.\n","sig":null,"attributes":[{"value":"/ Unzip this iterator into multiple collections.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337318,"byte_end":337368,"line_start":33,"line_end":33,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340298,"byte_end":340310,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"WithPosition","qualname":"::with_position::WithPosition","value":"WithPosition {  }","parent":null,"children":[{"krate":0,"index":2426},{"krate":0,"index":2427}],"decl_id":null,"docs":" An iterator adaptor that wraps each element in an [`Position`].","sig":null,"attributes":[{"value":"/ An iterator adaptor that wraps each element in an [`Position`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340003,"byte_end":340070,"line_start":3,"line_end":3,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340071,"byte_end":340074,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Iterator element type is `Position<I::Item>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340075,"byte_end":340124,"line_start":5,"line_end":5,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340125,"byte_end":340128,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340129,"byte_end":340212,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340213,"byte_end":340286,"line_start":8,"line_end":8,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4615},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341057,"byte_end":341062,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"First","qualname":"::with_position::Position::First","value":"Position::First(T)","parent":{"krate":0,"index":4613},"children":[],"decl_id":null,"docs":" This is the first element.\n","sig":null,"attributes":[{"value":"/ This is the first element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341022,"byte_end":341052,"line_start":39,"line_end":39,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4618},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341127,"byte_end":341133,"line_start":42,"line_end":42,"column_start":5,"column_end":11},"name":"Middle","qualname":"::with_position::Position::Middle","value":"Position::Middle(T)","parent":{"krate":0,"index":4613},"children":[],"decl_id":null,"docs":" This is neither the first nor the last element.\n","sig":null,"attributes":[{"value":"/ This is neither the first nor the last element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341071,"byte_end":341122,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4621},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341176,"byte_end":341180,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"Last","qualname":"::with_position::Position::Last","value":"Position::Last(T)","parent":{"krate":0,"index":4613},"children":[],"decl_id":null,"docs":" This is the last element.\n","sig":null,"attributes":[{"value":"/ This is the last element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341142,"byte_end":341171,"line_start":43,"line_end":43,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4624},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341223,"byte_end":341227,"line_start":46,"line_end":46,"column_start":5,"column_end":9},"name":"Only","qualname":"::with_position::Position::Only","value":"Position::Only(T)","parent":{"krate":0,"index":4613},"children":[],"decl_id":null,"docs":" This is the only element.\n","sig":null,"attributes":[{"value":"/ This is the only element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341189,"byte_end":341218,"line_start":45,"line_end":45,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":4613},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341004,"byte_end":341012,"line_start":38,"line_end":38,"column_start":10,"column_end":18},"name":"Position","qualname":"::with_position::Position","value":"pub enum Position<T> { First(T), Middle(T), Last(T), Only(T), }","parent":null,"children":[{"krate":0,"index":4615},{"krate":0,"index":4618},{"krate":0,"index":4621},{"krate":0,"index":4624}],"decl_id":null,"docs":" A value yielded by `WithPosition`.\n Indicates the position of this element in the iterator results.","sig":null,"attributes":[{"value":"/ A value yielded by `WithPosition`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340759,"byte_end":340797,"line_start":33,"line_end":33,"column_start":1,"column_end":39}},{"value":"/ Indicates the position of this element in the iterator results.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340798,"byte_end":340865,"line_start":34,"line_end":34,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340866,"byte_end":340869,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See [`.with_position()`](crate::Itertools::with_position) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340870,"byte_end":340953,"line_start":36,"line_end":36,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2434},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341300,"byte_end":341310,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Position<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the inner value.\n","sig":null,"attributes":[{"value":"/ Return the inner value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341261,"byte_end":341288,"line_start":50,"line_end":50,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4641},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343160,"byte_end":343165,"line_start":8,"line_end":8,"column_start":12,"column_end":17},"name":"ZipEq","qualname":"::zip_eq_impl::ZipEq","value":"ZipEq {  }","parent":null,"children":[{"krate":0,"index":4644},{"krate":0,"index":4645}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":342911,"byte_end":342976,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":342977,"byte_end":342980,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_eq()`](crate::Itertools::zip_eq) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":342981,"byte_end":343050,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343075,"byte_end":343148,"line_start":7,"line_end":7,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2448},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343576,"byte_end":343582,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::zip_eq_impl::zip_eq","value":"pub fn zip_eq<I, J>(I, J) -> ZipEq<I::IntoIter, J::IntoIter> where\nI: IntoIterator, J: IntoIterator","parent":null,"children":[],"decl_id":null,"docs":" Iterate `i` and `j` in lock step.","sig":null,"attributes":[{"value":"/ Iterate `i` and `j` in lock step.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343197,"byte_end":343234,"line_start":13,"line_end":13,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343235,"byte_end":343238,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Panics** if the iterators are not of the same length.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343239,"byte_end":343298,"line_start":15,"line_end":15,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343299,"byte_end":343302,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Itertools::zip_eq`](crate::Itertools::zip_eq).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343303,"byte_end":343391,"line_start":17,"line_end":17,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343392,"byte_end":343395,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343396,"byte_end":343403,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use itertools::zip_eq;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343404,"byte_end":343430,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343431,"byte_end":343434,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let data = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343435,"byte_end":343466,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/ for (a, b) in zip_eq(&data[..data.len() - 1], &data[1..]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343467,"byte_end":343530,"line_start":23,"line_end":23,"column_start":1,"column_end":64}},{"value":"/     /* loop body */","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343531,"byte_end":343554,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343555,"byte_end":343560,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343561,"byte_end":343568,"line_start":26,"line_end":26,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":4654},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":345018,"byte_end":345028,"line_start":17,"line_end":17,"column_start":12,"column_end":22},"name":"ZipLongest","qualname":"::zip_longest::ZipLongest","value":"ZipLongest {  }","parent":null,"children":[{"krate":0,"index":4657},{"krate":0,"index":4658}],"decl_id":null,"docs":" An iterator which iterates two other iterators simultaneously","sig":null,"attributes":[{"value":"/ An iterator which iterates two other iterators simultaneously","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344725,"byte_end":344790,"line_start":10,"line_end":10,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344791,"byte_end":344794,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344795,"byte_end":344824,"line_start":12,"line_end":12,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344825,"byte_end":344828,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [`.zip_longest()`](crate::Itertools::zip_longest) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344829,"byte_end":344908,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":344933,"byte_end":345006,"line_start":16,"line_end":16,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":4667},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347125,"byte_end":347128,"line_start":6,"line_end":6,"column_start":12,"column_end":15},"name":"Zip","qualname":"::ziptuple::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":4669}],"decl_id":null,"docs":" See [`multizip`] for more information.\n","sig":null,"attributes":[{"value":"/ See [`multizip`] for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":346973,"byte_end":347015,"line_start":3,"line_end":3,"column_start":1,"column_end":43}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347040,"byte_end":347113,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348286,"byte_end":348294,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"multizip","qualname":"::ziptuple::multizip","value":"pub fn multizip<T, U>(U) -> Zip<T> where Zip<T>: From<U>, Zip<T>: Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","sig":null,"attributes":[{"value":"/ An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347147,"byte_end":347239,"line_start":10,"line_end":10,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347240,"byte_end":347243,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The iterator `Zip<(I, J, ..., M)>` is formed from a tuple of iterators (or values that","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347244,"byte_end":347334,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ implement [`IntoIterator`]) and yields elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347335,"byte_end":347386,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ until any of the subiterators yields `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347387,"byte_end":347435,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347436,"byte_end":347439,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The iterator element type is a tuple like like `(A, B, ..., E)` where `A` to `E` are the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347440,"byte_end":347532,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ element types of the subiterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347533,"byte_end":347570,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347571,"byte_end":347574,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ **Note:** The result of this macro is a value of a named type (`Zip<(I, J,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347575,"byte_end":347653,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ ..)>` of each component iterator `I, J, ...`) if each component iterator is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347654,"byte_end":347733,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ nameable.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347734,"byte_end":347747,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347748,"byte_end":347751,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Prefer [`izip!()`] over `multizip` for the performance benefits of using the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347752,"byte_end":347832,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/ standard library `.zip()`. Prefer `multizip` if a nameable type is needed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347833,"byte_end":347911,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347912,"byte_end":347915,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347916,"byte_end":347923,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use itertools::multizip;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347924,"byte_end":347952,"line_start":27,"line_end":27,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347953,"byte_end":347956,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // iterate over three sequences side-by-side","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":347957,"byte_end":348005,"line_start":29,"line_end":29,"column_start":1,"column_end":49}},{"value":"/ let mut results = [0, 0, 0, 0];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348006,"byte_end":348041,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ let inputs = [3, 7, 9, 6];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348042,"byte_end":348072,"line_start":31,"line_end":31,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348073,"byte_end":348076,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ for (r, index, input) in multizip((&mut results, 0..10, &inputs)) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348077,"byte_end":348148,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/     *r = index * 10 + input;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348149,"byte_end":348181,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348182,"byte_end":348187,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348188,"byte_end":348191,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(results, [0 + 3, 10 + 7, 29, 36]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348192,"byte_end":348241,"line_start":37,"line_end":37,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348242,"byte_end":348249,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ [`izip!()`]: crate::izip","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/ziptuple.rs","byte_start":348250,"byte_end":348278,"line_start":39,"line_end":39,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2514},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12754,"byte_end":12763,"line_start":431,"line_end":431,"column_start":11,"column_end":20},"name":"Itertools","qualname":"::Itertools","value":"Itertools: Iterator","parent":null,"children":[{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2520},{"krate":0,"index":2522},{"krate":0,"index":2524},{"krate":0,"index":2526},{"krate":0,"index":2529},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2535},{"krate":0,"index":2537},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2543},{"krate":0,"index":2548},{"krate":0,"index":2553},{"krate":0,"index":2557},{"krate":0,"index":2562},{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2570},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2576},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2587},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2595},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":2614},{"krate":0,"index":2616},{"krate":0,"index":2618},{"krate":0,"index":2620},{"krate":0,"index":2623},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2631},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2643},{"krate":0,"index":2647},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2657},{"krate":0,"index":2662},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2681},{"krate":0,"index":2692},{"krate":0,"index":2695},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":2701},{"krate":0,"index":2704},{"krate":0,"index":2705},{"krate":0,"index":2707},{"krate":0,"index":2710},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2721},{"krate":0,"index":2727},{"krate":0,"index":2730},{"krate":0,"index":2734},{"krate":0,"index":2737},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2755},{"krate":0,"index":2759},{"krate":0,"index":2763},{"krate":0,"index":2766},{"krate":0,"index":2770},{"krate":0,"index":2774},{"krate":0,"index":2777},{"krate":0,"index":2782},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2794},{"krate":0,"index":2798},{"krate":0,"index":2811},{"krate":0,"index":2825},{"krate":0,"index":2838},{"krate":0,"index":2839},{"krate":0,"index":2840},{"krate":0,"index":2841},{"krate":0,"index":2843},{"krate":0,"index":2846}],"decl_id":null,"docs":" An [`Iterator`] blanket implementation that provides extra adaptors and\n methods.","sig":null,"attributes":[{"value":"/ An [`Iterator`] blanket implementation that provides extra adaptors and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12134,"byte_end":12209,"line_start":418,"line_end":418,"column_start":1,"column_end":76}},{"value":"/ methods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12210,"byte_end":12222,"line_start":419,"line_end":419,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12223,"byte_end":12226,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/ This trait defines a number of methods. They are divided into two groups:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12227,"byte_end":12304,"line_start":421,"line_end":421,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12305,"byte_end":12308,"line_start":422,"line_end":422,"column_start":1,"column_end":4}},{"value":"/ * *Adaptors* take an iterator and parameter as input, and return","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12309,"byte_end":12377,"line_start":423,"line_end":423,"column_start":1,"column_end":69}},{"value":"/ a new iterator value. These are listed first in the trait. An example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12378,"byte_end":12451,"line_start":424,"line_end":424,"column_start":1,"column_end":74}},{"value":"/ of an adaptor is [`.interleave()`](Itertools::interleave)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12452,"byte_end":12513,"line_start":425,"line_end":425,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12514,"byte_end":12517,"line_start":426,"line_end":426,"column_start":1,"column_end":4}},{"value":"/ * *Regular methods* are those that don't return iterators and instead","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12518,"byte_end":12591,"line_start":427,"line_end":427,"column_start":1,"column_end":74}},{"value":"/ return a regular value of some other kind.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12592,"byte_end":12638,"line_start":428,"line_end":428,"column_start":1,"column_end":47}},{"value":"/ [`.next_tuple()`](Itertools::next_tuple) is an example and the first regular","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12639,"byte_end":12719,"line_start":429,"line_end":429,"column_start":1,"column_end":81}},{"value":"/ method in the list.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12720,"byte_end":12743,"line_start":430,"line_end":430,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13162,"byte_end":13172,"line_start":446,"line_end":446,"column_start":8,"column_end":18},"name":"interleave","qualname":"::Itertools::interleave","value":"pub fn interleave<J>(Self, J) -> Interleave<Self, J::IntoIter> where\nJ: IntoIterator<Item = Self::Item>, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until both have run out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until both have run out.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12798,"byte_end":12864,"line_start":434,"line_end":434,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12869,"byte_end":12872,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12877,"byte_end":12919,"line_start":436,"line_end":436,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12924,"byte_end":12927,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12932,"byte_end":12961,"line_start":438,"line_end":438,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12966,"byte_end":12969,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12974,"byte_end":12981,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12986,"byte_end":13015,"line_start":441,"line_end":441,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13020,"byte_end":13023,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave(vec![-1, -2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13028,"byte_end":13073,"line_start":443,"line_end":443,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3, 4, 5, 6]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13078,"byte_end":13142,"line_start":444,"line_end":444,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13147,"byte_end":13154,"line_start":445,"line_end":445,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13695,"byte_end":13714,"line_start":464,"line_end":464,"column_start":8,"column_end":27},"name":"interleave_shortest","qualname":"::Itertools::interleave_shortest","value":"pub fn interleave_shortest<J>(Self, J)\n-> InterleaveShortest<Self, J::IntoIter> where J: IntoIterator<Item =\nSelf::Item>, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Alternate elements from two iterators until at least one of them has run\n out.","sig":null,"attributes":[{"value":"/ Alternate elements from two iterators until at least one of them has run","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13350,"byte_end":13426,"line_start":453,"line_end":453,"column_start":5,"column_end":81}},{"value":"/ out.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13431,"byte_end":13439,"line_start":454,"line_end":454,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13444,"byte_end":13447,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13452,"byte_end":13494,"line_start":456,"line_end":456,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13499,"byte_end":13502,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13507,"byte_end":13514,"line_start":458,"line_end":458,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13519,"byte_end":13548,"line_start":459,"line_end":459,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13553,"byte_end":13556,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ let it = (1..7).interleave_shortest(vec![-1, -2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13561,"byte_end":13615,"line_start":461,"line_end":461,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![1, -1, 2, -2, 3]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13620,"byte_end":13675,"line_start":462,"line_end":462,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13680,"byte_end":13687,"line_start":463,"line_end":463,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14293,"byte_end":14304,"line_start":483,"line_end":483,"column_start":8,"column_end":19},"name":"intersperse","qualname":"::Itertools::intersperse","value":"pub fn intersperse(Self, Self::Item) -> Intersperse<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13931,"byte_end":13983,"line_start":471,"line_end":471,"column_start":5,"column_end":57}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":13988,"byte_end":14037,"line_start":472,"line_end":472,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14042,"byte_end":14045,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14050,"byte_end":14092,"line_start":474,"line_end":474,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14097,"byte_end":14100,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14105,"byte_end":14134,"line_start":476,"line_end":476,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14139,"byte_end":14142,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14147,"byte_end":14154,"line_start":478,"line_end":478,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14159,"byte_end":14188,"line_start":479,"line_end":479,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14193,"byte_end":14196,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal((0..3).intersperse(8), vec![0, 8, 1, 8, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14201,"byte_end":14273,"line_start":481,"line_end":481,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14278,"byte_end":14285,"line_start":482,"line_end":482,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2520},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14931,"byte_end":14947,"line_start":504,"line_end":504,"column_start":8,"column_end":24},"name":"intersperse_with","qualname":"::Itertools::intersperse_with","value":"pub fn intersperse_with<F>(Self, F) -> IntersperseWith<Self, F> where\nSelf: Sized, F: FnMut() -> Self::Item","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" An iterator adaptor to insert a particular value created by a function\n between each element of the adapted iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor to insert a particular value created by a function","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14477,"byte_end":14551,"line_start":490,"line_end":490,"column_start":5,"column_end":79}},{"value":"/ between each element of the adapted iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14556,"byte_end":14605,"line_start":491,"line_end":491,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14610,"byte_end":14613,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14618,"byte_end":14660,"line_start":493,"line_end":493,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14665,"byte_end":14668,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14673,"byte_end":14702,"line_start":495,"line_end":495,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14707,"byte_end":14710,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14715,"byte_end":14722,"line_start":497,"line_end":497,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14727,"byte_end":14756,"line_start":498,"line_end":498,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14761,"byte_end":14764,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ let mut i = 10;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14769,"byte_end":14788,"line_start":500,"line_end":500,"column_start":5,"column_end":24}},{"value":"/ itertools::assert_equal((0..3).intersperse_with(|| { i -= 1; i }), vec![0, 9, 1, 8, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14793,"byte_end":14885,"line_start":501,"line_end":501,"column_start":5,"column_end":97}},{"value":"/ assert_eq!(i, 8);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14890,"byte_end":14911,"line_start":502,"line_end":502,"column_start":5,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":14916,"byte_end":14923,"line_start":503,"line_end":503,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16187,"byte_end":16198,"line_start":538,"line_end":538,"column_start":8,"column_end":19},"name":"zip_longest","qualname":"::Itertools::zip_longest","value":"pub fn zip_longest<J>(Self, J) -> ZipLongest<Self, J::IntoIter> where\nJ: IntoIterator, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of two optional elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15127,"byte_end":15197,"line_start":511,"line_end":511,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of two optional elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15202,"byte_end":15271,"line_start":512,"line_end":512,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15276,"byte_end":15279,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15284,"byte_end":15313,"line_start":514,"line_end":514,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15318,"byte_end":15321,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ As long as neither input iterator is exhausted yet, it yields two values","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15326,"byte_end":15402,"line_start":516,"line_end":516,"column_start":5,"column_end":81}},{"value":"/ via `EitherOrBoth::Both`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15407,"byte_end":15436,"line_start":517,"line_end":517,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15441,"byte_end":15444,"line_start":518,"line_end":518,"column_start":5,"column_end":8}},{"value":"/ When the parameter iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15449,"byte_end":15526,"line_start":519,"line_end":519,"column_start":5,"column_end":82}},{"value":"/ `self` iterator via `EitherOrBoth::Left`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15531,"byte_end":15576,"line_start":520,"line_end":520,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15581,"byte_end":15584,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ When the `self` iterator is exhausted, it only yields a value from the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15589,"byte_end":15663,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/ parameter iterator via `EitherOrBoth::Right`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15668,"byte_end":15717,"line_start":523,"line_end":523,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15722,"byte_end":15725,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ When both iterators return `None`, all further invocations of `.next()`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15730,"byte_end":15805,"line_start":525,"line_end":525,"column_start":5,"column_end":80}},{"value":"/ will return `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15810,"byte_end":15833,"line_start":526,"line_end":526,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15838,"byte_end":15841,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15846,"byte_end":15874,"line_start":528,"line_end":528,"column_start":5,"column_end":33}},{"value":"/ [`EitherOrBoth<Self::Item, J::Item>`](EitherOrBoth).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15879,"byte_end":15935,"line_start":529,"line_end":529,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15940,"byte_end":15943,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15948,"byte_end":15959,"line_start":531,"line_end":531,"column_start":5,"column_end":16}},{"value":"/ use itertools::EitherOrBoth::{Both, Right};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":15964,"byte_end":16011,"line_start":532,"line_end":532,"column_start":5,"column_end":52}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16016,"byte_end":16045,"line_start":533,"line_end":533,"column_start":5,"column_end":34}},{"value":"/ let it = (0..1).zip_longest(1..3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16050,"byte_end":16088,"line_start":534,"line_end":534,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(it, vec![Both(0, 1), Right(2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16093,"byte_end":16153,"line_start":535,"line_end":535,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16158,"byte_end":16165,"line_start":536,"line_end":536,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16170,"byte_end":16179,"line_start":537,"line_end":537,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2524},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16636,"byte_end":16642,"line_start":551,"line_end":551,"column_start":8,"column_end":14},"name":"zip_eq","qualname":"::Itertools::zip_eq","value":"pub fn zip_eq<J>(Self, J) -> ZipEq<Self, J::IntoIter> where J: IntoIterator,\nSelf: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Create an iterator which iterates over both this and the specified\n iterator simultaneously, yielding pairs of elements.","sig":null,"attributes":[{"value":"/ Create an iterator which iterates over both this and the specified","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16383,"byte_end":16453,"line_start":545,"line_end":545,"column_start":5,"column_end":75}},{"value":"/ iterator simultaneously, yielding pairs of elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16458,"byte_end":16514,"line_start":546,"line_end":546,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16519,"byte_end":16522,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the iterators reach an end and they are not of equal","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16527,"byte_end":16597,"line_start":548,"line_end":548,"column_start":5,"column_end":75}},{"value":"/ lengths.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16602,"byte_end":16614,"line_start":549,"line_end":549,"column_start":5,"column_end":17}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16619,"byte_end":16628,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17558,"byte_end":17566,"line_start":581,"line_end":581,"column_start":8,"column_end":16},"name":"batching","qualname":"::Itertools::batching","value":"pub fn batching<B, F>(Self, F) -> Batching<Self, F> where F: FnMut(&mut Self)\n-> Option<B>, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" A “meta iterator adaptor”. Its closure receives a reference to the\n iterator and may pick off as many elements as it likes, to produce the\n next iterator element.","sig":null,"attributes":[{"value":"/ A “meta iterator adaptor”. Its closure receives a reference to the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16792,"byte_end":16866,"line_start":558,"line_end":558,"column_start":5,"column_end":75}},{"value":"/ iterator and may pick off as many elements as it likes, to produce the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16871,"byte_end":16945,"line_start":559,"line_end":559,"column_start":5,"column_end":79}},{"value":"/ next iterator element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16950,"byte_end":16976,"line_start":560,"line_end":560,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16981,"byte_end":16984,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `B`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":16989,"byte_end":17022,"line_start":562,"line_end":562,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17027,"byte_end":17030,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17035,"byte_end":17042,"line_start":564,"line_end":564,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17047,"byte_end":17076,"line_start":565,"line_end":565,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17081,"byte_end":17084,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ // An adaptor that gathers elements in pairs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17089,"byte_end":17137,"line_start":567,"line_end":567,"column_start":5,"column_end":53}},{"value":"/ let pit = (0..4).batching(|it| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17142,"byte_end":17178,"line_start":568,"line_end":568,"column_start":5,"column_end":41}},{"value":"/            match it.next() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17183,"byte_end":17215,"line_start":569,"line_end":569,"column_start":5,"column_end":37}},{"value":"/                None => None,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17220,"byte_end":17252,"line_start":570,"line_end":570,"column_start":5,"column_end":37}},{"value":"/                Some(x) => match it.next() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17257,"byte_end":17304,"line_start":571,"line_end":571,"column_start":5,"column_end":52}},{"value":"/                    None => None,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17309,"byte_end":17345,"line_start":572,"line_end":572,"column_start":5,"column_end":41}},{"value":"/                    Some(y) => Some((x, y)),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17350,"byte_end":17397,"line_start":573,"line_end":573,"column_start":5,"column_end":52}},{"value":"/                }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17402,"byte_end":17422,"line_start":574,"line_end":574,"column_start":5,"column_end":25}},{"value":"/            }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17427,"byte_end":17443,"line_start":575,"line_end":575,"column_start":5,"column_end":21}},{"value":"/        });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17448,"byte_end":17462,"line_start":576,"line_end":576,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17467,"byte_end":17470,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(pit, vec![(0, 1), (2, 3)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17475,"byte_end":17530,"line_start":578,"line_end":578,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17535,"byte_end":17542,"line_start":579,"line_end":579,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17547,"byte_end":17550,"line_start":580,"line_end":580,"column_start":5,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19297,"byte_end":19305,"line_start":623,"line_end":623,"column_start":8,"column_end":16},"name":"group_by","qualname":"::Itertools::group_by","value":"pub fn group_by<K, F>(Self, F) -> GroupBy<K, Self, F> where Self: Sized,\nF: FnMut(&Self::Item) -> K, K: PartialEq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an *iterable* that can group iterator elements.\n Consecutive elements that map to the same key (“runs”), are assigned\n to the same group.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can group iterator elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17733,"byte_end":17791,"line_start":588,"line_end":588,"column_start":5,"column_end":63}},{"value":"/ Consecutive elements that map to the same key (“runs”), are assigned","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17796,"byte_end":17872,"line_start":589,"line_end":589,"column_start":5,"column_end":77}},{"value":"/ to the same group.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17877,"byte_end":17899,"line_start":590,"line_end":590,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17904,"byte_end":17907,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ `GroupBy` is the storage for the lazy grouping operation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17912,"byte_end":17973,"line_start":592,"line_end":592,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17978,"byte_end":17981,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ If the groups are consumed in order, or if each group's iterator is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":17986,"byte_end":18057,"line_start":594,"line_end":594,"column_start":5,"column_end":76}},{"value":"/ dropped without keeping it around, then `GroupBy` uses no","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18062,"byte_end":18123,"line_start":595,"line_end":595,"column_start":5,"column_end":66}},{"value":"/ allocations.  It needs allocations only if several group iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18128,"byte_end":18198,"line_start":596,"line_end":596,"column_start":5,"column_end":75}},{"value":"/ are alive at the same time.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18203,"byte_end":18234,"line_start":597,"line_end":597,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18239,"byte_end":18242,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This type implements [`IntoIterator`] (it is **not** an iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18247,"byte_end":18315,"line_start":599,"line_end":599,"column_start":5,"column_end":73}},{"value":"/ itself), because the group iterators need to borrow from this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18320,"byte_end":18385,"line_start":600,"line_end":600,"column_start":5,"column_end":70}},{"value":"/ value. It should be stored in a local variable or temporary and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18390,"byte_end":18457,"line_start":601,"line_end":601,"column_start":5,"column_end":72}},{"value":"/ iterated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18462,"byte_end":18475,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18480,"byte_end":18483,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(K, Group)`: the group's key and the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18488,"byte_end":18554,"line_start":604,"line_end":604,"column_start":5,"column_end":71}},{"value":"/ group iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18559,"byte_end":18578,"line_start":605,"line_end":605,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18583,"byte_end":18586,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18591,"byte_end":18598,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18603,"byte_end":18632,"line_start":608,"line_end":608,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18637,"byte_end":18640,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ // group data into runs of larger than zero or not.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18645,"byte_end":18700,"line_start":610,"line_end":610,"column_start":5,"column_end":60}},{"value":"/ let data = vec![1, 3, -2, -2, 1, 0, 1, 2];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18705,"byte_end":18751,"line_start":611,"line_end":611,"column_start":5,"column_end":51}},{"value":"/ // groups:     |---->|------>|--------->|","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18756,"byte_end":18801,"line_start":612,"line_end":612,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18806,"byte_end":18809,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `GroupBy` is iterable","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18814,"byte_end":18877,"line_start":614,"line_end":614,"column_start":5,"column_end":68}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18882,"byte_end":18952,"line_start":615,"line_end":615,"column_start":5,"column_end":75}},{"value":"/ let mut data_grouped = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":18957,"byte_end":18995,"line_start":616,"line_end":616,"column_start":5,"column_end":43}},{"value":"/ for (key, group) in &data.into_iter().group_by(|elt| *elt >= 0) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19000,"byte_end":19069,"line_start":617,"line_end":617,"column_start":5,"column_end":74}},{"value":"/     data_grouped.push((key, group.collect()));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19074,"byte_end":19124,"line_start":618,"line_end":618,"column_start":5,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19129,"byte_end":19134,"line_start":619,"line_end":619,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(data_grouped, vec![(true, vec![1, 3]), (false, vec![-2, -2]), (true, vec![1, 0, 1, 2])]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19139,"byte_end":19243,"line_start":620,"line_end":620,"column_start":5,"column_end":109}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19248,"byte_end":19255,"line_start":621,"line_end":621,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19260,"byte_end":19289,"line_start":622,"line_end":622,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20586,"byte_end":20592,"line_start":659,"line_end":659,"column_start":8,"column_end":14},"name":"chunks","qualname":"::Itertools::chunks","value":"pub fn chunks(Self, usize) -> IntoChunks<Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an *iterable* that can chunk the iterator.","sig":null,"attributes":[{"value":"/ Return an *iterable* that can chunk the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19499,"byte_end":19552,"line_start":631,"line_end":631,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19557,"byte_end":19560,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ Yield subiterators (chunks) that each yield a fixed number elements,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19565,"byte_end":19637,"line_start":633,"line_end":633,"column_start":5,"column_end":77}},{"value":"/ determined by `size`. The last chunk will be shorter if there aren't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19642,"byte_end":19714,"line_start":634,"line_end":634,"column_start":5,"column_end":77}},{"value":"/ enough elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19719,"byte_end":19739,"line_start":635,"line_end":635,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19744,"byte_end":19747,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ `IntoChunks` is based on `GroupBy`: it is iterable (implements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19752,"byte_end":19818,"line_start":637,"line_end":637,"column_start":5,"column_end":71}},{"value":"/ `IntoIterator`, **not** `Iterator`), and it only buffers if several","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19823,"byte_end":19894,"line_start":638,"line_end":638,"column_start":5,"column_end":76}},{"value":"/ chunk iterators are alive at the same time.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19899,"byte_end":19946,"line_start":639,"line_end":639,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19951,"byte_end":19954,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Chunk`, each chunk's iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":19959,"byte_end":20019,"line_start":641,"line_end":641,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20024,"byte_end":20027,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ **Panics** if `size` is 0.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20032,"byte_end":20062,"line_start":643,"line_end":643,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20067,"byte_end":20070,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20075,"byte_end":20082,"line_start":645,"line_end":645,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20087,"byte_end":20116,"line_start":646,"line_end":646,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20121,"byte_end":20124,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 2, -2, 6, 0, 3, 1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20129,"byte_end":20174,"line_start":648,"line_end":648,"column_start":5,"column_end":50}},{"value":"/ //chunk size=3 |------->|-------->|--->|","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20179,"byte_end":20223,"line_start":649,"line_end":649,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20228,"byte_end":20231,"line_start":650,"line_end":650,"column_start":5,"column_end":8}},{"value":"/ // Note: The `&` is significant here, `IntoChunks` is iterable","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20236,"byte_end":20302,"line_start":651,"line_end":651,"column_start":5,"column_end":71}},{"value":"/ // only by reference. You can also call `.into_iter()` explicitly.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20307,"byte_end":20377,"line_start":652,"line_end":652,"column_start":5,"column_end":75}},{"value":"/ for chunk in &data.into_iter().chunks(3) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20382,"byte_end":20428,"line_start":653,"line_end":653,"column_start":5,"column_end":51}},{"value":"/     // Check that the sum of each chunk is 4.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20433,"byte_end":20482,"line_start":654,"line_end":654,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(4, chunk.sum());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20487,"byte_end":20522,"line_start":655,"line_end":655,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20527,"byte_end":20532,"line_start":656,"line_end":656,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20537,"byte_end":20544,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20549,"byte_end":20578,"line_start":658,"line_end":658,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21987,"byte_end":22000,"line_start":699,"line_end":699,"column_start":8,"column_end":21},"name":"tuple_windows","qualname":"::Itertools::tuple_windows","value":"pub fn tuple_windows<T>(Self) -> TupleWindows<Self, T> where Self: Sized +\nIterator<Item = T::Item>, T: traits::HomogeneousTuple, T::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator over all contiguous windows producing tuples of\n a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator over all contiguous windows producing tuples of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20748,"byte_end":20818,"line_start":666,"line_end":666,"column_start":5,"column_end":75}},{"value":"/ a specific size (up to 12).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20823,"byte_end":20854,"line_start":667,"line_end":667,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20859,"byte_end":20862,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ `tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20867,"byte_end":20935,"line_start":669,"line_end":669,"column_start":5,"column_end":73}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":20940,"byte_end":21011,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21016,"byte_end":21074,"line_start":671,"line_end":671,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21079,"byte_end":21082,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21087,"byte_end":21094,"line_start":673,"line_end":673,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21099,"byte_end":21128,"line_start":674,"line_end":674,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21133,"byte_end":21160,"line_start":675,"line_end":675,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21165,"byte_end":21168,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ // pairwise iteration","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21173,"byte_end":21198,"line_start":677,"line_end":677,"column_start":5,"column_end":30}},{"value":"/ for (a, b) in (1..5).tuple_windows() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21203,"byte_end":21245,"line_start":678,"line_end":678,"column_start":5,"column_end":47}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21250,"byte_end":21273,"line_start":679,"line_end":679,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21278,"byte_end":21283,"line_start":680,"line_end":680,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21288,"byte_end":21336,"line_start":681,"line_end":681,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21341,"byte_end":21344,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_windows();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21349,"byte_end":21389,"line_start":683,"line_end":683,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21394,"byte_end":21437,"line_start":684,"line_end":684,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21442,"byte_end":21485,"line_start":685,"line_end":685,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21490,"byte_end":21522,"line_start":686,"line_end":686,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21527,"byte_end":21530,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21535,"byte_end":21567,"line_start":688,"line_end":688,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_windows::<(_, _, _)>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21572,"byte_end":21621,"line_start":689,"line_end":689,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21626,"byte_end":21686,"line_start":690,"line_end":690,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21691,"byte_end":21694,"line_start":691,"line_end":691,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21699,"byte_end":21744,"line_start":692,"line_end":692,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleWindows;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21749,"byte_end":21781,"line_start":693,"line_end":693,"column_start":5,"column_end":37}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21786,"byte_end":21810,"line_start":694,"line_end":694,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21815,"byte_end":21818,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ let it: TupleWindows<Range<u32>, (u32, u32, u32)> = (1..5).tuple_windows();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21823,"byte_end":21902,"line_start":696,"line_end":696,"column_start":5,"column_end":84}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21907,"byte_end":21967,"line_start":697,"line_end":697,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":21972,"byte_end":21979,"line_start":698,"line_end":698,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2535},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23401,"byte_end":23423,"line_start":734,"line_end":734,"column_start":8,"column_end":30},"name":"circular_tuple_windows","qualname":"::Itertools::circular_tuple_windows","value":"pub fn circular_tuple_windows<T>(Self) -> CircularTupleWindows<Self, T> where\nSelf: Sized + Clone + Iterator<Item = T::Item> + ExactSizeIterator,\nT: tuple_impl::TupleCollect + Clone, T::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator over all windows, wrapping back to the first\n elements when the window would otherwise exceed the length of the\n iterator, producing tuples of a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator over all windows, wrapping back to the first","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22218,"byte_end":22285,"line_start":707,"line_end":707,"column_start":5,"column_end":72}},{"value":"/ elements when the window would otherwise exceed the length of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22290,"byte_end":22359,"line_start":708,"line_end":708,"column_start":5,"column_end":74}},{"value":"/ iterator, producing tuples of a specific size (up to 12).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22364,"byte_end":22425,"line_start":709,"line_end":709,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22430,"byte_end":22433,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ `circular_tuple_windows` clones the iterator elements so that they can be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22438,"byte_end":22515,"line_start":711,"line_end":711,"column_start":5,"column_end":82}},{"value":"/ part of successive windows, this makes it most suited for iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22520,"byte_end":22591,"line_start":712,"line_end":712,"column_start":5,"column_end":76}},{"value":"/ of references and other values that are cheap to copy.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22596,"byte_end":22654,"line_start":713,"line_end":713,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22659,"byte_end":22662,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22667,"byte_end":22674,"line_start":715,"line_end":715,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22679,"byte_end":22708,"line_start":716,"line_end":716,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22713,"byte_end":22740,"line_start":717,"line_end":717,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).circular_tuple_windows() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22745,"byte_end":22796,"line_start":718,"line_end":718,"column_start":5,"column_end":56}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22801,"byte_end":22824,"line_start":719,"line_end":719,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22829,"byte_end":22834,"line_start":720,"line_end":720,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (2, 3), (3, 4), (4, 1)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22839,"byte_end":22895,"line_start":721,"line_end":721,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22900,"byte_end":22903,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).circular_tuple_windows();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22908,"byte_end":22957,"line_start":723,"line_end":723,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":22962,"byte_end":23005,"line_start":724,"line_end":724,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23010,"byte_end":23053,"line_start":725,"line_end":725,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((3, 4, 1)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23058,"byte_end":23101,"line_start":726,"line_end":726,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 1, 2)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23106,"byte_end":23149,"line_start":727,"line_end":727,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23154,"byte_end":23186,"line_start":728,"line_end":728,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23191,"byte_end":23194,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23199,"byte_end":23231,"line_start":730,"line_end":730,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).circular_tuple_windows::<(_, _, _)>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23236,"byte_end":23294,"line_start":731,"line_end":731,"column_start":5,"column_end":63}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (2, 3, 4), (3, 4, 1), (4, 1, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23299,"byte_end":23381,"line_start":732,"line_end":732,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23386,"byte_end":23393,"line_start":733,"line_end":733,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24741,"byte_end":24747,"line_start":772,"line_end":772,"column_start":8,"column_end":14},"name":"tuples","qualname":"::Itertools::tuples","value":"pub fn tuples<T>(Self) -> Tuples<Self, T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator that groups the items in tuples of a specific size\n (up to 12).","sig":null,"attributes":[{"value":"/ Return an iterator that groups the items in tuples of a specific size","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23693,"byte_end":23766,"line_start":741,"line_end":741,"column_start":5,"column_end":78}},{"value":"/ (up to 12).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23771,"byte_end":23786,"line_start":742,"line_end":742,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23791,"byte_end":23794,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ See also the method [`.next_tuple()`](Itertools::next_tuple).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23799,"byte_end":23864,"line_start":744,"line_end":744,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23869,"byte_end":23872,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23877,"byte_end":23884,"line_start":746,"line_end":746,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23889,"byte_end":23918,"line_start":747,"line_end":747,"column_start":5,"column_end":34}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23923,"byte_end":23950,"line_start":748,"line_end":748,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuples() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23955,"byte_end":23990,"line_start":749,"line_end":749,"column_start":5,"column_end":40}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":23995,"byte_end":24018,"line_start":750,"line_end":750,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24023,"byte_end":24028,"line_start":751,"line_end":751,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24033,"byte_end":24073,"line_start":752,"line_end":752,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24078,"byte_end":24081,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..7).tuples();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24086,"byte_end":24119,"line_start":754,"line_end":754,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24124,"byte_end":24167,"line_start":755,"line_end":755,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((4, 5, 6)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24172,"byte_end":24215,"line_start":756,"line_end":756,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24220,"byte_end":24252,"line_start":757,"line_end":757,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24257,"byte_end":24260,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24265,"byte_end":24297,"line_start":759,"line_end":759,"column_start":5,"column_end":37}},{"value":"/ let it = (1..7).tuples::<(_, _, _)>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24302,"byte_end":24344,"line_start":760,"line_end":760,"column_start":5,"column_end":47}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24349,"byte_end":24409,"line_start":761,"line_end":761,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24414,"byte_end":24417,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24422,"byte_end":24467,"line_start":763,"line_end":763,"column_start":5,"column_end":50}},{"value":"/ use itertools::Tuples;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24472,"byte_end":24498,"line_start":764,"line_end":764,"column_start":5,"column_end":31}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24503,"byte_end":24527,"line_start":765,"line_end":765,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24532,"byte_end":24535,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ let it: Tuples<Range<u32>, (u32, u32, u32)> = (1..7).tuples();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24540,"byte_end":24606,"line_start":767,"line_end":767,"column_start":5,"column_end":71}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (4, 5, 6)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24611,"byte_end":24671,"line_start":768,"line_end":768,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24676,"byte_end":24683,"line_start":769,"line_end":769,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24688,"byte_end":24691,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ See also [`Tuples::into_buffer`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24696,"byte_end":24733,"line_start":771,"line_end":771,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25563,"byte_end":25566,"line_start":797,"line_end":797,"column_start":8,"column_end":11},"name":"tee","qualname":"::Itertools::tee","value":"pub fn tee(Self) -> (Tee<Self>, Tee<Self>) where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Split into an iterator pair that both yield all elements from\n the original iterator.","sig":null,"attributes":[{"value":"/ Split into an iterator pair that both yield all elements from","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24922,"byte_end":24987,"line_start":779,"line_end":779,"column_start":5,"column_end":70}},{"value":"/ the original iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":24992,"byte_end":25018,"line_start":780,"line_end":780,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25023,"byte_end":25026,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ **Note:** If the iterator is clonable, prefer using that instead","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25031,"byte_end":25099,"line_start":782,"line_end":782,"column_start":5,"column_end":73}},{"value":"/ of using this method. Cloning is likely to be more efficient.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25104,"byte_end":25169,"line_start":783,"line_end":783,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25174,"byte_end":25177,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25182,"byte_end":25224,"line_start":785,"line_end":785,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25229,"byte_end":25232,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25237,"byte_end":25244,"line_start":787,"line_end":787,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25249,"byte_end":25278,"line_start":788,"line_end":788,"column_start":5,"column_end":34}},{"value":"/ let xs = vec![0, 1, 2, 3];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25283,"byte_end":25313,"line_start":789,"line_end":789,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25318,"byte_end":25321,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ let (mut t1, t2) = xs.into_iter().tee();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25326,"byte_end":25370,"line_start":791,"line_end":791,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(t1.next(), Some(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25375,"byte_end":25423,"line_start":792,"line_end":792,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(t2, 0..4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25428,"byte_end":25466,"line_start":793,"line_end":793,"column_start":5,"column_end":43}},{"value":"/ itertools::assert_equal(t1, 1..4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25471,"byte_end":25509,"line_start":794,"line_end":794,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25514,"byte_end":25521,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25526,"byte_end":25555,"line_start":796,"line_end":796,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26297,"byte_end":26301,"line_start":822,"line_end":822,"column_start":8,"column_end":12},"name":"step","qualname":"::Itertools::step","value":"pub fn step(Self, usize) -> Step<Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that steps `n` elements in the base iterator\n for each iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that steps `n` elements in the base iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25698,"byte_end":25773,"line_start":804,"line_end":804,"column_start":5,"column_end":80}},{"value":"/ for each iteration.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25778,"byte_end":25801,"line_start":805,"line_end":805,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25806,"byte_end":25809,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/ The iterator steps by yielding the next element from the base iterator,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25814,"byte_end":25889,"line_start":807,"line_end":807,"column_start":5,"column_end":80}},{"value":"/ then skipping forward `n - 1` elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25894,"byte_end":25937,"line_start":808,"line_end":808,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25942,"byte_end":25945,"line_start":809,"line_end":809,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25950,"byte_end":25992,"line_start":810,"line_end":810,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":25997,"byte_end":26000,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the step is 0.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26005,"byte_end":26037,"line_start":812,"line_end":812,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26042,"byte_end":26045,"line_start":813,"line_end":813,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26050,"byte_end":26057,"line_start":814,"line_end":814,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26062,"byte_end":26091,"line_start":815,"line_end":815,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26096,"byte_end":26099,"line_start":816,"line_end":816,"column_start":5,"column_end":8}},{"value":"/ let it = (0..8).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26104,"byte_end":26132,"line_start":817,"line_end":817,"column_start":5,"column_end":33}},{"value":"/ itertools::assert_equal(it, vec![0, 3, 6]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26137,"byte_end":26184,"line_start":818,"line_end":818,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26189,"byte_end":26196,"line_start":819,"line_end":819,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use std .step_by() instead\", since = \"0.8.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26201,"byte_end":26264,"line_start":820,"line_end":820,"column_start":5,"column_end":68}},{"value":"allow(deprecated)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26269,"byte_end":26289,"line_start":821,"line_end":821,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26611,"byte_end":26619,"line_start":835,"line_end":835,"column_start":8,"column_end":16},"name":"map_into","qualname":"::Itertools::map_into","value":"pub fn map_into<R>(Self) -> MapInto<Self, R> where Self: Sized,\nSelf::Item: Into<R>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Convert each item of the iterator using the [`Into`] trait.","sig":null,"attributes":[{"value":"/ Convert each item of the iterator using the [`Into`] trait.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26407,"byte_end":26470,"line_start":828,"line_end":828,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26475,"byte_end":26478,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26483,"byte_end":26494,"line_start":830,"line_end":830,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26499,"byte_end":26528,"line_start":831,"line_end":831,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26533,"byte_end":26536,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ (1i32..42i32).map_into::<f64>().collect_vec();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26541,"byte_end":26591,"line_start":833,"line_end":833,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26596,"byte_end":26603,"line_start":834,"line_end":834,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26874,"byte_end":26885,"line_start":844,"line_end":844,"column_start":8,"column_end":19},"name":"map_results","qualname":"::Itertools::map_results","value":"pub fn map_results<F, T, U, E>(Self, F) -> MapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" See [`.map_ok()`](Itertools::map_ok).\n","sig":null,"attributes":[{"value":"/ See [`.map_ok()`](Itertools::map_ok).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26761,"byte_end":26802,"line_start":842,"line_end":842,"column_start":5,"column_end":46}},{"value":"deprecated(note = \"Use .map_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":26807,"byte_end":26866,"line_start":843,"line_end":843,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2548},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27465,"byte_end":27471,"line_start":862,"line_end":862,"column_start":8,"column_end":14},"name":"map_ok","qualname":"::Itertools::map_ok","value":"pub fn map_ok<F, T, U, E>(Self, F) -> MapOk<Self, F> where Self: Iterator<Item\n= Result<T, E>> + Sized, F: FnMut(T) -> U","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies the provided closure\n to every `Result::Ok` value. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies the provided closure","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27059,"byte_end":27123,"line_start":851,"line_end":851,"column_start":5,"column_end":69}},{"value":"/ to every `Result::Ok` value. `Result::Err` values are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27128,"byte_end":27185,"line_start":852,"line_end":852,"column_start":5,"column_end":62}},{"value":"/ unchanged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27190,"byte_end":27204,"line_start":853,"line_end":853,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27209,"byte_end":27212,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27217,"byte_end":27224,"line_start":855,"line_end":855,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27229,"byte_end":27258,"line_start":856,"line_end":856,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27263,"byte_end":27266,"line_start":857,"line_end":857,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(41), Err(false), Ok(11)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27271,"byte_end":27320,"line_start":858,"line_end":858,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().map_ok(|i| i + 1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27325,"byte_end":27374,"line_start":859,"line_end":859,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![Ok(42), Err(false), Ok(12)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27379,"byte_end":27445,"line_start":860,"line_end":860,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27450,"byte_end":27457,"line_start":861,"line_end":861,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2553},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28061,"byte_end":28070,"line_start":880,"line_end":880,"column_start":8,"column_end":17},"name":"filter_ok","qualname":"::Itertools::filter_ok","value":"pub fn filter_ok<F, T, E>(Self, F) -> FilterOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(&T) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters every `Result::Ok`\n value with the provided closure. `Result::Err` values are\n unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters every `Result::Ok`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27656,"byte_end":27718,"line_start":869,"line_end":869,"column_start":5,"column_end":67}},{"value":"/ value with the provided closure. `Result::Err` values are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27723,"byte_end":27784,"line_start":870,"line_end":870,"column_start":5,"column_end":66}},{"value":"/ unchanged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27789,"byte_end":27803,"line_start":871,"line_end":871,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27808,"byte_end":27811,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27816,"byte_end":27823,"line_start":873,"line_end":873,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27828,"byte_end":27857,"line_start":874,"line_end":874,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27862,"byte_end":27865,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27870,"byte_end":27919,"line_start":876,"line_end":876,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_ok(|&i| i > 20);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27924,"byte_end":27978,"line_start":877,"line_end":877,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![Ok(22), Err(false)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":27983,"byte_end":28041,"line_start":878,"line_end":878,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28046,"byte_end":28053,"line_start":879,"line_end":879,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2557},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28718,"byte_end":28731,"line_start":898,"line_end":898,"column_start":8,"column_end":21},"name":"filter_map_ok","qualname":"::Itertools::filter_map_ok","value":"pub fn filter_map_ok<F, T, U, E>(Self, F) -> FilterMapOk<Self, F> where\nSelf: Iterator<Item = Result<T, E>> + Sized, F: FnMut(T) -> Option<U>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters and transforms every\n `Result::Ok` value with the provided closure. `Result::Err`\n values are unchanged.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters and transforms every","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28262,"byte_end":28326,"line_start":887,"line_end":887,"column_start":5,"column_end":69}},{"value":"/ `Result::Ok` value with the provided closure. `Result::Err`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28331,"byte_end":28394,"line_start":888,"line_end":888,"column_start":5,"column_end":68}},{"value":"/ values are unchanged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28399,"byte_end":28424,"line_start":889,"line_end":889,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28429,"byte_end":28432,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28437,"byte_end":28444,"line_start":891,"line_end":891,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28449,"byte_end":28478,"line_start":892,"line_end":892,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28483,"byte_end":28486,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(22), Err(false), Ok(11)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28491,"byte_end":28540,"line_start":894,"line_end":894,"column_start":5,"column_end":54}},{"value":"/ let it = input.into_iter().filter_map_ok(|i| if i > 20 { Some(i * 2) } else { None });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28545,"byte_end":28635,"line_start":895,"line_end":895,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(it, vec![Ok(44), Err(false)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28640,"byte_end":28698,"line_start":896,"line_end":896,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28703,"byte_end":28710,"line_start":897,"line_end":897,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29739,"byte_end":29749,"line_start":922,"line_end":922,"column_start":8,"column_end":18},"name":"flatten_ok","qualname":"::Itertools::flatten_ok","value":"pub fn flatten_ok<T, E>(Self) -> FlattenOk<Self, T, E> where\nSelf: Iterator<Item = Result<T, E>> + Sized, T: IntoIterator","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens every `Result::Ok` value into\n a series of `Result::Ok` values. `Result::Err` values are unchanged.\n \n This is useful when you have some common error type for your crate and\n need to propagate it upwards, but the `Result::Ok` case needs to be flattened.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens every `Result::Ok` value into","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":28937,"byte_end":29011,"line_start":905,"line_end":905,"column_start":5,"column_end":79}},{"value":"/ a series of `Result::Ok` values. `Result::Err` values are unchanged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29016,"byte_end":29088,"line_start":906,"line_end":906,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29093,"byte_end":29097,"line_start":907,"line_end":907,"column_start":5,"column_end":9}},{"value":"/ This is useful when you have some common error type for your crate and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29102,"byte_end":29176,"line_start":908,"line_end":908,"column_start":5,"column_end":79}},{"value":"/ need to propagate it upwards, but the `Result::Ok` case needs to be flattened.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29181,"byte_end":29263,"line_start":909,"line_end":909,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29268,"byte_end":29271,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29276,"byte_end":29283,"line_start":911,"line_end":911,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29288,"byte_end":29317,"line_start":912,"line_end":912,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29322,"byte_end":29325,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ let input = vec![Ok(0..2), Err(false), Ok(2..4)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29330,"byte_end":29383,"line_start":914,"line_end":914,"column_start":5,"column_end":58}},{"value":"/ let it = input.iter().cloned().flatten_ok();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29388,"byte_end":29436,"line_start":915,"line_end":915,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it.clone(), vec![Ok(0), Ok(1), Err(false), Ok(2), Ok(3)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29441,"byte_end":29527,"line_start":916,"line_end":916,"column_start":5,"column_end":91}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29532,"byte_end":29536,"line_start":917,"line_end":917,"column_start":5,"column_end":9}},{"value":"/ // This can also be used to propagate errors when collecting.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29541,"byte_end":29606,"line_start":918,"line_end":918,"column_start":5,"column_end":70}},{"value":"/ let output_result: Result<Vec<i32>, bool> = it.collect();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29611,"byte_end":29672,"line_start":919,"line_end":919,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(output_result, Err(false));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29677,"byte_end":29719,"line_start":920,"line_end":920,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29724,"byte_end":29731,"line_start":921,"line_end":921,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30398,"byte_end":30403,"line_start":943,"line_end":943,"column_start":8,"column_end":13},"name":"merge","qualname":"::Itertools::merge","value":"pub fn merge<J>(Self, J) -> Merge<Self, J::IntoIter> where Self: Sized,\nSelf::Item: PartialOrd, J: IntoIterator<Item = Self::Item>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in\n ascending order.  If both base iterators are sorted (ascending), the\n result is sorted.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":29930,"byte_end":29998,"line_start":929,"line_end":929,"column_start":5,"column_end":73}},{"value":"/ ascending order.  If both base iterators are sorted (ascending), the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30003,"byte_end":30075,"line_start":930,"line_end":930,"column_start":5,"column_end":77}},{"value":"/ result is sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30080,"byte_end":30101,"line_start":931,"line_end":931,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30106,"byte_end":30109,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30114,"byte_end":30156,"line_start":933,"line_end":933,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30161,"byte_end":30164,"line_start":934,"line_end":934,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30169,"byte_end":30176,"line_start":935,"line_end":935,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30181,"byte_end":30210,"line_start":936,"line_end":936,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30215,"byte_end":30218,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ let a = (0..11).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30223,"byte_end":30251,"line_start":938,"line_end":938,"column_start":5,"column_end":33}},{"value":"/ let b = (0..11).step(5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30256,"byte_end":30284,"line_start":939,"line_end":939,"column_start":5,"column_end":33}},{"value":"/ let it = a.merge(b);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30289,"byte_end":30313,"line_start":940,"line_end":940,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(it, vec![0, 0, 3, 5, 6, 9, 10]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30318,"byte_end":30378,"line_start":941,"line_end":941,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30383,"byte_end":30390,"line_start":942,"line_end":942,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31200,"byte_end":31208,"line_start":967,"line_end":967,"column_start":8,"column_end":16},"name":"merge_by","qualname":"::Itertools::merge_by","value":"pub fn merge_by<J, F>(Self, J, F) -> MergeBy<Self, J::IntoIter, F> where\nSelf: Sized, J: IntoIterator<Item = Self::Item>,\nF: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that merges the two base iterators in order.\n This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that merges the two base iterators in order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30609,"byte_end":30684,"line_start":951,"line_end":951,"column_start":5,"column_end":80}},{"value":"/ This is much like [`.merge()`](Itertools::merge) but allows for a custom ordering.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30689,"byte_end":30775,"line_start":952,"line_end":952,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30780,"byte_end":30783,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ This can be especially useful for sequences of tuples.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30788,"byte_end":30846,"line_start":954,"line_end":954,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30851,"byte_end":30854,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30859,"byte_end":30901,"line_start":956,"line_end":956,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30906,"byte_end":30909,"line_start":957,"line_end":957,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30914,"byte_end":30921,"line_start":958,"line_end":958,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30926,"byte_end":30955,"line_start":959,"line_end":959,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30960,"byte_end":30963,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ let a = (0..).zip(\"bc\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":30968,"byte_end":31004,"line_start":961,"line_end":961,"column_start":5,"column_end":41}},{"value":"/ let b = (0..).zip(\"ad\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31009,"byte_end":31045,"line_start":962,"line_end":962,"column_start":5,"column_end":41}},{"value":"/ let it = a.merge_by(b, |x, y| x.1 <= y.1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31050,"byte_end":31096,"line_start":963,"line_end":963,"column_start":5,"column_end":51}},{"value":"/ itertools::assert_equal(it, vec![(0, 'a'), (0, 'b'), (1, 'c'), (1, 'd')]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31101,"byte_end":31179,"line_start":964,"line_end":964,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31184,"byte_end":31191,"line_start":965,"line_end":965,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32721,"byte_end":32734,"line_start":1003,"line_end":1003,"column_start":8,"column_end":21},"name":"merge_join_by","qualname":"::Itertools::merge_join_by","value":"pub fn merge_join_by<J, F>(Self, J, F) -> MergeJoinBy<Self, J::IntoIter, F>\nwhere J: IntoIterator, F: FnMut(&Self::Item, &J::Item) -> std::cmp::Ordering,\nSelf: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Create an iterator that merges items from both this and the specified\n iterator in ascending order.","sig":null,"attributes":[{"value":"/ Create an iterator that merges items from both this and the specified","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31494,"byte_end":31567,"line_start":975,"line_end":975,"column_start":5,"column_end":78}},{"value":"/ iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31572,"byte_end":31604,"line_start":976,"line_end":976,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31609,"byte_end":31612,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ It chooses whether to pair elements based on the `Ordering` returned by the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31617,"byte_end":31696,"line_start":978,"line_end":978,"column_start":5,"column_end":84}},{"value":"/ specified compare function. At any point, inspecting the tip of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31701,"byte_end":31772,"line_start":979,"line_end":979,"column_start":5,"column_end":76}},{"value":"/ iterators `I` and `J` as items `i` of type `I::Item` and `j` of type","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31777,"byte_end":31849,"line_start":980,"line_end":980,"column_start":5,"column_end":77}},{"value":"/ `J::Item` respectively, the resulting iterator will:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31854,"byte_end":31910,"line_start":981,"line_end":981,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31915,"byte_end":31918,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ - Emit `EitherOrBoth::Left(i)` when `i < j`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31923,"byte_end":31971,"line_start":983,"line_end":983,"column_start":5,"column_end":53}},{"value":"/   and remove `i` from its source iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":31976,"byte_end":32021,"line_start":984,"line_end":984,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Right(j)` when `i > j`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32026,"byte_end":32075,"line_start":985,"line_end":985,"column_start":5,"column_end":54}},{"value":"/   and remove `j` from its source iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32080,"byte_end":32125,"line_start":986,"line_end":986,"column_start":5,"column_end":50}},{"value":"/ - Emit `EitherOrBoth::Both(i, j)` when  `i == j`,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32130,"byte_end":32183,"line_start":987,"line_end":987,"column_start":5,"column_end":58}},{"value":"/   and remove both `i` and `j` from their respective source iterators","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32188,"byte_end":32260,"line_start":988,"line_end":988,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32265,"byte_end":32268,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32273,"byte_end":32280,"line_start":990,"line_end":990,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32285,"byte_end":32314,"line_start":991,"line_end":991,"column_start":5,"column_end":34}},{"value":"/ use itertools::EitherOrBoth::{Left, Right, Both};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32319,"byte_end":32372,"line_start":992,"line_end":992,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32377,"byte_end":32380,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ let multiples_of_2 = (0..10).step(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32385,"byte_end":32426,"line_start":994,"line_end":994,"column_start":5,"column_end":46}},{"value":"/ let multiples_of_3 = (0..10).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32431,"byte_end":32472,"line_start":995,"line_end":995,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32477,"byte_end":32480,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32485,"byte_end":32513,"line_start":997,"line_end":997,"column_start":5,"column_end":33}},{"value":"/     multiples_of_2.merge_join_by(multiples_of_3, |i, j| i.cmp(j)),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32518,"byte_end":32588,"line_start":998,"line_end":998,"column_start":5,"column_end":75}},{"value":"/     vec![Both(0, 0), Left(2), Right(3), Left(4), Both(6, 6), Left(8), Right(9)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32593,"byte_end":32676,"line_start":999,"line_end":999,"column_start":5,"column_end":88}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32681,"byte_end":32687,"line_start":1000,"line_end":1000,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32692,"byte_end":32699,"line_start":1001,"line_end":1001,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32704,"byte_end":32713,"line_start":1002,"line_end":1002,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33569,"byte_end":33575,"line_start":1028,"line_end":1028,"column_start":8,"column_end":14},"name":"kmerge","qualname":"::Itertools::kmerge","value":"pub fn kmerge(Self) -> KMerge<<Self::Item as IntoIterator>::IntoIter> where\nSelf: Sized, Self::Item: IntoIterator,\n<Self::Item as IntoIterator>::Item: PartialOrd","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them in ascending order.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":32991,"byte_end":33063,"line_start":1011,"line_end":1011,"column_start":5,"column_end":77}},{"value":"/ merging them in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33068,"byte_end":33104,"line_start":1012,"line_end":1012,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33109,"byte_end":33112,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted (ascending), the result is sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33117,"byte_end":33188,"line_start":1014,"line_end":1014,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33193,"byte_end":33196,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33201,"byte_end":33243,"line_start":1016,"line_end":1016,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33248,"byte_end":33251,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33256,"byte_end":33263,"line_start":1018,"line_end":1018,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33268,"byte_end":33297,"line_start":1019,"line_end":1019,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33302,"byte_end":33305,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ let a = (0..6).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33310,"byte_end":33337,"line_start":1021,"line_end":1021,"column_start":5,"column_end":32}},{"value":"/ let b = (1..6).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33342,"byte_end":33369,"line_start":1022,"line_end":1022,"column_start":5,"column_end":32}},{"value":"/ let c = (2..6).step(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33374,"byte_end":33401,"line_start":1023,"line_end":1023,"column_start":5,"column_end":32}},{"value":"/ let it = vec![a, b, c].into_iter().kmerge();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33406,"byte_end":33454,"line_start":1024,"line_end":1024,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33459,"byte_end":33515,"line_start":1025,"line_end":1025,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33520,"byte_end":33527,"line_start":1026,"line_end":1026,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33532,"byte_end":33561,"line_start":1027,"line_end":1027,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34582,"byte_end":34591,"line_start":1057,"line_end":1057,"column_start":8,"column_end":17},"name":"kmerge_by","qualname":"::Itertools::kmerge_by","value":"pub fn kmerge_by<F>(Self, F)\n-> KMergeBy<<Self::Item as IntoIterator>::IntoIter, F> where Self: Sized,\nSelf::Item: IntoIterator,\nF: FnMut(&<Self::Item as IntoIterator>::Item,\n&<Self::Item as IntoIterator>::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that flattens an iterator of iterators by\n merging them according to the given closure.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that flattens an iterator of iterators by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33799,"byte_end":33871,"line_start":1036,"line_end":1036,"column_start":5,"column_end":77}},{"value":"/ merging them according to the given closure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33876,"byte_end":33924,"line_start":1037,"line_end":1037,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33929,"byte_end":33932,"line_start":1038,"line_end":1038,"column_start":5,"column_end":8}},{"value":"/ The closure `first` is called with two elements *a*, *b* and should","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":33937,"byte_end":34008,"line_start":1039,"line_end":1039,"column_start":5,"column_end":76}},{"value":"/ return `true` if *a* is ordered before *b*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34013,"byte_end":34060,"line_start":1040,"line_end":1040,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34065,"byte_end":34068,"line_start":1041,"line_end":1041,"column_start":5,"column_end":8}},{"value":"/ If all base iterators are sorted according to `first`, the result is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34073,"byte_end":34145,"line_start":1042,"line_end":1042,"column_start":5,"column_end":77}},{"value":"/ sorted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34150,"byte_end":34161,"line_start":1043,"line_end":1043,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34166,"byte_end":34169,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34174,"byte_end":34216,"line_start":1045,"line_end":1045,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34221,"byte_end":34224,"line_start":1046,"line_end":1046,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34229,"byte_end":34236,"line_start":1047,"line_end":1047,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34241,"byte_end":34270,"line_start":1048,"line_end":1048,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34275,"byte_end":34278,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ let a = vec![-1f64, 2., 3., -5., 6., -7.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34283,"byte_end":34329,"line_start":1050,"line_end":1050,"column_start":5,"column_end":51}},{"value":"/ let b = vec![0., 2., -4.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34334,"byte_end":34364,"line_start":1051,"line_end":1051,"column_start":5,"column_end":35}},{"value":"/ let mut it = vec![a, b].into_iter().kmerge_by(|a, b| a.abs() < b.abs());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34369,"byte_end":34445,"line_start":1052,"line_end":1052,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(it.next(), Some(0.));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34450,"byte_end":34486,"line_start":1053,"line_end":1053,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(it.last(), Some(-7.));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34491,"byte_end":34528,"line_start":1054,"line_end":1054,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34533,"byte_end":34540,"line_start":1055,"line_end":1055,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34545,"byte_end":34574,"line_start":1056,"line_end":1056,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35343,"byte_end":35360,"line_start":1078,"line_end":1078,"column_start":8,"column_end":25},"name":"cartesian_product","qualname":"::Itertools::cartesian_product","value":"pub fn cartesian_product<J>(Self, J) -> Product<Self, J::IntoIter> where\nSelf: Sized, Self::Item: Clone, J: IntoIterator, J::IntoIter: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n the element sets of two iterators `self` and `J`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34917,"byte_end":34991,"line_start":1067,"line_end":1067,"column_start":5,"column_end":79}},{"value":"/ the element sets of two iterators `self` and `J`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":34996,"byte_end":35049,"line_start":1068,"line_end":1068,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35054,"byte_end":35057,"line_start":1069,"line_end":1069,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(Self::Item, J::Item)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35062,"byte_end":35115,"line_start":1070,"line_end":1070,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35120,"byte_end":35123,"line_start":1071,"line_end":1071,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35128,"byte_end":35135,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35140,"byte_end":35169,"line_start":1073,"line_end":1073,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35174,"byte_end":35177,"line_start":1074,"line_end":1074,"column_start":5,"column_end":8}},{"value":"/ let it = (0..2).cartesian_product(\"αβ\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35182,"byte_end":35236,"line_start":1075,"line_end":1075,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![(0, 'α'), (0, 'β'), (1, 'α'), (1, 'β')]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35241,"byte_end":35323,"line_start":1076,"line_end":1076,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35328,"byte_end":35335,"line_start":1077,"line_end":1077,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36796,"byte_end":36819,"line_start":1113,"line_end":1113,"column_start":8,"column_end":31},"name":"multi_cartesian_product","qualname":"::Itertools::multi_cartesian_product","value":"pub fn multi_cartesian_product(Self)\n-> MultiProduct<<Self::Item as IntoIterator>::IntoIter> where Self: Sized,\nSelf::Item: IntoIterator, <Self::Item as IntoIterator>::IntoIter: Clone,\n<Self::Item as IntoIterator>::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the cartesian product of\n all subiterators returned by meta-iterator `self`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the cartesian product of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35612,"byte_end":35686,"line_start":1087,"line_end":1087,"column_start":5,"column_end":79}},{"value":"/ all subiterators returned by meta-iterator `self`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35691,"byte_end":35745,"line_start":1088,"line_end":1088,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35750,"byte_end":35753,"line_start":1089,"line_end":1089,"column_start":5,"column_end":8}},{"value":"/ All provided iterators must yield the same `Item` type. To generate","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35758,"byte_end":35829,"line_start":1090,"line_end":1090,"column_start":5,"column_end":76}},{"value":"/ the product of iterators yielding multiple types, use the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35834,"byte_end":35895,"line_start":1091,"line_end":1091,"column_start":5,"column_end":66}},{"value":"/ [`iproduct`] macro instead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35900,"byte_end":35931,"line_start":1092,"line_end":1092,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35936,"byte_end":35939,"line_start":1093,"line_end":1093,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35944,"byte_end":35947,"line_start":1094,"line_end":1094,"column_start":5,"column_end":8}},{"value":"/ The iterator element type is `Vec<T>`, where `T` is the iterator element","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":35952,"byte_end":36028,"line_start":1095,"line_end":1095,"column_start":5,"column_end":81}},{"value":"/ of the subiterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36033,"byte_end":36057,"line_start":1096,"line_end":1096,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36062,"byte_end":36065,"line_start":1097,"line_end":1097,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36070,"byte_end":36077,"line_start":1098,"line_end":1098,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36082,"byte_end":36111,"line_start":1099,"line_end":1099,"column_start":5,"column_end":34}},{"value":"/ let mut multi_prod = (0..3).map(|i| (i * 2)..(i * 2 + 2))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36116,"byte_end":36177,"line_start":1100,"line_end":1100,"column_start":5,"column_end":66}},{"value":"/     .multi_cartesian_product();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36182,"byte_end":36217,"line_start":1101,"line_end":1101,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 4]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36222,"byte_end":36277,"line_start":1102,"line_end":1102,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 2, 5]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36282,"byte_end":36337,"line_start":1103,"line_end":1103,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 4]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36342,"byte_end":36397,"line_start":1104,"line_end":1104,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![0, 3, 5]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36402,"byte_end":36457,"line_start":1105,"line_end":1105,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 4]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36462,"byte_end":36517,"line_start":1106,"line_end":1106,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 2, 5]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36522,"byte_end":36577,"line_start":1107,"line_end":1107,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 4]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36582,"byte_end":36637,"line_start":1108,"line_end":1108,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), Some(vec![1, 3, 5]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36642,"byte_end":36697,"line_start":1109,"line_end":1109,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(multi_prod.next(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36702,"byte_end":36742,"line_start":1110,"line_end":1110,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36747,"byte_end":36754,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":36759,"byte_end":36788,"line_start":1112,"line_end":1112,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38301,"byte_end":38309,"line_start":1150,"line_end":1150,"column_start":8,"column_end":16},"name":"coalesce","qualname":"::Itertools::coalesce","value":"pub fn coalesce<F>(Self, F) -> Coalesce<Self, F> where Self: Sized,\nF: FnMut(Self::Item, Self::Item) ->\nResult<Self::Item, (Self::Item, Self::Item)>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that uses the passed-in closure to\n optionally merge together consecutive elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that uses the passed-in closure to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37131,"byte_end":37196,"line_start":1122,"line_end":1122,"column_start":5,"column_end":70}},{"value":"/ optionally merge together consecutive elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37201,"byte_end":37252,"line_start":1123,"line_end":1123,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37257,"byte_end":37260,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ The closure `f` is passed two elements, `previous` and `current` and may","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37265,"byte_end":37341,"line_start":1125,"line_end":1125,"column_start":5,"column_end":81}},{"value":"/ return either (1) `Ok(combined)` to merge the two values or","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37346,"byte_end":37409,"line_start":1126,"line_end":1126,"column_start":5,"column_end":68}},{"value":"/ (2) `Err((previous', current'))` to indicate they can't be merged.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37414,"byte_end":37484,"line_start":1127,"line_end":1127,"column_start":5,"column_end":75}},{"value":"/ In (2), the value `previous'` is emitted by the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37489,"byte_end":37550,"line_start":1128,"line_end":1128,"column_start":5,"column_end":66}},{"value":"/ Either (1) `combined` or (2) `current'` becomes the previous value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37555,"byte_end":37625,"line_start":1129,"line_end":1129,"column_start":5,"column_end":75}},{"value":"/ when coalesce continues with the next pair of elements to merge. The","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37630,"byte_end":37702,"line_start":1130,"line_end":1130,"column_start":5,"column_end":77}},{"value":"/ value that remains at the end is also emitted by the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37707,"byte_end":37773,"line_start":1131,"line_end":1131,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37778,"byte_end":37781,"line_start":1132,"line_end":1132,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37786,"byte_end":37828,"line_start":1133,"line_end":1133,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37833,"byte_end":37836,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37841,"byte_end":37870,"line_start":1135,"line_end":1135,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37875,"byte_end":37878,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37883,"byte_end":37890,"line_start":1137,"line_end":1137,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37895,"byte_end":37924,"line_start":1138,"line_end":1138,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37929,"byte_end":37932,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ // sum same-sign runs together","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37937,"byte_end":37971,"line_start":1140,"line_end":1140,"column_start":5,"column_end":39}},{"value":"/ let data = vec![-1., -2., -3., 3., 1., 0., -1.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":37976,"byte_end":38028,"line_start":1141,"line_end":1141,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(data.into_iter().coalesce(|x, y|","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38033,"byte_end":38093,"line_start":1142,"line_end":1142,"column_start":5,"column_end":65}},{"value":"/         if (x >= 0.) == (y >= 0.) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38098,"byte_end":38137,"line_start":1143,"line_end":1143,"column_start":5,"column_end":44}},{"value":"/             Ok(x + y)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38142,"byte_end":38167,"line_start":1144,"line_end":1144,"column_start":5,"column_end":30}},{"value":"/         } else {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38172,"byte_end":38192,"line_start":1145,"line_end":1145,"column_start":5,"column_end":25}},{"value":"/             Err((x, y))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38197,"byte_end":38224,"line_start":1146,"line_end":1146,"column_start":5,"column_end":32}},{"value":"/         }),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38229,"byte_end":38244,"line_start":1147,"line_end":1147,"column_start":5,"column_end":20}},{"value":"/         vec![-6., 4., -1.]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38249,"byte_end":38281,"line_start":1148,"line_end":1148,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38286,"byte_end":38293,"line_start":1149,"line_end":1149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2581},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39023,"byte_end":39028,"line_start":1172,"line_end":1172,"column_start":8,"column_end":13},"name":"dedup","qualname":"::Itertools::dedup","value":"pub fn dedup(Self) -> Dedup<Self> where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38544,"byte_end":38614,"line_start":1158,"line_end":1158,"column_start":5,"column_end":75}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38619,"byte_end":38678,"line_start":1159,"line_end":1159,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38683,"byte_end":38686,"line_start":1160,"line_end":1160,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38691,"byte_end":38733,"line_start":1161,"line_end":1161,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38738,"byte_end":38741,"line_start":1162,"line_end":1162,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38746,"byte_end":38775,"line_start":1163,"line_end":1163,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38780,"byte_end":38783,"line_start":1164,"line_end":1164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38788,"byte_end":38795,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38800,"byte_end":38829,"line_start":1166,"line_end":1166,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38834,"byte_end":38837,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1., 1., 2., 3., 3., 2., 2.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38842,"byte_end":38890,"line_start":1168,"line_end":1168,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().dedup(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38895,"byte_end":38948,"line_start":1169,"line_end":1169,"column_start":5,"column_end":58}},{"value":"/                         vec![1., 2., 3., 2.]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":38953,"byte_end":39003,"line_start":1170,"line_end":1170,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39008,"byte_end":39015,"line_start":1171,"line_end":1171,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2582},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39773,"byte_end":39781,"line_start":1194,"line_end":1194,"column_start":8,"column_end":16},"name":"dedup_by","qualname":"::Itertools::dedup_by","value":"pub fn dedup_by<Cmp>(Self, Cmp) -> DedupBy<Self, Cmp> where Self: Sized,\nCmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements,\n determining equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39161,"byte_end":39231,"line_start":1179,"line_end":1179,"column_start":5,"column_end":75}},{"value":"/ determining equality using a comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39236,"byte_end":39289,"line_start":1180,"line_end":1180,"column_start":5,"column_end":58}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39294,"byte_end":39353,"line_start":1181,"line_end":1181,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39358,"byte_end":39361,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39366,"byte_end":39408,"line_start":1183,"line_end":1183,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39413,"byte_end":39416,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39421,"byte_end":39450,"line_start":1185,"line_end":1185,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39455,"byte_end":39458,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39463,"byte_end":39470,"line_start":1187,"line_end":1187,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39475,"byte_end":39504,"line_start":1188,"line_end":1188,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39509,"byte_end":39512,"line_start":1189,"line_end":1189,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 1.), (1, 1.), (0, 2.), (0, 3.), (1, 3.), (1, 2.), (2, 2.)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39517,"byte_end":39600,"line_start":1190,"line_end":1190,"column_start":5,"column_end":88}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by(|x, y| x.1 == y.1),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39605,"byte_end":39678,"line_start":1191,"line_end":1191,"column_start":5,"column_end":78}},{"value":"/                         vec![(0, 1.), (0, 2.), (0, 3.), (1, 2.)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39683,"byte_end":39753,"line_start":1192,"line_end":1192,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39758,"byte_end":39765,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2584},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40569,"byte_end":40585,"line_start":1216,"line_end":1216,"column_start":8,"column_end":24},"name":"dedup_with_count","qualname":"::Itertools::dedup_with_count","value":"pub fn dedup_with_count(Self) -> DedupWithCount<Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":39965,"byte_end":40060,"line_start":1201,"line_end":1201,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40065,"byte_end":40109,"line_start":1202,"line_end":1202,"column_start":5,"column_end":49}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40114,"byte_end":40173,"line_start":1203,"line_end":1203,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40178,"byte_end":40181,"line_start":1204,"line_end":1204,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40186,"byte_end":40237,"line_start":1205,"line_end":1205,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40242,"byte_end":40245,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40250,"byte_end":40279,"line_start":1207,"line_end":1207,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40284,"byte_end":40287,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40292,"byte_end":40299,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40304,"byte_end":40333,"line_start":1210,"line_end":1210,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40338,"byte_end":40341,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ let data = vec!['a', 'a', 'b', 'c', 'c', 'b', 'b'];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40346,"byte_end":40401,"line_start":1212,"line_end":1212,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_with_count(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40406,"byte_end":40470,"line_start":1213,"line_end":1213,"column_start":5,"column_end":69}},{"value":"/                         vec![(2, 'a'), (1, 'b'), (2, 'c'), (2, 'b')]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40475,"byte_end":40549,"line_start":1214,"line_end":1214,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40554,"byte_end":40561,"line_start":1215,"line_end":1215,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2585},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41450,"byte_end":41469,"line_start":1239,"line_end":1239,"column_start":8,"column_end":27},"name":"dedup_by_with_count","qualname":"::Itertools::dedup_by_with_count","value":"pub fn dedup_by_with_count<Cmp>(Self, Cmp) -> DedupByWithCount<Self, Cmp>\nwhere Self: Sized, Cmp: FnMut(&Self::Item, &Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Remove duplicates from sections of consecutive identical elements, while keeping a count of\n how many repeated elements were present.\n This will determine equality using a comparison function.\n If the iterator is sorted, all elements will be unique.","sig":null,"attributes":[{"value":"/ Remove duplicates from sections of consecutive identical elements, while keeping a count of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40705,"byte_end":40800,"line_start":1223,"line_end":1223,"column_start":5,"column_end":100}},{"value":"/ how many repeated elements were present.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40805,"byte_end":40849,"line_start":1224,"line_end":1224,"column_start":5,"column_end":49}},{"value":"/ This will determine equality using a comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40854,"byte_end":40915,"line_start":1225,"line_end":1225,"column_start":5,"column_end":66}},{"value":"/ If the iterator is sorted, all elements will be unique.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40920,"byte_end":40979,"line_start":1226,"line_end":1226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40984,"byte_end":40987,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `(usize, Self::Item)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":40992,"byte_end":41043,"line_start":1228,"line_end":1228,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41048,"byte_end":41051,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ This iterator is *fused*.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41056,"byte_end":41085,"line_start":1230,"line_end":1230,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41090,"byte_end":41093,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41098,"byte_end":41105,"line_start":1232,"line_end":1232,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41110,"byte_end":41139,"line_start":1233,"line_end":1233,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41144,"byte_end":41147,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 'a'), (1, 'a'), (0, 'b'), (0, 'c'), (1, 'c'), (1, 'b'), (2, 'b')];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41152,"byte_end":41242,"line_start":1235,"line_end":1235,"column_start":5,"column_end":95}},{"value":"/ itertools::assert_equal(data.into_iter().dedup_by_with_count(|x, y| x.1 == y.1),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41247,"byte_end":41331,"line_start":1236,"line_end":1236,"column_start":5,"column_end":89}},{"value":"/                         vec![(2, (0, 'a')), (1, (0, 'b')), (2, (0, 'c')), (2, (1, 'b'))]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41336,"byte_end":41430,"line_start":1237,"line_end":1237,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41435,"byte_end":41442,"line_start":1238,"line_end":1238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42400,"byte_end":42410,"line_start":1262,"line_end":1262,"column_start":8,"column_end":18},"name":"duplicates","qualname":"::Itertools::duplicates","value":"pub fn duplicates(Self) -> Duplicates<Self> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41673,"byte_end":41764,"line_start":1247,"line_end":1247,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41769,"byte_end":41832,"line_start":1248,"line_end":1248,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41837,"byte_end":41840,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41845,"byte_end":41938,"line_start":1250,"line_end":1250,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":41943,"byte_end":42038,"line_start":1251,"line_end":1251,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42043,"byte_end":42123,"line_start":1252,"line_end":1252,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42128,"byte_end":42131,"line_start":1253,"line_end":1253,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42136,"byte_end":42143,"line_start":1254,"line_end":1254,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42148,"byte_end":42177,"line_start":1255,"line_end":1255,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42182,"byte_end":42185,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42190,"byte_end":42238,"line_start":1257,"line_end":1257,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42243,"byte_end":42301,"line_start":1258,"line_end":1258,"column_start":5,"column_end":63}},{"value":"/                         vec![20, 10]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42306,"byte_end":42348,"line_start":1259,"line_end":1259,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42353,"byte_end":42360,"line_start":1260,"line_end":1260,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42365,"byte_end":42392,"line_start":1261,"line_end":1261,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2588},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43487,"byte_end":43500,"line_start":1287,"line_end":1287,"column_start":8,"column_end":21},"name":"duplicates_by","qualname":"::Itertools::duplicates_by","value":"pub fn duplicates_by<V, F>(Self, F) -> DuplicatesBy<Self, V, F> where\nSelf: Sized, V: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that produces elements that appear more than once during the\n iteration. Duplicates are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that produces elements that appear more than once during the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42559,"byte_end":42650,"line_start":1269,"line_end":1269,"column_start":5,"column_end":96}},{"value":"/ iteration. Duplicates are detected using hash and equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42655,"byte_end":42718,"line_start":1270,"line_end":1270,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42723,"byte_end":42726,"line_start":1271,"line_end":1271,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to with the keying function `f` by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42731,"byte_end":42823,"line_start":1272,"line_end":1272,"column_start":5,"column_end":97}},{"value":"/ hash and equality. The keys are stored in a hash map in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42828,"byte_end":42901,"line_start":1273,"line_end":1273,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42906,"byte_end":42909,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the duplicate items in the order in which they occur in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":42914,"byte_end":43007,"line_start":1275,"line_end":1275,"column_start":5,"column_end":98}},{"value":"/ the adapted iterator. Each duplicate item is returned exactly once. If an item appears more","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43012,"byte_end":43107,"line_start":1276,"line_end":1276,"column_start":5,"column_end":100}},{"value":"/ than twice, the second item is the item retained and the rest are discarded.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43112,"byte_end":43192,"line_start":1277,"line_end":1277,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43197,"byte_end":43200,"line_start":1278,"line_end":1278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43205,"byte_end":43212,"line_start":1279,"line_end":1279,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43217,"byte_end":43246,"line_start":1280,"line_end":1280,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43251,"byte_end":43254,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43259,"byte_end":43308,"line_start":1282,"line_end":1282,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().duplicates_by(|s| s.len()),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43313,"byte_end":43385,"line_start":1283,"line_end":1283,"column_start":5,"column_end":77}},{"value":"/                         vec![\"aa\", \"c\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43390,"byte_end":43435,"line_start":1284,"line_end":1284,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43440,"byte_end":43447,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43452,"byte_end":43479,"line_start":1286,"line_end":1286,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2591},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44492,"byte_end":44498,"line_start":1314,"line_end":1314,"column_start":8,"column_end":14},"name":"unique","qualname":"::Itertools::unique","value":"pub fn unique(Self) -> Unique<Self> where Self: Sized, Self::Item: Clone +\nEq + Hash","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration. Duplicates\n are detected using hash and equality.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43708,"byte_end":43774,"line_start":1295,"line_end":1295,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration. Duplicates","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43779,"byte_end":43842,"line_start":1296,"line_end":1296,"column_start":5,"column_end":68}},{"value":"/ are detected using hash and equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43847,"byte_end":43888,"line_start":1297,"line_end":1297,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43893,"byte_end":43896,"line_start":1298,"line_end":1298,"column_start":5,"column_end":8}},{"value":"/ Clones of visited elements are stored in a hash set in the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43901,"byte_end":43963,"line_start":1299,"line_end":1299,"column_start":5,"column_end":67}},{"value":"/ iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43968,"byte_end":43981,"line_start":1300,"line_end":1300,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43986,"byte_end":43989,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":43994,"byte_end":44068,"line_start":1302,"line_end":1302,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44073,"byte_end":44143,"line_start":1303,"line_end":1303,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44148,"byte_end":44207,"line_start":1304,"line_end":1304,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44212,"byte_end":44215,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44220,"byte_end":44227,"line_start":1306,"line_end":1306,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44232,"byte_end":44261,"line_start":1307,"line_end":1307,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44266,"byte_end":44269,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ let data = vec![10, 20, 30, 20, 40, 10, 50];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44274,"byte_end":44322,"line_start":1309,"line_end":1309,"column_start":5,"column_end":53}},{"value":"/ itertools::assert_equal(data.into_iter().unique(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44327,"byte_end":44381,"line_start":1310,"line_end":1310,"column_start":5,"column_end":59}},{"value":"/                         vec![10, 20, 30, 40, 50]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44386,"byte_end":44440,"line_start":1311,"line_end":1311,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44445,"byte_end":44452,"line_start":1312,"line_end":1312,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44457,"byte_end":44484,"line_start":1313,"line_end":1313,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2592},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45481,"byte_end":45490,"line_start":1340,"line_end":1340,"column_start":8,"column_end":17},"name":"unique_by","qualname":"::Itertools::unique_by","value":"pub fn unique_by<V, F>(Self, F) -> UniqueBy<Self, V, F> where Self: Sized,\nV: Eq + Hash, F: FnMut(&Self::Item) -> V","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters out elements that have\n already been produced once during the iteration.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters out elements that have","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44643,"byte_end":44709,"line_start":1321,"line_end":1321,"column_start":5,"column_end":71}},{"value":"/ already been produced once during the iteration.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44714,"byte_end":44766,"line_start":1322,"line_end":1322,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44771,"byte_end":44774,"line_start":1323,"line_end":1323,"column_start":5,"column_end":8}},{"value":"/ Duplicates are detected by comparing the key they map to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44779,"byte_end":44839,"line_start":1324,"line_end":1324,"column_start":5,"column_end":65}},{"value":"/ with the keying function `f` by hash and equality.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44844,"byte_end":44898,"line_start":1325,"line_end":1325,"column_start":5,"column_end":59}},{"value":"/ The keys are stored in a hash set in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44903,"byte_end":44957,"line_start":1326,"line_end":1326,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44962,"byte_end":44965,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ The iterator is stable, returning the non-duplicate items in the order","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":44970,"byte_end":45044,"line_start":1328,"line_end":1328,"column_start":5,"column_end":79}},{"value":"/ in which they occur in the adapted iterator. In a set of duplicate","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45049,"byte_end":45119,"line_start":1329,"line_end":1329,"column_start":5,"column_end":75}},{"value":"/ items, the first item encountered is the item retained.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45124,"byte_end":45183,"line_start":1330,"line_end":1330,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45188,"byte_end":45191,"line_start":1331,"line_end":1331,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45196,"byte_end":45203,"line_start":1332,"line_end":1332,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45208,"byte_end":45237,"line_start":1333,"line_end":1333,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45242,"byte_end":45245,"line_start":1334,"line_end":1334,"column_start":5,"column_end":8}},{"value":"/ let data = vec![\"a\", \"bb\", \"aa\", \"c\", \"ccc\"];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45250,"byte_end":45299,"line_start":1335,"line_end":1335,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(data.into_iter().unique_by(|s| s.len()),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45304,"byte_end":45372,"line_start":1336,"line_end":1336,"column_start":5,"column_end":73}},{"value":"/                         vec![\"a\", \"bb\", \"ccc\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45377,"byte_end":45429,"line_start":1337,"line_end":1337,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45434,"byte_end":45441,"line_start":1338,"line_end":1338,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45446,"byte_end":45473,"line_start":1339,"line_end":1339,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2595},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46230,"byte_end":46248,"line_start":1360,"line_end":1360,"column_start":8,"column_end":26},"name":"peeking_take_while","qualname":"::Itertools::peeking_take_while","value":"pub fn peeking_take_while<F>(&mut Self, F) -> PeekingTakeWhile<, Self, F>\nwhere Self: Sized + PeekingNext, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from this iterator and\n takes items while the closure `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from this iterator and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45686,"byte_end":45752,"line_start":1348,"line_end":1348,"column_start":5,"column_end":71}},{"value":"/ takes items while the closure `accept` returns `true`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45757,"byte_end":45815,"line_start":1349,"line_end":1349,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45820,"byte_end":45823,"line_start":1350,"line_end":1350,"column_start":5,"column_end":8}},{"value":"/ This adaptor can only be used on iterators that implement `PeekingNext`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45828,"byte_end":45903,"line_start":1351,"line_end":1351,"column_start":5,"column_end":80}},{"value":"/ like `.peekable()`, `put_back` and a few other collection iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45908,"byte_end":45980,"line_start":1352,"line_end":1352,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45985,"byte_end":45988,"line_start":1353,"line_end":1353,"column_start":5,"column_end":8}},{"value":"/ The last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":45993,"byte_end":46066,"line_start":1354,"line_end":1354,"column_start":5,"column_end":78}},{"value":"/ `peeking_take_while` is done.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46071,"byte_end":46104,"line_start":1355,"line_end":1355,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46109,"byte_end":46112,"line_start":1356,"line_end":1356,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46117,"byte_end":46120,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ See also [`.take_while_ref()`](Itertools::take_while_ref)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46125,"byte_end":46186,"line_start":1358,"line_end":1358,"column_start":5,"column_end":66}},{"value":"/ which is a similar adaptor.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46191,"byte_end":46222,"line_start":1359,"line_end":1359,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47194,"byte_end":47208,"line_start":1385,"line_end":1385,"column_start":8,"column_end":22},"name":"take_while_ref","qualname":"::Itertools::take_while_ref","value":"pub fn take_while_ref<F>(&mut Self, F) -> TakeWhileRef<, Self, F> where\nSelf: Clone, F: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that borrows from a `Clone`-able iterator\n to only pick off elements while the predicate `accept` returns `true`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that borrows from a `Clone`-able iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46467,"byte_end":46539,"line_start":1367,"line_end":1367,"column_start":5,"column_end":77}},{"value":"/ to only pick off elements while the predicate `accept` returns `true`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46544,"byte_end":46618,"line_start":1368,"line_end":1368,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46623,"byte_end":46626,"line_start":1369,"line_end":1369,"column_start":5,"column_end":8}},{"value":"/ It uses the `Clone` trait to restore the original iterator so that the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46631,"byte_end":46705,"line_start":1370,"line_end":1370,"column_start":5,"column_end":79}},{"value":"/ last and rejected element (first `false`) is still available when","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46710,"byte_end":46779,"line_start":1371,"line_end":1371,"column_start":5,"column_end":74}},{"value":"/ `take_while_ref` is done.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46784,"byte_end":46813,"line_start":1372,"line_end":1372,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46818,"byte_end":46821,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46826,"byte_end":46833,"line_start":1374,"line_end":1374,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46838,"byte_end":46867,"line_start":1375,"line_end":1375,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46872,"byte_end":46875,"line_start":1376,"line_end":1376,"column_start":5,"column_end":8}},{"value":"/ let mut hexadecimals = \"0123456789abcdef\".chars();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46880,"byte_end":46934,"line_start":1377,"line_end":1377,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46939,"byte_end":46942,"line_start":1378,"line_end":1378,"column_start":5,"column_end":8}},{"value":"/ let decimals = hexadecimals.take_while_ref(|c| c.is_numeric())","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":46947,"byte_end":47013,"line_start":1379,"line_end":1379,"column_start":5,"column_end":71}},{"value":"/                            .collect::<String>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47018,"byte_end":47070,"line_start":1380,"line_end":1380,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(decimals, \"0123456789\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47075,"byte_end":47114,"line_start":1381,"line_end":1381,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(hexadecimals.next(), Some('a'));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47119,"byte_end":47166,"line_start":1382,"line_end":1382,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47171,"byte_end":47174,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47179,"byte_end":47186,"line_start":1384,"line_end":1384,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2599},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47874,"byte_end":47884,"line_start":1406,"line_end":1406,"column_start":8,"column_end":18},"name":"while_some","qualname":"::Itertools::while_some","value":"pub fn while_some<A>(Self) -> WhileSome<Self> where Self: Sized +\nIterator<Item = Option<A>>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that filters `Option<A>` iterator elements\n and produces `A`. Stops on the first `None` encountered.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that filters `Option<A>` iterator elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47394,"byte_end":47467,"line_start":1392,"line_end":1392,"column_start":5,"column_end":78}},{"value":"/ and produces `A`. Stops on the first `None` encountered.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47472,"byte_end":47532,"line_start":1393,"line_end":1393,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47537,"byte_end":47540,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `A`, the unwrapped element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47545,"byte_end":47601,"line_start":1395,"line_end":1395,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47606,"byte_end":47609,"line_start":1396,"line_end":1396,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47614,"byte_end":47621,"line_start":1397,"line_end":1397,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47626,"byte_end":47655,"line_start":1398,"line_end":1398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47660,"byte_end":47663,"line_start":1399,"line_end":1399,"column_start":5,"column_end":8}},{"value":"/ // List all hexadecimal digits","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47668,"byte_end":47702,"line_start":1400,"line_end":1400,"column_start":5,"column_end":39}},{"value":"/ itertools::assert_equal(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47707,"byte_end":47735,"line_start":1401,"line_end":1401,"column_start":5,"column_end":33}},{"value":"/     (0..).map(|i| std::char::from_digit(i, 16)).while_some(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47740,"byte_end":47805,"line_start":1402,"line_end":1402,"column_start":5,"column_end":70}},{"value":"/     \"0123456789abcdef\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47810,"byte_end":47846,"line_start":1403,"line_end":1403,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47851,"byte_end":47854,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":47859,"byte_end":47866,"line_start":1405,"line_end":1405,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2601},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49316,"byte_end":49334,"line_start":1445,"line_end":1445,"column_start":8,"column_end":26},"name":"tuple_combinations","qualname":"::Itertools::tuple_combinations","value":"pub fn tuple_combinations<T>(Self) -> TupleCombinations<Self, T> where\nSelf: Sized + Clone, Self::Item: Clone, T: adaptors::HasCombination<Self>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the combinations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the combinations of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48020,"byte_end":48093,"line_start":1412,"line_end":1412,"column_start":5,"column_end":78}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48098,"byte_end":48128,"line_start":1413,"line_end":1413,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48133,"byte_end":48136,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ Iterator element can be any homogeneous tuple of type `Self::Item` with","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48141,"byte_end":48216,"line_start":1415,"line_end":1415,"column_start":5,"column_end":80}},{"value":"/ size up to 12.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48221,"byte_end":48239,"line_start":1416,"line_end":1416,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48244,"byte_end":48247,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48252,"byte_end":48259,"line_start":1418,"line_end":1418,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48264,"byte_end":48293,"line_start":1419,"line_end":1419,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48298,"byte_end":48301,"line_start":1420,"line_end":1420,"column_start":5,"column_end":8}},{"value":"/ let mut v = Vec::new();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48306,"byte_end":48333,"line_start":1421,"line_end":1421,"column_start":5,"column_end":32}},{"value":"/ for (a, b) in (1..5).tuple_combinations() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48338,"byte_end":48385,"line_start":1422,"line_end":1422,"column_start":5,"column_end":52}},{"value":"/     v.push((a, b));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48390,"byte_end":48413,"line_start":1423,"line_end":1423,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48418,"byte_end":48423,"line_start":1424,"line_end":1424,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(v, vec![(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48428,"byte_end":48500,"line_start":1425,"line_end":1425,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48505,"byte_end":48508,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/ let mut it = (1..5).tuple_combinations();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48513,"byte_end":48558,"line_start":1427,"line_end":1427,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Some((1, 2, 3)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48563,"byte_end":48606,"line_start":1428,"line_end":1428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 2, 4)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48611,"byte_end":48654,"line_start":1429,"line_end":1429,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((1, 3, 4)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48659,"byte_end":48702,"line_start":1430,"line_end":1430,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(Some((2, 3, 4)), it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48707,"byte_end":48750,"line_start":1431,"line_end":1431,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(None, it.next());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48755,"byte_end":48787,"line_start":1432,"line_end":1432,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48792,"byte_end":48795,"line_start":1433,"line_end":1433,"column_start":5,"column_end":8}},{"value":"/ // this requires a type hint","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48800,"byte_end":48832,"line_start":1434,"line_end":1434,"column_start":5,"column_end":37}},{"value":"/ let it = (1..5).tuple_combinations::<(_, _, _)>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48837,"byte_end":48891,"line_start":1435,"line_end":1435,"column_start":5,"column_end":59}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48896,"byte_end":48978,"line_start":1436,"line_end":1436,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48983,"byte_end":48986,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ // you can also specify the complete type","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":48991,"byte_end":49036,"line_start":1438,"line_end":1438,"column_start":5,"column_end":50}},{"value":"/ use itertools::TupleCombinations;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49041,"byte_end":49078,"line_start":1439,"line_end":1439,"column_start":5,"column_end":42}},{"value":"/ use std::ops::Range;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49083,"byte_end":49107,"line_start":1440,"line_end":1440,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49112,"byte_end":49115,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ let it: TupleCombinations<Range<u32>, (u32, u32, u32)> = (1..5).tuple_combinations();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49120,"byte_end":49209,"line_start":1442,"line_end":1442,"column_start":5,"column_end":94}},{"value":"/ itertools::assert_equal(it, vec![(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49214,"byte_end":49296,"line_start":1443,"line_end":1443,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49301,"byte_end":49308,"line_start":1444,"line_end":1444,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50545,"byte_end":50557,"line_start":1483,"line_end":1483,"column_start":8,"column_end":20},"name":"combinations","qualname":"::Itertools::combinations","value":"pub fn combinations(Self, usize) -> Combinations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over the `k`-length combinations of\n the elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over the `k`-length combinations of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49551,"byte_end":49631,"line_start":1453,"line_end":1453,"column_start":5,"column_end":85}},{"value":"/ the elements from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49636,"byte_end":49670,"line_start":1454,"line_end":1454,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49675,"byte_end":49678,"line_start":1455,"line_end":1455,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49683,"byte_end":49777,"line_start":1456,"line_end":1456,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49782,"byte_end":49819,"line_start":1457,"line_end":1457,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49824,"byte_end":49827,"line_start":1458,"line_end":1458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49832,"byte_end":49839,"line_start":1459,"line_end":1459,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49844,"byte_end":49873,"line_start":1460,"line_end":1460,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49878,"byte_end":49881,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/ let it = (1..5).combinations(3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49886,"byte_end":49922,"line_start":1462,"line_end":1462,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49927,"byte_end":49964,"line_start":1463,"line_end":1463,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49969,"byte_end":49991,"line_start":1464,"line_end":1464,"column_start":5,"column_end":27}},{"value":"/     vec![1, 2, 4],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":49996,"byte_end":50018,"line_start":1465,"line_end":1465,"column_start":5,"column_end":27}},{"value":"/     vec![1, 3, 4],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50023,"byte_end":50045,"line_start":1466,"line_end":1466,"column_start":5,"column_end":27}},{"value":"/     vec![2, 3, 4],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50050,"byte_end":50072,"line_start":1467,"line_end":1467,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50077,"byte_end":50084,"line_start":1468,"line_end":1468,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50089,"byte_end":50096,"line_start":1469,"line_end":1469,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50101,"byte_end":50104,"line_start":1470,"line_end":1470,"column_start":5,"column_end":8}},{"value":"/ Note: Combinations does not take into account the equality of the iterated values.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50109,"byte_end":50195,"line_start":1471,"line_end":1471,"column_start":5,"column_end":91}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50200,"byte_end":50207,"line_start":1472,"line_end":1472,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50212,"byte_end":50241,"line_start":1473,"line_end":1473,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50246,"byte_end":50249,"line_start":1474,"line_end":1474,"column_start":5,"column_end":8}},{"value":"/ let it = vec![1, 2, 2].into_iter().combinations(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50254,"byte_end":50309,"line_start":1475,"line_end":1475,"column_start":5,"column_end":60}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50314,"byte_end":50351,"line_start":1476,"line_end":1476,"column_start":5,"column_end":42}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50356,"byte_end":50403,"line_start":1477,"line_end":1477,"column_start":5,"column_end":52}},{"value":"/     vec![1, 2], // Note: these are the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50408,"byte_end":50455,"line_start":1478,"line_end":1478,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50460,"byte_end":50479,"line_start":1479,"line_end":1479,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50484,"byte_end":50491,"line_start":1480,"line_end":1480,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50496,"byte_end":50503,"line_start":1481,"line_end":1481,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50508,"byte_end":50537,"line_start":1482,"line_end":1482,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2604},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51366,"byte_end":51395,"line_start":1510,"line_end":1510,"column_start":8,"column_end":37},"name":"combinations_with_replacement","qualname":"::Itertools::combinations_with_replacement","value":"pub fn combinations_with_replacement(Self, usize)\n-> CombinationsWithReplacement<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator that iterates over the `k`-length combinations of\n the elements from an iterator, with replacement.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates over the `k`-length combinations of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50716,"byte_end":50788,"line_start":1490,"line_end":1490,"column_start":5,"column_end":77}},{"value":"/ the elements from an iterator, with replacement.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50793,"byte_end":50845,"line_start":1491,"line_end":1491,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50850,"byte_end":50853,"line_start":1492,"line_end":1492,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new Vec per iteration,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50858,"byte_end":50952,"line_start":1493,"line_end":1493,"column_start":5,"column_end":99}},{"value":"/ and clones the iterator elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50957,"byte_end":50994,"line_start":1494,"line_end":1494,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":50999,"byte_end":51002,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51007,"byte_end":51014,"line_start":1496,"line_end":1496,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51019,"byte_end":51048,"line_start":1497,"line_end":1497,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51053,"byte_end":51056,"line_start":1498,"line_end":1498,"column_start":5,"column_end":8}},{"value":"/ let it = (1..4).combinations_with_replacement(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51061,"byte_end":51114,"line_start":1499,"line_end":1499,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51119,"byte_end":51156,"line_start":1500,"line_end":1500,"column_start":5,"column_end":42}},{"value":"/     vec![1, 1],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51161,"byte_end":51180,"line_start":1501,"line_end":1501,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51185,"byte_end":51204,"line_start":1502,"line_end":1502,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51209,"byte_end":51228,"line_start":1503,"line_end":1503,"column_start":5,"column_end":24}},{"value":"/     vec![2, 2],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51233,"byte_end":51252,"line_start":1504,"line_end":1504,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51257,"byte_end":51276,"line_start":1505,"line_end":1505,"column_start":5,"column_end":24}},{"value":"/     vec![3, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51281,"byte_end":51300,"line_start":1506,"line_end":1506,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51305,"byte_end":51312,"line_start":1507,"line_end":1507,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51317,"byte_end":51324,"line_start":1508,"line_end":1508,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51329,"byte_end":51358,"line_start":1509,"line_end":1509,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2605},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52910,"byte_end":52922,"line_start":1556,"line_end":1556,"column_start":8,"column_end":20},"name":"permutations","qualname":"::Itertools::permutations","value":"pub fn permutations(Self, usize) -> Permutations<Self> where Self: Sized,\nSelf::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that iterates over all k-permutations of the\n elements from an iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that iterates over all k-permutations of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51602,"byte_end":51677,"line_start":1518,"line_end":1518,"column_start":5,"column_end":80}},{"value":"/ elements from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51682,"byte_end":51712,"line_start":1519,"line_end":1519,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51717,"byte_end":51720,"line_start":1520,"line_end":1520,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>` with length `k`. The iterator","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51725,"byte_end":51801,"line_start":1521,"line_end":1521,"column_start":5,"column_end":81}},{"value":"/ produces a new Vec per iteration, and clones the iterator elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51806,"byte_end":51877,"line_start":1522,"line_end":1522,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51882,"byte_end":51885,"line_start":1523,"line_end":1523,"column_start":5,"column_end":8}},{"value":"/ If `k` is greater than the length of the input iterator, the resultant","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51890,"byte_end":51964,"line_start":1524,"line_end":1524,"column_start":5,"column_end":79}},{"value":"/ iterator adaptor will be empty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":51969,"byte_end":52004,"line_start":1525,"line_end":1525,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52009,"byte_end":52012,"line_start":1526,"line_end":1526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52017,"byte_end":52024,"line_start":1527,"line_end":1527,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52029,"byte_end":52058,"line_start":1528,"line_end":1528,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52063,"byte_end":52066,"line_start":1529,"line_end":1529,"column_start":5,"column_end":8}},{"value":"/ let perms = (5..8).permutations(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52071,"byte_end":52110,"line_start":1530,"line_end":1530,"column_start":5,"column_end":44}},{"value":"/ itertools::assert_equal(perms, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52115,"byte_end":52155,"line_start":1531,"line_end":1531,"column_start":5,"column_end":45}},{"value":"/     vec![5, 6],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52160,"byte_end":52179,"line_start":1532,"line_end":1532,"column_start":5,"column_end":24}},{"value":"/     vec![5, 7],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52184,"byte_end":52203,"line_start":1533,"line_end":1533,"column_start":5,"column_end":24}},{"value":"/     vec![6, 5],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52208,"byte_end":52227,"line_start":1534,"line_end":1534,"column_start":5,"column_end":24}},{"value":"/     vec![6, 7],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52232,"byte_end":52251,"line_start":1535,"line_end":1535,"column_start":5,"column_end":24}},{"value":"/     vec![7, 5],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52256,"byte_end":52275,"line_start":1536,"line_end":1536,"column_start":5,"column_end":24}},{"value":"/     vec![7, 6],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52280,"byte_end":52299,"line_start":1537,"line_end":1537,"column_start":5,"column_end":24}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52304,"byte_end":52311,"line_start":1538,"line_end":1538,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52316,"byte_end":52323,"line_start":1539,"line_end":1539,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52328,"byte_end":52331,"line_start":1540,"line_end":1540,"column_start":5,"column_end":8}},{"value":"/ Note: Permutations does not take into account the equality of the iterated values.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52336,"byte_end":52422,"line_start":1541,"line_end":1541,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52427,"byte_end":52430,"line_start":1542,"line_end":1542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52435,"byte_end":52442,"line_start":1543,"line_end":1543,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52447,"byte_end":52476,"line_start":1544,"line_end":1544,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52481,"byte_end":52484,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ let it = vec![2, 2].into_iter().permutations(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52489,"byte_end":52541,"line_start":1546,"line_end":1546,"column_start":5,"column_end":57}},{"value":"/ itertools::assert_equal(it, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52546,"byte_end":52583,"line_start":1547,"line_end":1547,"column_start":5,"column_end":42}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52588,"byte_end":52635,"line_start":1548,"line_end":1548,"column_start":5,"column_end":52}},{"value":"/     vec![2, 2], // Note: these are the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52640,"byte_end":52687,"line_start":1549,"line_end":1549,"column_start":5,"column_end":52}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52692,"byte_end":52699,"line_start":1550,"line_end":1550,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52704,"byte_end":52711,"line_start":1551,"line_end":1551,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52716,"byte_end":52719,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ Note: The source iterator is collected lazily, and will not be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52724,"byte_end":52790,"line_start":1553,"line_end":1553,"column_start":5,"column_end":71}},{"value":"/ re-iterated if the permutations adaptor is completed and re-iterated.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52795,"byte_end":52868,"line_start":1554,"line_end":1554,"column_start":5,"column_end":78}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":52873,"byte_end":52902,"line_start":1555,"line_end":1555,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54066,"byte_end":54074,"line_start":1592,"line_end":1592,"column_start":8,"column_end":16},"name":"powerset","qualname":"::Itertools::powerset","value":"pub fn powerset(Self) -> Powerset<Self> where Self: Sized, Self::Item: Clone","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator that iterates through the powerset of the elements from an\n iterator.","sig":null,"attributes":[{"value":"/ Return an iterator that iterates through the powerset of the elements from an","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53081,"byte_end":53162,"line_start":1563,"line_end":1563,"column_start":5,"column_end":86}},{"value":"/ iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53167,"byte_end":53180,"line_start":1564,"line_end":1564,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53185,"byte_end":53188,"line_start":1565,"line_end":1565,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Vec<Self::Item>`. The iterator produces a new `Vec`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53193,"byte_end":53274,"line_start":1566,"line_end":1566,"column_start":5,"column_end":86}},{"value":"/ per iteration, and clones the iterator elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53279,"byte_end":53331,"line_start":1567,"line_end":1567,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53336,"byte_end":53339,"line_start":1568,"line_end":1568,"column_start":5,"column_end":8}},{"value":"/ The powerset of a set contains all subsets including the empty set and the full","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53344,"byte_end":53427,"line_start":1569,"line_end":1569,"column_start":5,"column_end":88}},{"value":"/ input set. A powerset has length _2^n_ where _n_ is the length of the input","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53432,"byte_end":53511,"line_start":1570,"line_end":1570,"column_start":5,"column_end":84}},{"value":"/ set.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53516,"byte_end":53524,"line_start":1571,"line_end":1571,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53529,"byte_end":53532,"line_start":1572,"line_end":1572,"column_start":5,"column_end":8}},{"value":"/ Each `Vec` produced by this iterator represents a subset of the elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53537,"byte_end":53613,"line_start":1573,"line_end":1573,"column_start":5,"column_end":81}},{"value":"/ produced by the source iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53618,"byte_end":53654,"line_start":1574,"line_end":1574,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53659,"byte_end":53662,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53667,"byte_end":53674,"line_start":1576,"line_end":1576,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53679,"byte_end":53708,"line_start":1577,"line_end":1577,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53713,"byte_end":53716,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ let sets = (1..4).powerset().collect::<Vec<_>>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53721,"byte_end":53774,"line_start":1579,"line_end":1579,"column_start":5,"column_end":58}},{"value":"/ itertools::assert_equal(sets, vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53779,"byte_end":53818,"line_start":1580,"line_end":1580,"column_start":5,"column_end":44}},{"value":"/     vec![],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53823,"byte_end":53838,"line_start":1581,"line_end":1581,"column_start":5,"column_end":20}},{"value":"/     vec![1],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53843,"byte_end":53859,"line_start":1582,"line_end":1582,"column_start":5,"column_end":21}},{"value":"/     vec![2],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53864,"byte_end":53880,"line_start":1583,"line_end":1583,"column_start":5,"column_end":21}},{"value":"/     vec![3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53885,"byte_end":53901,"line_start":1584,"line_end":1584,"column_start":5,"column_end":21}},{"value":"/     vec![1, 2],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53906,"byte_end":53925,"line_start":1585,"line_end":1585,"column_start":5,"column_end":24}},{"value":"/     vec![1, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53930,"byte_end":53949,"line_start":1586,"line_end":1586,"column_start":5,"column_end":24}},{"value":"/     vec![2, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53954,"byte_end":53973,"line_start":1587,"line_end":1587,"column_start":5,"column_end":24}},{"value":"/     vec![1, 2, 3],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":53978,"byte_end":54000,"line_start":1588,"line_end":1588,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54005,"byte_end":54012,"line_start":1589,"line_end":1589,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54017,"byte_end":54024,"line_start":1590,"line_end":1590,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54029,"byte_end":54058,"line_start":1591,"line_end":1591,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54880,"byte_end":54889,"line_start":1616,"line_end":1616,"column_start":8,"column_end":17},"name":"pad_using","qualname":"::Itertools::pad_using","value":"pub fn pad_using<F>(Self, usize, F) -> PadUsing<Self, F> where Self: Sized,\nF: FnMut(usize) -> Self::Item","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that pads the sequence to a minimum length of\n `min` by filling missing elements using a closure `f`.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that pads the sequence to a minimum length of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54209,"byte_end":54285,"line_start":1599,"line_end":1599,"column_start":5,"column_end":81}},{"value":"/ `min` by filling missing elements using a closure `f`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54290,"byte_end":54348,"line_start":1600,"line_end":1600,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54353,"byte_end":54356,"line_start":1601,"line_end":1601,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is `Self::Item`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54361,"byte_end":54403,"line_start":1602,"line_end":1602,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54408,"byte_end":54411,"line_start":1603,"line_end":1603,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54416,"byte_end":54423,"line_start":1604,"line_end":1604,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54428,"byte_end":54457,"line_start":1605,"line_end":1605,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54462,"byte_end":54465,"line_start":1606,"line_end":1606,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54470,"byte_end":54513,"line_start":1607,"line_end":1607,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 10, 12, 14, 16, 18]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54518,"byte_end":54591,"line_start":1608,"line_end":1608,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54596,"byte_end":54599,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ let it = (0..10).pad_using(5, |i| 2*i);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54604,"byte_end":54647,"line_start":1610,"line_end":1610,"column_start":5,"column_end":48}},{"value":"/ itertools::assert_equal(it, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54652,"byte_end":54720,"line_start":1611,"line_end":1611,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54725,"byte_end":54728,"line_start":1612,"line_end":1612,"column_start":5,"column_end":8}},{"value":"/ let it = (0..5).pad_using(10, |i| 2*i).rev();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54733,"byte_end":54782,"line_start":1613,"line_end":1613,"column_start":5,"column_end":54}},{"value":"/ itertools::assert_equal(it, vec![18, 16, 14, 12, 10, 4, 3, 2, 1, 0]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54787,"byte_end":54860,"line_start":1614,"line_end":1614,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":54865,"byte_end":54872,"line_start":1615,"line_end":1615,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55804,"byte_end":55817,"line_start":1642,"line_end":1642,"column_start":8,"column_end":21},"name":"with_position","qualname":"::Itertools::with_position","value":"pub fn with_position(Self) -> WithPosition<Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that wraps each element in a `Position` to\n ease special-case handling of the first or last elements.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that wraps each element in a `Position` to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55068,"byte_end":55141,"line_start":1623,"line_end":1623,"column_start":5,"column_end":78}},{"value":"/ ease special-case handling of the first or last elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55146,"byte_end":55207,"line_start":1624,"line_end":1624,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55212,"byte_end":55215,"line_start":1625,"line_end":1625,"column_start":5,"column_end":8}},{"value":"/ Iterator element type is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55220,"byte_end":55248,"line_start":1626,"line_end":1626,"column_start":5,"column_end":33}},{"value":"/ [`Position<Self::Item>`](Position)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55253,"byte_end":55291,"line_start":1627,"line_end":1627,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55296,"byte_end":55299,"line_start":1628,"line_end":1628,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55304,"byte_end":55311,"line_start":1629,"line_end":1629,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Position};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55316,"byte_end":55357,"line_start":1630,"line_end":1630,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55362,"byte_end":55365,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ let it = (0..4).with_position();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55370,"byte_end":55406,"line_start":1632,"line_end":1632,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55411,"byte_end":55442,"line_start":1633,"line_end":1633,"column_start":5,"column_end":36}},{"value":"/                         vec![Position::First(0),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55447,"byte_end":55499,"line_start":1634,"line_end":1634,"column_start":5,"column_end":57}},{"value":"/                              Position::Middle(1),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55504,"byte_end":55557,"line_start":1635,"line_end":1635,"column_start":5,"column_end":58}},{"value":"/                              Position::Middle(2),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55562,"byte_end":55615,"line_start":1636,"line_end":1636,"column_start":5,"column_end":58}},{"value":"/                              Position::Last(3)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55620,"byte_end":55673,"line_start":1637,"line_end":1637,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55678,"byte_end":55681,"line_start":1638,"line_end":1638,"column_start":5,"column_end":8}},{"value":"/ let it = (0..1).with_position();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55686,"byte_end":55722,"line_start":1639,"line_end":1639,"column_start":5,"column_end":41}},{"value":"/ itertools::assert_equal(it, vec![Position::Only(0)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55727,"byte_end":55784,"line_start":1640,"line_end":1640,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55789,"byte_end":55796,"line_start":1641,"line_end":1641,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56496,"byte_end":56505,"line_start":1661,"line_end":1661,"column_start":8,"column_end":17},"name":"positions","qualname":"::Itertools::positions","value":"pub fn positions<P>(Self, P) -> Positions<Self, P> where Self: Sized,\nP: FnMut(Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that yields the indices of all elements\n satisfying a predicate, counted from the start of the iterator.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that yields the indices of all elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":55933,"byte_end":56003,"line_start":1648,"line_end":1648,"column_start":5,"column_end":75}},{"value":"/ satisfying a predicate, counted from the start of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56008,"byte_end":56075,"line_start":1649,"line_end":1649,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56080,"byte_end":56083,"line_start":1650,"line_end":1650,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `iter.enumerate().filter(|(_, v)| predicate(v)).map(|(i, _)| i)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56088,"byte_end":56171,"line_start":1651,"line_end":1651,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56176,"byte_end":56179,"line_start":1652,"line_end":1652,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56184,"byte_end":56191,"line_start":1653,"line_end":1653,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56196,"byte_end":56225,"line_start":1654,"line_end":1654,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56230,"byte_end":56233,"line_start":1655,"line_end":1655,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 3, 4, 6, 7, 9];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56238,"byte_end":56282,"line_start":1656,"line_end":1656,"column_start":5,"column_end":49}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 0), vec![1, 4, 5]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56287,"byte_end":56369,"line_start":1657,"line_end":1657,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56374,"byte_end":56377,"line_start":1658,"line_end":1658,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(data.iter().positions(|v| v % 2 == 1).rev(), vec![7, 6, 3, 2, 0]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56382,"byte_end":56476,"line_start":1659,"line_end":1659,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56481,"byte_end":56488,"line_start":1660,"line_end":1660,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57058,"byte_end":57064,"line_start":1678,"line_end":1678,"column_start":8,"column_end":14},"name":"update","qualname":"::Itertools::update","value":"pub fn update<F>(Self, F) -> Update<Self, F> where Self: Sized,\nF: FnMut(&mut Self::Item) -> ()","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an iterator adaptor that applies a mutating function\n to each element before yielding it.","sig":null,"attributes":[{"value":"/ Return an iterator adaptor that applies a mutating function","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56684,"byte_end":56747,"line_start":1668,"line_end":1668,"column_start":5,"column_end":68}},{"value":"/ to each element before yielding it.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56752,"byte_end":56791,"line_start":1669,"line_end":1669,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56796,"byte_end":56799,"line_start":1670,"line_end":1670,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56804,"byte_end":56811,"line_start":1671,"line_end":1671,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56816,"byte_end":56845,"line_start":1672,"line_end":1672,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56850,"byte_end":56853,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![3, 2, 1]];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56858,"byte_end":56903,"line_start":1674,"line_end":1674,"column_start":5,"column_end":50}},{"value":"/ let it = input.into_iter().update(|mut v| v.push(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56908,"byte_end":56965,"line_start":1675,"line_end":1675,"column_start":5,"column_end":62}},{"value":"/ itertools::assert_equal(it, vec![vec![1, 0], vec![3, 2, 1, 0]]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":56970,"byte_end":57038,"line_start":1676,"line_end":1676,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57043,"byte_end":57050,"line_start":1677,"line_end":1677,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57690,"byte_end":57700,"line_start":1699,"line_end":1699,"column_start":8,"column_end":18},"name":"next_tuple","qualname":"::Itertools::next_tuple","value":"pub fn next_tuple<T>(&mut Self) -> Option<T> where Self: Sized + Iterator<Item\n= T::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Advances the iterator and returns the next items grouped in a tuple of\n a specific size (up to 12).","sig":null,"attributes":[{"value":"/ Advances the iterator and returns the next items grouped in a tuple of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57257,"byte_end":57331,"line_start":1686,"line_end":1686,"column_start":5,"column_end":79}},{"value":"/ a specific size (up to 12).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57336,"byte_end":57367,"line_start":1687,"line_end":1687,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57372,"byte_end":57375,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ If there are enough elements to be grouped in a tuple, then the tuple is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57380,"byte_end":57456,"line_start":1689,"line_end":1689,"column_start":5,"column_end":81}},{"value":"/ returned inside `Some`, otherwise `None` is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57461,"byte_end":57518,"line_start":1690,"line_end":1690,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57523,"byte_end":57526,"line_start":1691,"line_end":1691,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57531,"byte_end":57538,"line_start":1692,"line_end":1692,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57543,"byte_end":57572,"line_start":1693,"line_end":1693,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57577,"byte_end":57580,"line_start":1694,"line_end":1694,"column_start":5,"column_end":8}},{"value":"/ let mut iter = 1..5;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57585,"byte_end":57609,"line_start":1695,"line_end":1695,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57614,"byte_end":57617,"line_start":1696,"line_end":1696,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some((1, 2)), iter.next_tuple());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57622,"byte_end":57670,"line_start":1697,"line_end":1697,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57675,"byte_end":57682,"line_start":1698,"line_end":1698,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2616},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58443,"byte_end":58456,"line_start":1724,"line_end":1724,"column_start":8,"column_end":21},"name":"collect_tuple","qualname":"::Itertools::collect_tuple","value":"pub fn collect_tuple<T>(Self) -> Option<T> where Self: Sized + Iterator<Item =\nT::Item>, T: traits::HomogeneousTuple","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Collects all items from the iterator into a tuple of a specific size\n (up to 12).","sig":null,"attributes":[{"value":"/ Collects all items from the iterator into a tuple of a specific size","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57883,"byte_end":57955,"line_start":1706,"line_end":1706,"column_start":5,"column_end":77}},{"value":"/ (up to 12).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57960,"byte_end":57975,"line_start":1707,"line_end":1707,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57980,"byte_end":57983,"line_start":1708,"line_end":1708,"column_start":5,"column_end":8}},{"value":"/ If the number of elements inside the iterator is **exactly** equal to","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":57988,"byte_end":58061,"line_start":1709,"line_end":1709,"column_start":5,"column_end":78}},{"value":"/ the tuple size, then the tuple is returned inside `Some`, otherwise","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58066,"byte_end":58137,"line_start":1710,"line_end":1710,"column_start":5,"column_end":76}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58142,"byte_end":58165,"line_start":1711,"line_end":1711,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58170,"byte_end":58173,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58178,"byte_end":58185,"line_start":1713,"line_end":1713,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58190,"byte_end":58219,"line_start":1714,"line_end":1714,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58224,"byte_end":58227,"line_start":1715,"line_end":1715,"column_start":5,"column_end":8}},{"value":"/ let iter = 1..3;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58232,"byte_end":58252,"line_start":1716,"line_end":1716,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58257,"byte_end":58260,"line_start":1717,"line_end":1717,"column_start":5,"column_end":8}},{"value":"/ if let Some((x, y)) = iter.collect_tuple() {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58265,"byte_end":58313,"line_start":1718,"line_end":1718,"column_start":5,"column_end":53}},{"value":"/     assert_eq!((x, y), (1, 2))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58318,"byte_end":58352,"line_start":1719,"line_end":1719,"column_start":5,"column_end":39}},{"value":"/ } else {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58357,"byte_end":58369,"line_start":1720,"line_end":1720,"column_start":5,"column_end":17}},{"value":"/     panic!(\"Expected two elements\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58374,"byte_end":58413,"line_start":1721,"line_end":1721,"column_start":5,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58418,"byte_end":58423,"line_start":1722,"line_end":1722,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58428,"byte_end":58435,"line_start":1723,"line_end":1723,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59137,"byte_end":59150,"line_start":1748,"line_end":1748,"column_start":8,"column_end":21},"name":"find_position","qualname":"::Itertools::find_position","value":"pub fn find_position<P>(&mut Self, P) -> Option<(usize, Self::Item)> where\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Find the position and value of the first element satisfying a predicate.","sig":null,"attributes":[{"value":"/ Find the position and value of the first element satisfying a predicate.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58789,"byte_end":58865,"line_start":1738,"line_end":1738,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58870,"byte_end":58873,"line_start":1739,"line_end":1739,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58878,"byte_end":58940,"line_start":1740,"line_end":1740,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58945,"byte_end":58948,"line_start":1741,"line_end":1741,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58953,"byte_end":58960,"line_start":1742,"line_end":1742,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58965,"byte_end":58994,"line_start":1743,"line_end":1743,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":58999,"byte_end":59002,"line_start":1744,"line_end":1744,"column_start":5,"column_end":8}},{"value":"/ let text = \"Hα\";","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59007,"byte_end":59028,"line_start":1745,"line_end":1745,"column_start":5,"column_end":25}},{"value":"/ assert_eq!(text.chars().find_position(|ch| ch.is_lowercase()), Some((1, 'α')));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59033,"byte_end":59117,"line_start":1746,"line_end":1746,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59122,"byte_end":59129,"line_start":1747,"line_end":1747,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2620},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59937,"byte_end":59949,"line_start":1770,"line_end":1770,"column_start":8,"column_end":20},"name":"find_or_last","qualname":"::Itertools::find_or_last","value":"pub fn find_or_last<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the last element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the last element, if any.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59424,"byte_end":59522,"line_start":1758,"line_end":1758,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59527,"byte_end":59530,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59535,"byte_end":59597,"line_start":1760,"line_end":1760,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59602,"byte_end":59605,"line_start":1761,"line_end":1761,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59610,"byte_end":59617,"line_start":1762,"line_end":1762,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59622,"byte_end":59651,"line_start":1763,"line_end":1763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59656,"byte_end":59659,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59664,"byte_end":59695,"line_start":1765,"line_end":1765,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 5), Some(&4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59700,"byte_end":59767,"line_start":1766,"line_end":1766,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(numbers.iter().find_or_last(|&&x| x > 2), Some(&3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59772,"byte_end":59839,"line_start":1767,"line_end":1767,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_last(|&x| x > 5), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59844,"byte_end":59917,"line_start":1768,"line_end":1768,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":59922,"byte_end":59929,"line_start":1769,"line_end":1769,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2623},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60745,"byte_end":60758,"line_start":1790,"line_end":1790,"column_start":8,"column_end":21},"name":"find_or_first","qualname":"::Itertools::find_or_first","value":"pub fn find_or_first<P>(Self, P) -> Option<Self::Item> where Self: Sized,\nP: FnMut(&Self::Item) -> bool","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Find the value of the first element satisfying a predicate or return the first element, if any.","sig":null,"attributes":[{"value":"/ Find the value of the first element satisfying a predicate or return the first element, if any.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60228,"byte_end":60327,"line_start":1778,"line_end":1778,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60332,"byte_end":60335,"line_start":1779,"line_end":1779,"column_start":5,"column_end":8}},{"value":"/ The iterator is not advanced past the first element found.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60340,"byte_end":60402,"line_start":1780,"line_end":1780,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60407,"byte_end":60410,"line_start":1781,"line_end":1781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60415,"byte_end":60422,"line_start":1782,"line_end":1782,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60427,"byte_end":60456,"line_start":1783,"line_end":1783,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60461,"byte_end":60464,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60469,"byte_end":60500,"line_start":1785,"line_end":1785,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 5), Some(&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60505,"byte_end":60573,"line_start":1786,"line_end":1786,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(numbers.iter().find_or_first(|&&x| x > 2), Some(&3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60578,"byte_end":60646,"line_start":1787,"line_end":1787,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(std::iter::empty::<i32>().find_or_first(|&x| x > 5), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60651,"byte_end":60725,"line_start":1788,"line_end":1788,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":60730,"byte_end":60737,"line_start":1789,"line_end":1789,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2626},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62066,"byte_end":62074,"line_start":1826,"line_end":1826,"column_start":8,"column_end":16},"name":"contains","qualname":"::Itertools::contains","value":"pub fn contains<Q>(&mut Self, &Q) -> bool where Self: Sized,\nSelf::Item: Borrow<Q>, Q: PartialEq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Returns `true` if the given item is present in this iterator.","sig":null,"attributes":[{"value":"/ Returns `true` if the given item is present in this iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61073,"byte_end":61138,"line_start":1801,"line_end":1801,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61143,"byte_end":61146,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ This method is short-circuiting. If the given item is present in this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61151,"byte_end":61224,"line_start":1803,"line_end":1803,"column_start":5,"column_end":78}},{"value":"/ iterator, this method will consume the iterator up-to-and-including","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61229,"byte_end":61300,"line_start":1804,"line_end":1804,"column_start":5,"column_end":76}},{"value":"/ the item. If the given item is not present in this iterator, the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61305,"byte_end":61373,"line_start":1805,"line_end":1805,"column_start":5,"column_end":73}},{"value":"/ iterator will be exhausted.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61378,"byte_end":61409,"line_start":1806,"line_end":1806,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61414,"byte_end":61417,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61422,"byte_end":61429,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61434,"byte_end":61463,"line_start":1809,"line_end":1809,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61468,"byte_end":61471,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ #[derive(PartialEq, Debug)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61476,"byte_end":61507,"line_start":1811,"line_end":1811,"column_start":5,"column_end":36}},{"value":"/ enum Enum { A, B, C, D, E, }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61512,"byte_end":61544,"line_start":1812,"line_end":1812,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61549,"byte_end":61553,"line_start":1813,"line_end":1813,"column_start":5,"column_end":9}},{"value":"/ let mut iter = vec![Enum::A, Enum::B, Enum::C, Enum::D].into_iter();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61558,"byte_end":61630,"line_start":1814,"line_end":1814,"column_start":5,"column_end":77}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61635,"byte_end":61639,"line_start":1815,"line_end":1815,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `B`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61644,"byte_end":61672,"line_start":1816,"line_end":1816,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::B), true);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61677,"byte_end":61723,"line_start":1817,"line_end":1817,"column_start":5,"column_end":51}},{"value":"/ // `B` was found, so the iterator now rests at the item after `B` (i.e, `C`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61728,"byte_end":61809,"line_start":1818,"line_end":1818,"column_start":5,"column_end":86}},{"value":"/ assert_eq!(iter.next(), Some(Enum::C));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61814,"byte_end":61857,"line_start":1819,"line_end":1819,"column_start":5,"column_end":48}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61862,"byte_end":61866,"line_start":1820,"line_end":1820,"column_start":5,"column_end":9}},{"value":"/ // search `iter` for `E`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61871,"byte_end":61899,"line_start":1821,"line_end":1821,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(iter.contains(&Enum::E), false);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61904,"byte_end":61951,"line_start":1822,"line_end":1822,"column_start":5,"column_end":52}},{"value":"/ // `E` wasn't found, so `iter` is now exhausted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":61956,"byte_end":62007,"line_start":1823,"line_end":1823,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62012,"byte_end":62046,"line_start":1824,"line_end":1824,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62051,"byte_end":62058,"line_start":1825,"line_end":1825,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62790,"byte_end":62799,"line_start":1851,"line_end":1851,"column_start":8,"column_end":17},"name":"all_equal","qualname":"::Itertools::all_equal","value":"pub fn all_equal(&mut Self) -> bool where Self: Sized, Self::Item: PartialEq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Check whether all elements compare equal.","sig":null,"attributes":[{"value":"/ Check whether all elements compare equal.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62251,"byte_end":62296,"line_start":1835,"line_end":1835,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62301,"byte_end":62304,"line_start":1836,"line_end":1836,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have equal elements:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62309,"byte_end":62367,"line_start":1837,"line_end":1837,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62372,"byte_end":62375,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62380,"byte_end":62387,"line_start":1839,"line_end":1839,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62392,"byte_end":62421,"line_start":1840,"line_end":1840,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62426,"byte_end":62429,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 1, 1, 2, 2, 3, 3, 3, 4, 5, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62434,"byte_end":62487,"line_start":1842,"line_end":1842,"column_start":5,"column_end":58}},{"value":"/ assert!(!data.iter().all_equal());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62492,"byte_end":62530,"line_start":1843,"line_end":1843,"column_start":5,"column_end":43}},{"value":"/ assert!(data[0..3].iter().all_equal());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62535,"byte_end":62578,"line_start":1844,"line_end":1844,"column_start":5,"column_end":48}},{"value":"/ assert!(data[3..5].iter().all_equal());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62583,"byte_end":62626,"line_start":1845,"line_end":1845,"column_start":5,"column_end":48}},{"value":"/ assert!(data[5..8].iter().all_equal());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62631,"byte_end":62674,"line_start":1846,"line_end":1846,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62679,"byte_end":62682,"line_start":1847,"line_end":1847,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62687,"byte_end":62723,"line_start":1848,"line_end":1848,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_equal());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62728,"byte_end":62770,"line_start":1849,"line_end":1849,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":62775,"byte_end":62782,"line_start":1850,"line_end":1850,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63531,"byte_end":63541,"line_start":1877,"line_end":1877,"column_start":8,"column_end":18},"name":"all_unique","qualname":"::Itertools::all_unique","value":"pub fn all_unique(&mut Self) -> bool where Self: Sized, Self::Item: Eq + Hash","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Check whether all elements are unique (non equal).","sig":null,"attributes":[{"value":"/ Check whether all elements are unique (non equal).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63009,"byte_end":63063,"line_start":1861,"line_end":1861,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63068,"byte_end":63071,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ Empty iterators are considered to have unique elements:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63076,"byte_end":63135,"line_start":1863,"line_end":1863,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63140,"byte_end":63143,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63148,"byte_end":63155,"line_start":1865,"line_end":1865,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63160,"byte_end":63189,"line_start":1866,"line_end":1866,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63194,"byte_end":63197,"line_start":1867,"line_end":1867,"column_start":5,"column_end":8}},{"value":"/ let data = vec![1, 2, 3, 4, 1, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63202,"byte_end":63240,"line_start":1868,"line_end":1868,"column_start":5,"column_end":43}},{"value":"/ assert!(!data.iter().all_unique());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63245,"byte_end":63284,"line_start":1869,"line_end":1869,"column_start":5,"column_end":44}},{"value":"/ assert!(data[0..4].iter().all_unique());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63289,"byte_end":63333,"line_start":1870,"line_end":1870,"column_start":5,"column_end":49}},{"value":"/ assert!(data[1..6].iter().all_unique());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63338,"byte_end":63382,"line_start":1871,"line_end":1871,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63387,"byte_end":63390,"line_start":1872,"line_end":1872,"column_start":5,"column_end":8}},{"value":"/ let data : Option<usize> = None;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63395,"byte_end":63431,"line_start":1873,"line_end":1873,"column_start":5,"column_end":41}},{"value":"/ assert!(data.into_iter().all_unique());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63436,"byte_end":63479,"line_start":1874,"line_end":1874,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63484,"byte_end":63491,"line_start":1875,"line_end":1875,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63496,"byte_end":63523,"line_start":1876,"line_end":1876,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64294,"byte_end":64302,"line_start":1900,"line_end":1900,"column_start":8,"column_end":16},"name":"dropping","qualname":"::Itertools::dropping","value":"pub fn dropping(Self, usize) -> Self where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Consume the first `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the first `n` elements from the iterator eagerly,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63726,"byte_end":63787,"line_start":1885,"line_end":1885,"column_start":5,"column_end":66}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63792,"byte_end":63831,"line_start":1886,"line_end":1886,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63836,"byte_end":63839,"line_start":1887,"line_end":1887,"column_start":5,"column_end":8}},{"value":"/ It works similarly to *.skip(* `n` *)* except it is eager and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63844,"byte_end":63909,"line_start":1888,"line_end":1888,"column_start":5,"column_end":70}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63914,"byte_end":63946,"line_start":1889,"line_end":1889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63951,"byte_end":63954,"line_start":1890,"line_end":1890,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63959,"byte_end":63966,"line_start":1891,"line_end":1891,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":63971,"byte_end":64000,"line_start":1892,"line_end":1892,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64005,"byte_end":64008,"line_start":1893,"line_end":1893,"column_start":5,"column_end":8}},{"value":"/ let mut iter = \"αβγ\".chars().dropping(2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64013,"byte_end":64061,"line_start":1894,"line_end":1894,"column_start":5,"column_end":50}},{"value":"/ itertools::assert_equal(iter, \"γ\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64066,"byte_end":64114,"line_start":1895,"line_end":1895,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64119,"byte_end":64126,"line_start":1896,"line_end":1896,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64131,"byte_end":64134,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ *Fusing notes: if the iterator is exhausted by dropping,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64139,"byte_end":64199,"line_start":1898,"line_end":1898,"column_start":5,"column_end":65}},{"value":"/ the result of calling `.next()` again depends on the iterator implementation.*","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64204,"byte_end":64286,"line_start":1899,"line_end":1899,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64995,"byte_end":65008,"line_start":1924,"line_end":1924,"column_start":8,"column_end":21},"name":"dropping_back","qualname":"::Itertools::dropping_back","value":"pub fn dropping_back(Self, usize) -> Self where Self: Sized,\nSelf: DoubleEndedIterator","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Consume the last `n` elements from the iterator eagerly,\n and return the same iterator again.","sig":null,"attributes":[{"value":"/ Consume the last `n` elements from the iterator eagerly,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64445,"byte_end":64505,"line_start":1909,"line_end":1909,"column_start":5,"column_end":65}},{"value":"/ and return the same iterator again.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64510,"byte_end":64549,"line_start":1910,"line_end":1910,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64554,"byte_end":64557,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ This is only possible on double ended iterators. `n` may be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64562,"byte_end":64625,"line_start":1912,"line_end":1912,"column_start":5,"column_end":68}},{"value":"/ larger than the number of elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64630,"byte_end":64669,"line_start":1913,"line_end":1913,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64674,"byte_end":64677,"line_start":1914,"line_end":1914,"column_start":5,"column_end":8}},{"value":"/ Note: This method is eager, dropping the back elements immediately and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64682,"byte_end":64756,"line_start":1915,"line_end":1915,"column_start":5,"column_end":79}},{"value":"/ preserves the iterator type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64761,"byte_end":64793,"line_start":1916,"line_end":1916,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64798,"byte_end":64801,"line_start":1917,"line_end":1917,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64806,"byte_end":64813,"line_start":1918,"line_end":1918,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64818,"byte_end":64847,"line_start":1919,"line_end":1919,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64852,"byte_end":64855,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ let init = vec![0, 3, 6, 9].into_iter().dropping_back(1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64860,"byte_end":64921,"line_start":1921,"line_end":1921,"column_start":5,"column_end":66}},{"value":"/ itertools::assert_equal(init, vec![0, 3, 6]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64926,"byte_end":64975,"line_start":1922,"line_end":1922,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":64980,"byte_end":64987,"line_start":1923,"line_end":1923,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65796,"byte_end":65803,"line_start":1952,"line_end":1952,"column_start":8,"column_end":15},"name":"foreach","qualname":"::Itertools::foreach","value":"pub fn foreach<F>(Self, F) where F: FnMut(Self::Item) -> (), Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Run the closure `f` eagerly on each element of the iterator.","sig":null,"attributes":[{"value":"/ Run the closure `f` eagerly on each element of the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65205,"byte_end":65269,"line_start":1934,"line_end":1934,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65274,"byte_end":65277,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ Consumes the iterator until its end.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65282,"byte_end":65322,"line_start":1936,"line_end":1936,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65327,"byte_end":65330,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65335,"byte_end":65342,"line_start":1938,"line_end":1938,"column_start":5,"column_end":12}},{"value":"/ use std::sync::mpsc::channel;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65347,"byte_end":65380,"line_start":1939,"line_end":1939,"column_start":5,"column_end":38}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65385,"byte_end":65414,"line_start":1940,"line_end":1940,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65419,"byte_end":65422,"line_start":1941,"line_end":1941,"column_start":5,"column_end":8}},{"value":"/ let (tx, rx) = channel();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65427,"byte_end":65456,"line_start":1942,"line_end":1942,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65461,"byte_end":65464,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ // use .foreach() to apply a function to each value -- sending it","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65469,"byte_end":65538,"line_start":1944,"line_end":1944,"column_start":5,"column_end":74}},{"value":"/ (0..5).map(|x| x * 2 + 1).foreach(|x| { tx.send(x).unwrap(); } );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65543,"byte_end":65612,"line_start":1945,"line_end":1945,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65617,"byte_end":65620,"line_start":1946,"line_end":1946,"column_start":5,"column_end":8}},{"value":"/ drop(tx);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65625,"byte_end":65638,"line_start":1947,"line_end":1947,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65643,"byte_end":65646,"line_start":1948,"line_end":1948,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(rx.iter(), vec![1, 3, 5, 7, 9]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65651,"byte_end":65711,"line_start":1949,"line_end":1949,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65716,"byte_end":65723,"line_start":1950,"line_end":1950,"column_start":5,"column_end":12}},{"value":"deprecated(note = \"Use .for_each() instead\", since = \"0.8.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65728,"byte_end":65788,"line_start":1951,"line_end":1951,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66437,"byte_end":66443,"line_start":1972,"line_end":1972,"column_start":8,"column_end":14},"name":"concat","qualname":"::Itertools::concat","value":"pub fn concat(Self) -> Self::Item where Self: Sized,\nSelf::Item: Extend<<<Self as Iterator>::Item as IntoIterator>::Item> +\nIntoIterator + Default","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Combine all an iterator's elements into one element by using [`Extend`].","sig":null,"attributes":[{"value":"/ Combine all an iterator's elements into one element by using [`Extend`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":65925,"byte_end":66001,"line_start":1959,"line_end":1959,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66006,"byte_end":66009,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ This combinator will extend the first item with each of the rest of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66014,"byte_end":66089,"line_start":1961,"line_end":1961,"column_start":5,"column_end":80}},{"value":"/ items of the iterator. If the iterator is empty, the default value of","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66094,"byte_end":66167,"line_start":1962,"line_end":1962,"column_start":5,"column_end":78}},{"value":"/ `I::Item` is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66172,"byte_end":66198,"line_start":1963,"line_end":1963,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66203,"byte_end":66206,"line_start":1964,"line_end":1964,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66211,"byte_end":66222,"line_start":1965,"line_end":1965,"column_start":5,"column_end":16}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66227,"byte_end":66256,"line_start":1966,"line_end":1966,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66261,"byte_end":66264,"line_start":1967,"line_end":1967,"column_start":5,"column_end":8}},{"value":"/ let input = vec![vec![1], vec![2, 3], vec![4, 5, 6]];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66269,"byte_end":66326,"line_start":1968,"line_end":1968,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(input.into_iter().concat(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66331,"byte_end":66373,"line_start":1969,"line_end":1969,"column_start":5,"column_end":47}},{"value":"/            vec![1, 2, 3, 4, 5, 6]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66378,"byte_end":66417,"line_start":1970,"line_end":1970,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66422,"byte_end":66429,"line_start":1971,"line_end":1971,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66782,"byte_end":66793,"line_start":1982,"line_end":1982,"column_start":8,"column_end":19},"name":"collect_vec","qualname":"::Itertools::collect_vec","value":"pub fn collect_vec(Self) -> Vec<Self::Item> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" `.collect_vec()` is simply a type specialization of [`Iterator::collect`],\n for convenience.\n","sig":null,"attributes":[{"value":"/ `.collect_vec()` is simply a type specialization of [`Iterator::collect`],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66637,"byte_end":66715,"line_start":1979,"line_end":1979,"column_start":5,"column_end":83}},{"value":"/ for convenience.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66720,"byte_end":66740,"line_start":1980,"line_end":1980,"column_start":5,"column_end":25}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66745,"byte_end":66774,"line_start":1981,"line_end":1981,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67437,"byte_end":67448,"line_start":2009,"line_end":2009,"column_start":8,"column_end":19},"name":"try_collect","qualname":"::Itertools::try_collect","value":"pub fn try_collect<T, U, E>(Self) -> Result<U, E> where Self: Sized +\nIterator<Item = Result<T, E>>, Result<U, E>: FromIterator<Result<T, E>>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" `.try_collect()` is more convenient way of writing\n `.collect::<Result<_, _>>()`","sig":null,"attributes":[{"value":"/ `.try_collect()` is more convenient way of writing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66885,"byte_end":66939,"line_start":1988,"line_end":1988,"column_start":5,"column_end":59}},{"value":"/ `.collect::<Result<_, _>>()`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66944,"byte_end":66976,"line_start":1989,"line_end":1989,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66981,"byte_end":66984,"line_start":1990,"line_end":1990,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":66989,"byte_end":67002,"line_start":1991,"line_end":1991,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67007,"byte_end":67010,"line_start":1992,"line_end":1992,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67015,"byte_end":67022,"line_start":1993,"line_end":1993,"column_start":5,"column_end":12}},{"value":"/ use std::{fs, io};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67027,"byte_end":67049,"line_start":1994,"line_end":1994,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67054,"byte_end":67083,"line_start":1995,"line_end":1995,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67088,"byte_end":67091,"line_start":1996,"line_end":1996,"column_start":5,"column_end":8}},{"value":"/ fn process_dir_entries(entries: &[fs::DirEntry]) {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67096,"byte_end":67150,"line_start":1997,"line_end":1997,"column_start":5,"column_end":59}},{"value":"/     // ...","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67155,"byte_end":67169,"line_start":1998,"line_end":1998,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67174,"byte_end":67179,"line_start":1999,"line_end":1999,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67184,"byte_end":67187,"line_start":2000,"line_end":2000,"column_start":5,"column_end":8}},{"value":"/ fn do_stuff() -> std::io::Result<()> {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67192,"byte_end":67234,"line_start":2001,"line_end":2001,"column_start":5,"column_end":47}},{"value":"/     let entries: Vec<_> = fs::read_dir(\".\")?.try_collect()?;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67239,"byte_end":67303,"line_start":2002,"line_end":2002,"column_start":5,"column_end":69}},{"value":"/     process_dir_entries(&entries);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67308,"byte_end":67346,"line_start":2003,"line_end":2003,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67351,"byte_end":67354,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67359,"byte_end":67373,"line_start":2005,"line_end":2005,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67378,"byte_end":67383,"line_start":2006,"line_end":2006,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67388,"byte_end":67395,"line_start":2007,"line_end":2007,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67400,"byte_end":67429,"line_start":2008,"line_end":2008,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68158,"byte_end":68166,"line_start":2033,"line_end":2033,"column_start":8,"column_end":16},"name":"set_from","qualname":"::Itertools::set_from","value":"pub fn set_from<'a, A: 'a, J>(&mut Self, J) -> usize where Self: Iterator<Item\n= &'a mut A>, J: IntoIterator<Item = A>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Assign to each reference in `self` from the `from` iterator,\n stopping at the shortest of the two iterators.","sig":null,"attributes":[{"value":"/ Assign to each reference in `self` from the `from` iterator,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67633,"byte_end":67697,"line_start":2017,"line_end":2017,"column_start":5,"column_end":69}},{"value":"/ stopping at the shortest of the two iterators.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67702,"byte_end":67752,"line_start":2018,"line_end":2018,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67757,"byte_end":67760,"line_start":2019,"line_end":2019,"column_start":5,"column_end":8}},{"value":"/ The `from` iterator is queried for its next element before the `self`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67765,"byte_end":67838,"line_start":2020,"line_end":2020,"column_start":5,"column_end":78}},{"value":"/ iterator, and if either is exhausted the method is done.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67843,"byte_end":67903,"line_start":2021,"line_end":2021,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67908,"byte_end":67911,"line_start":2022,"line_end":2022,"column_start":5,"column_end":8}},{"value":"/ Return the number of elements written.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67916,"byte_end":67958,"line_start":2023,"line_end":2023,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67963,"byte_end":67966,"line_start":2024,"line_end":2024,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67971,"byte_end":67978,"line_start":2025,"line_end":2025,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":67983,"byte_end":68012,"line_start":2026,"line_end":2026,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68017,"byte_end":68020,"line_start":2027,"line_end":2027,"column_start":5,"column_end":8}},{"value":"/ let mut xs = [0; 4];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68025,"byte_end":68049,"line_start":2028,"line_end":2028,"column_start":5,"column_end":29}},{"value":"/ xs.iter_mut().set_from(1..);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68054,"byte_end":68086,"line_start":2029,"line_end":2029,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(xs, [1, 2, 3, 4]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68091,"byte_end":68124,"line_start":2030,"line_end":2030,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68129,"byte_end":68136,"line_start":2031,"line_end":2031,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68141,"byte_end":68150,"line_start":2032,"line_end":2032,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68912,"byte_end":68916,"line_start":2059,"line_end":2059,"column_start":8,"column_end":12},"name":"join","qualname":"::Itertools::join","value":"pub fn join(&mut Self, &str) -> String where Self::Item: std::fmt::Display","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Combine all iterator elements into one String, separated by `sep`.","sig":null,"attributes":[{"value":"/ Combine all iterator elements into one String, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68534,"byte_end":68604,"line_start":2048,"line_end":2048,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68609,"byte_end":68612,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/ Use the `Display` implementation of each element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68617,"byte_end":68670,"line_start":2050,"line_end":2050,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68675,"byte_end":68678,"line_start":2051,"line_end":2051,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68683,"byte_end":68690,"line_start":2052,"line_end":2052,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68695,"byte_end":68724,"line_start":2053,"line_end":2053,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68729,"byte_end":68732,"line_start":2054,"line_end":2054,"column_start":5,"column_end":8}},{"value":"/ assert_eq!([\"a\", \"b\", \"c\"].iter().join(\", \"), \"a, b, c\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68737,"byte_end":68798,"line_start":2055,"line_end":2055,"column_start":5,"column_end":66}},{"value":"/ assert_eq!([1, 2, 3].iter().join(\", \"), \"1, 2, 3\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68803,"byte_end":68858,"line_start":2056,"line_end":2056,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68863,"byte_end":68870,"line_start":2057,"line_end":2057,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":68875,"byte_end":68904,"line_start":2058,"line_end":2058,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70050,"byte_end":70056,"line_start":2093,"line_end":2093,"column_start":8,"column_end":14},"name":"format","qualname":"::Itertools::format","value":"pub fn format(Self, &str) -> Format<, Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69562,"byte_end":69615,"line_start":2078,"line_end":2078,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69620,"byte_end":69623,"line_start":2079,"line_end":2079,"column_start":5,"column_end":8}},{"value":"/ All elements are formatted (any formatting trait)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69628,"byte_end":69681,"line_start":2080,"line_end":2080,"column_start":5,"column_end":58}},{"value":"/ with `sep` inserted between each element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69686,"byte_end":69731,"line_start":2081,"line_end":2081,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69736,"byte_end":69739,"line_start":2082,"line_end":2082,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69744,"byte_end":69811,"line_start":2083,"line_end":2083,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69816,"byte_end":69819,"line_start":2084,"line_end":2084,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69824,"byte_end":69831,"line_start":2085,"line_end":2085,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69836,"byte_end":69865,"line_start":2086,"line_end":2086,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69870,"byte_end":69873,"line_start":2087,"line_end":2087,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69878,"byte_end":69913,"line_start":2088,"line_end":2088,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69918,"byte_end":69933,"line_start":2089,"line_end":2089,"column_start":5,"column_end":20}},{"value":"/     format!(\"{:.2}\", data.iter().format(\", \")),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69938,"byte_end":69989,"line_start":2090,"line_end":2090,"column_start":5,"column_end":56}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":69994,"byte_end":70030,"line_start":2091,"line_end":2091,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70035,"byte_end":70042,"line_start":2092,"line_end":2092,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71555,"byte_end":71566,"line_start":2131,"line_end":2131,"column_start":8,"column_end":19},"name":"format_with","qualname":"::Itertools::format_with","value":"pub fn format_with<F>(Self, &str, F) -> FormatWith<, Self, F> where\nSelf: Sized,\nF: FnMut(Self::Item, &mut dyn FnMut(&dyn fmt::Display) -> fmt::Result) ->\nfmt::Result","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Format all iterator elements, separated by `sep`.","sig":null,"attributes":[{"value":"/ Format all iterator elements, separated by `sep`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70180,"byte_end":70233,"line_start":2099,"line_end":2099,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70238,"byte_end":70241,"line_start":2100,"line_end":2100,"column_start":5,"column_end":8}},{"value":"/ This is a customizable version of [`.format()`](Itertools::format).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70246,"byte_end":70317,"line_start":2101,"line_end":2101,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70322,"byte_end":70325,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ The supplied closure `format` is called once per iterator element,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70330,"byte_end":70400,"line_start":2103,"line_end":2103,"column_start":5,"column_end":75}},{"value":"/ with two arguments: the element and a callback that takes a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70405,"byte_end":70468,"line_start":2104,"line_end":2104,"column_start":5,"column_end":68}},{"value":"/ `&Display` value, i.e. any reference to type that implements `Display`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70473,"byte_end":70548,"line_start":2105,"line_end":2105,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70553,"byte_end":70556,"line_start":2106,"line_end":2106,"column_start":5,"column_end":8}},{"value":"/ Using `&format_args!(...)` is the most versatile way to apply custom","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70561,"byte_end":70633,"line_start":2107,"line_end":2107,"column_start":5,"column_end":77}},{"value":"/ element formatting. The callback can be called multiple times if needed.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70638,"byte_end":70714,"line_start":2108,"line_end":2108,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70719,"byte_end":70722,"line_start":2109,"line_end":2109,"column_start":5,"column_end":8}},{"value":"/ **Panics** if the formatter helper is formatted more than once.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70727,"byte_end":70794,"line_start":2110,"line_end":2110,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70799,"byte_end":70802,"line_start":2111,"line_end":2111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70807,"byte_end":70814,"line_start":2112,"line_end":2112,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70819,"byte_end":70848,"line_start":2113,"line_end":2113,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70853,"byte_end":70856,"line_start":2114,"line_end":2114,"column_start":5,"column_end":8}},{"value":"/ let data = [1.1, 2.71828, -3.];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70861,"byte_end":70896,"line_start":2115,"line_end":2115,"column_start":5,"column_end":40}},{"value":"/ let data_formatter = data.iter().format_with(\", \", |elt, f| f(&format_args!(\"{:.2}\", elt)));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":70901,"byte_end":70997,"line_start":2116,"line_end":2116,"column_start":5,"column_end":101}},{"value":"/ assert_eq!(format!(\"{}\", data_formatter),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71002,"byte_end":71047,"line_start":2117,"line_end":2117,"column_start":5,"column_end":50}},{"value":"/            \"1.10, 2.72, -3.00\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71052,"byte_end":71088,"line_start":2118,"line_end":2118,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71093,"byte_end":71096,"line_start":2119,"line_end":2119,"column_start":5,"column_end":8}},{"value":"/ // .format_with() is recursively composable","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71101,"byte_end":71148,"line_start":2120,"line_end":2120,"column_start":5,"column_end":52}},{"value":"/ let matrix = [[1., 2., 3.],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71153,"byte_end":71184,"line_start":2121,"line_end":2121,"column_start":5,"column_end":36}},{"value":"/               [4., 5., 6.]];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71189,"byte_end":71221,"line_start":2122,"line_end":2122,"column_start":5,"column_end":37}},{"value":"/ let matrix_formatter = matrix.iter().format_with(\"\\n\", |row, f| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71226,"byte_end":71295,"line_start":2123,"line_end":2123,"column_start":5,"column_end":74}},{"value":"/                                 f(&row.iter().format_with(\", \", |elt, g| g(&elt)))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71300,"byte_end":71386,"line_start":2124,"line_end":2124,"column_start":5,"column_end":91}},{"value":"/                              });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71391,"byte_end":71427,"line_start":2125,"line_end":2125,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(format!(\"{}\", matrix_formatter),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71432,"byte_end":71479,"line_start":2126,"line_end":2126,"column_start":5,"column_end":52}},{"value":"/            \"1, 2, 3\\n4, 5, 6\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71484,"byte_end":71519,"line_start":2127,"line_end":2127,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71524,"byte_end":71527,"line_start":2128,"line_end":2128,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71532,"byte_end":71535,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71540,"byte_end":71547,"line_start":2130,"line_end":2130,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71928,"byte_end":71940,"line_start":2140,"line_end":2140,"column_start":8,"column_end":20},"name":"fold_results","qualname":"::Itertools::fold_results","value":"pub fn fold_results<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" See [`.fold_ok()`](Itertools::fold_ok).\n","sig":null,"attributes":[{"value":"/ See [`.fold_ok()`](Itertools::fold_ok).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71812,"byte_end":71855,"line_start":2138,"line_end":2138,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"Use .fold_ok() instead\", since = \"0.10.0\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":71860,"byte_end":71920,"line_start":2139,"line_end":2139,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":2657},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73603,"byte_end":73610,"line_start":2189,"line_end":2189,"column_start":8,"column_end":15},"name":"fold_ok","qualname":"::Itertools::fold_ok","value":"pub fn fold_ok<A, E, B, F>(&mut Self, B, F) -> Result<B, E> where\nSelf: Iterator<Item = Result<A, E>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Fold `Result` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Result` values from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72129,"byte_end":72171,"line_start":2147,"line_end":2147,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72176,"byte_end":72179,"line_start":2148,"line_end":2148,"column_start":5,"column_end":8}},{"value":"/ Only `Ok` values are folded. If no error is encountered, the folded","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72184,"byte_end":72255,"line_start":2149,"line_end":2149,"column_start":5,"column_end":76}},{"value":"/ value is returned inside `Ok`. Otherwise, the operation terminates","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72260,"byte_end":72330,"line_start":2150,"line_end":2150,"column_start":5,"column_end":75}},{"value":"/ and returns the first `Err` value it encounters. No iterator elements are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72335,"byte_end":72412,"line_start":2151,"line_end":2151,"column_start":5,"column_end":82}},{"value":"/ consumed after the first error.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72417,"byte_end":72452,"line_start":2152,"line_end":2152,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72457,"byte_end":72460,"line_start":2153,"line_end":2153,"column_start":5,"column_end":8}},{"value":"/ The first accumulator value is the `start` parameter.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72465,"byte_end":72522,"line_start":2154,"line_end":2154,"column_start":5,"column_end":62}},{"value":"/ Each iteration passes the accumulator value and the next value inside `Ok`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72527,"byte_end":72605,"line_start":2155,"line_end":2155,"column_start":5,"column_end":83}},{"value":"/ to the fold function `f` and its return value becomes the new accumulator value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72610,"byte_end":72694,"line_start":2156,"line_end":2156,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72699,"byte_end":72702,"line_start":2157,"line_end":2157,"column_start":5,"column_end":8}},{"value":"/ For example the sequence *Ok(1), Ok(2), Ok(3)* will result in a","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72707,"byte_end":72774,"line_start":2158,"line_end":2158,"column_start":5,"column_end":72}},{"value":"/ computation like this:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72779,"byte_end":72805,"line_start":2159,"line_end":2159,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72810,"byte_end":72813,"line_start":2160,"line_end":2160,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72818,"byte_end":72831,"line_start":2161,"line_end":2161,"column_start":5,"column_end":18}},{"value":"/ let mut accum = start;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72836,"byte_end":72862,"line_start":2162,"line_end":2162,"column_start":5,"column_end":31}},{"value":"/ accum = f(accum, 1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72867,"byte_end":72891,"line_start":2163,"line_end":2163,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72896,"byte_end":72920,"line_start":2164,"line_end":2164,"column_start":5,"column_end":29}},{"value":"/ accum = f(accum, 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72925,"byte_end":72949,"line_start":2165,"line_end":2165,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72954,"byte_end":72961,"line_start":2166,"line_end":2166,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72966,"byte_end":72969,"line_start":2167,"line_end":2167,"column_start":5,"column_end":8}},{"value":"/ With a `start` value of 0 and an addition as folding function,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":72974,"byte_end":73040,"line_start":2168,"line_end":2168,"column_start":5,"column_end":71}},{"value":"/ this effectively results in *((0 + 1) + 2) + 3*","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73045,"byte_end":73096,"line_start":2169,"line_end":2169,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73101,"byte_end":73104,"line_start":2170,"line_end":2170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73109,"byte_end":73116,"line_start":2171,"line_end":2171,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73121,"byte_end":73143,"line_start":2172,"line_end":2172,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73148,"byte_end":73177,"line_start":2173,"line_end":2173,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73182,"byte_end":73185,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ let values = [1, 2, -2, -1, 2, 1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73190,"byte_end":73228,"line_start":2175,"line_end":2175,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73233,"byte_end":73248,"line_start":2176,"line_end":2176,"column_start":5,"column_end":20}},{"value":"/     values.iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73253,"byte_end":73274,"line_start":2177,"line_end":2177,"column_start":5,"column_end":26}},{"value":"/           .map(Ok::<_, ()>)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73279,"byte_end":73310,"line_start":2178,"line_end":2178,"column_start":5,"column_end":36}},{"value":"/           .fold_ok(0, Add::add),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73315,"byte_end":73351,"line_start":2179,"line_end":2179,"column_start":5,"column_end":41}},{"value":"/     Ok(3)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73356,"byte_end":73369,"line_start":2180,"line_end":2180,"column_start":5,"column_end":18}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73374,"byte_end":73380,"line_start":2181,"line_end":2181,"column_start":5,"column_end":11}},{"value":"/ assert!(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73385,"byte_end":73397,"line_start":2182,"line_end":2182,"column_start":5,"column_end":17}},{"value":"/     values.iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73402,"byte_end":73423,"line_start":2183,"line_end":2183,"column_start":5,"column_end":26}},{"value":"/           .map(|&x| if x >= 0 { Ok(x) } else { Err(\"Negative number\") })","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73428,"byte_end":73504,"line_start":2184,"line_end":2184,"column_start":5,"column_end":81}},{"value":"/           .fold_ok(0, Add::add)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73509,"byte_end":73544,"line_start":2185,"line_end":2185,"column_start":5,"column_end":40}},{"value":"/           .is_err()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73549,"byte_end":73572,"line_start":2186,"line_end":2186,"column_start":5,"column_end":28}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73577,"byte_end":73583,"line_start":2187,"line_end":2187,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73588,"byte_end":73595,"line_start":2188,"line_end":2188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74784,"byte_end":74796,"line_start":2221,"line_end":2221,"column_start":8,"column_end":20},"name":"fold_options","qualname":"::Itertools::fold_options","value":"pub fn fold_options<A, B, F>(&mut Self, B, F) -> Option<B> where\nSelf: Iterator<Item = Option<A>>, F: FnMut(B, A) -> B","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Fold `Option` values from an iterator.","sig":null,"attributes":[{"value":"/ Fold `Option` values from an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":73955,"byte_end":73997,"line_start":2202,"line_end":2202,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74002,"byte_end":74005,"line_start":2203,"line_end":2203,"column_start":5,"column_end":8}},{"value":"/ Only `Some` values are folded. If no `None` is encountered, the folded","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74010,"byte_end":74084,"line_start":2204,"line_end":2204,"column_start":5,"column_end":79}},{"value":"/ value is returned inside `Some`. Otherwise, the operation terminates","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74089,"byte_end":74161,"line_start":2205,"line_end":2205,"column_start":5,"column_end":77}},{"value":"/ and returns `None`. No iterator elements are consumed after the `None`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74166,"byte_end":74241,"line_start":2206,"line_end":2206,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74246,"byte_end":74249,"line_start":2207,"line_end":2207,"column_start":5,"column_end":8}},{"value":"/ This is the `Option` equivalent to [`fold_ok`](Itertools::fold_ok).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74254,"byte_end":74325,"line_start":2208,"line_end":2208,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74330,"byte_end":74333,"line_start":2209,"line_end":2209,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74338,"byte_end":74345,"line_start":2210,"line_end":2210,"column_start":5,"column_end":12}},{"value":"/ use std::ops::Add;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74350,"byte_end":74372,"line_start":2211,"line_end":2211,"column_start":5,"column_end":27}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74377,"byte_end":74406,"line_start":2212,"line_end":2212,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74411,"byte_end":74414,"line_start":2213,"line_end":2213,"column_start":5,"column_end":8}},{"value":"/ let mut values = vec![Some(1), Some(2), Some(-2)].into_iter();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74419,"byte_end":74485,"line_start":2214,"line_end":2214,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(values.fold_options(5, Add::add), Some(5 + 1 + 2 - 2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74490,"byte_end":74560,"line_start":2215,"line_end":2215,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74565,"byte_end":74568,"line_start":2216,"line_end":2216,"column_start":5,"column_end":8}},{"value":"/ let mut more_values = vec![Some(2), None, Some(0)].into_iter();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74573,"byte_end":74640,"line_start":2217,"line_end":2217,"column_start":5,"column_end":72}},{"value":"/ assert!(more_values.fold_options(0, Add::add).is_none());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74645,"byte_end":74706,"line_start":2218,"line_end":2218,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(more_values.next().unwrap(), Some(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74711,"byte_end":74764,"line_start":2219,"line_end":2219,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":74769,"byte_end":74776,"line_start":2220,"line_end":2220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75673,"byte_end":75678,"line_start":2247,"line_end":2247,"column_start":8,"column_end":13},"name":"fold1","qualname":"::Itertools::fold1","value":"pub fn fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Accumulator of the elements in the iterator.","sig":null,"attributes":[{"value":"/ Accumulator of the elements in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75132,"byte_end":75180,"line_start":2234,"line_end":2234,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75185,"byte_end":75188,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ Like `.fold()`, without a base case. If the iterator is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75193,"byte_end":75252,"line_start":2236,"line_end":2236,"column_start":5,"column_end":64}},{"value":"/ empty, return `None`. With just one element, return it.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75257,"byte_end":75316,"line_start":2237,"line_end":2237,"column_start":5,"column_end":64}},{"value":"/ Otherwise elements are accumulated in sequence using the closure `f`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75321,"byte_end":75394,"line_start":2238,"line_end":2238,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75399,"byte_end":75402,"line_start":2239,"line_end":2239,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75407,"byte_end":75414,"line_start":2240,"line_end":2240,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75419,"byte_end":75448,"line_start":2241,"line_end":2241,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75453,"byte_end":75456,"line_start":2242,"line_end":2242,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).fold1(|x, y| x + y).unwrap_or(0), 45);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75461,"byte_end":75522,"line_start":2243,"line_end":2243,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..0).fold1(|x, y| x * y), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75527,"byte_end":75576,"line_start":2244,"line_end":2244,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75581,"byte_end":75588,"line_start":2245,"line_end":2245,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.10.2\", note = \"Use `Iterator::reduce` instead\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75593,"byte_end":75665,"line_start":2246,"line_end":2246,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77692,"byte_end":77702,"line_start":2302,"line_end":2302,"column_start":8,"column_end":18},"name":"tree_fold1","qualname":"::Itertools::tree_fold1","value":"pub fn tree_fold1<F>(Self, F) -> Option<Self::Item> where\nF: FnMut(Self::Item, Self::Item) -> Self::Item, Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Accumulate the elements in the iterator in a tree-like manner.","sig":null,"attributes":[{"value":"/ Accumulate the elements in the iterator in a tree-like manner.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75876,"byte_end":75942,"line_start":2254,"line_end":2254,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75947,"byte_end":75950,"line_start":2255,"line_end":2255,"column_start":5,"column_end":8}},{"value":"/ You can think of it as, while there's more than one item, repeatedly","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":75955,"byte_end":76027,"line_start":2256,"line_end":2256,"column_start":5,"column_end":77}},{"value":"/ combining adjacent items.  It does so in bottom-up-merge-sort order,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76032,"byte_end":76104,"line_start":2257,"line_end":2257,"column_start":5,"column_end":77}},{"value":"/ however, so that it needs only logarithmic stack space.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76109,"byte_end":76168,"line_start":2258,"line_end":2258,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76173,"byte_end":76176,"line_start":2259,"line_end":2259,"column_start":5,"column_end":8}},{"value":"/ This produces a call tree like the following (where the calls under","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76181,"byte_end":76252,"line_start":2260,"line_end":2260,"column_start":5,"column_end":76}},{"value":"/ an item are done after reading that item):","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76257,"byte_end":76303,"line_start":2261,"line_end":2261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76308,"byte_end":76311,"line_start":2262,"line_end":2262,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76316,"byte_end":76327,"line_start":2263,"line_end":2263,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76332,"byte_end":76349,"line_start":2264,"line_end":2264,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76354,"byte_end":76385,"line_start":2265,"line_end":2265,"column_start":5,"column_end":22}},{"value":"/ └─f └─f └─f │","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76390,"byte_end":76421,"line_start":2266,"line_end":2266,"column_start":5,"column_end":22}},{"value":"/   │   │   │ │","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76426,"byte_end":76451,"line_start":2267,"line_end":2267,"column_start":5,"column_end":22}},{"value":"/   └───f   └─f","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76456,"byte_end":76485,"line_start":2268,"line_end":2268,"column_start":5,"column_end":22}},{"value":"/       │     │","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76490,"byte_end":76511,"line_start":2269,"line_end":2269,"column_start":5,"column_end":22}},{"value":"/       └─────f","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76516,"byte_end":76545,"line_start":2270,"line_end":2270,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76550,"byte_end":76557,"line_start":2271,"line_end":2271,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76562,"byte_end":76565,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ Which, for non-associative functions, will typically produce a different","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76570,"byte_end":76646,"line_start":2273,"line_end":2273,"column_start":5,"column_end":81}},{"value":"/ result than the linear call tree used by [`Iterator::reduce`]:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76651,"byte_end":76717,"line_start":2274,"line_end":2274,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76722,"byte_end":76725,"line_start":2275,"line_end":2275,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76730,"byte_end":76741,"line_start":2276,"line_end":2276,"column_start":5,"column_end":16}},{"value":"/ 1 2 3 4 5 6 7","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76746,"byte_end":76763,"line_start":2277,"line_end":2277,"column_start":5,"column_end":22}},{"value":"/ │ │ │ │ │ │ │","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76768,"byte_end":76799,"line_start":2278,"line_end":2278,"column_start":5,"column_end":22}},{"value":"/ └─f─f─f─f─f─f","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76804,"byte_end":76835,"line_start":2279,"line_end":2279,"column_start":5,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76840,"byte_end":76847,"line_start":2280,"line_end":2280,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76852,"byte_end":76855,"line_start":2281,"line_end":2281,"column_start":5,"column_end":8}},{"value":"/ If `f` is associative, prefer the normal [`Iterator::reduce`] instead.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76860,"byte_end":76934,"line_start":2282,"line_end":2282,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76939,"byte_end":76942,"line_start":2283,"line_end":2283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76947,"byte_end":76954,"line_start":2284,"line_end":2284,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76959,"byte_end":76988,"line_start":2285,"line_end":2285,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":76993,"byte_end":76996,"line_start":2286,"line_end":2286,"column_start":5,"column_end":8}},{"value":"/ // The same tree as above","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77001,"byte_end":77030,"line_start":2287,"line_end":2287,"column_start":5,"column_end":34}},{"value":"/ let num_strings = (1..8).map(|x| x.to_string());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77035,"byte_end":77087,"line_start":2288,"line_end":2288,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(num_strings.tree_fold1(|x, y| format!(\"f({}, {})\", x, y)),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77092,"byte_end":77165,"line_start":2289,"line_end":2289,"column_start":5,"column_end":78}},{"value":"/     Some(String::from(\"f(f(f(1, 2), f(3, 4)), f(f(5, 6), 7))\")));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77170,"byte_end":77239,"line_start":2290,"line_end":2290,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77244,"byte_end":77247,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ // Like fold1, an empty iterator produces None","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77252,"byte_end":77302,"line_start":2292,"line_end":2292,"column_start":5,"column_end":55}},{"value":"/ assert_eq!((0..0).tree_fold1(|x, y| x * y), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77307,"byte_end":77361,"line_start":2293,"line_end":2293,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77366,"byte_end":77369,"line_start":2294,"line_end":2294,"column_start":5,"column_end":8}},{"value":"/ // tree_fold1 matches fold1 for associative operations...","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77374,"byte_end":77435,"line_start":2295,"line_end":2295,"column_start":5,"column_end":66}},{"value":"/ assert_eq!((0..10).tree_fold1(|x, y| x + y),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77440,"byte_end":77488,"line_start":2296,"line_end":2296,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x + y));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77493,"byte_end":77530,"line_start":2297,"line_end":2297,"column_start":5,"column_end":42}},{"value":"/ // ...but not for non-associative ones","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77535,"byte_end":77577,"line_start":2298,"line_end":2298,"column_start":5,"column_end":47}},{"value":"/ assert_ne!((0..10).tree_fold1(|x, y| x - y),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77582,"byte_end":77630,"line_start":2299,"line_end":2299,"column_start":5,"column_end":53}},{"value":"/     (0..10).fold1(|x, y| x - y));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77635,"byte_end":77672,"line_start":2300,"line_end":2300,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":77677,"byte_end":77684,"line_start":2301,"line_end":2301,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2681},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81203,"byte_end":81213,"line_start":2400,"line_end":2400,"column_start":8,"column_end":18},"name":"fold_while","qualname":"::Itertools::fold_while","value":"pub fn fold_while<B, F>(&mut Self, B, F) -> FoldWhile<B> where Self: Sized,\nF: FnMut(B, Self::Item) -> FoldWhile<B>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" An iterator method that applies a function, producing a single, final value.","sig":null,"attributes":[{"value":"/ An iterator method that applies a function, producing a single, final value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":79877,"byte_end":79957,"line_start":2361,"line_end":2361,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":79962,"byte_end":79965,"line_start":2362,"line_end":2362,"column_start":5,"column_end":8}},{"value":"/ `fold_while()` is basically equivalent to [`Iterator::fold`] but with additional support for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":79970,"byte_end":80066,"line_start":2363,"line_end":2363,"column_start":5,"column_end":101}},{"value":"/ early exit via short-circuiting.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80071,"byte_end":80107,"line_start":2364,"line_end":2364,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80112,"byte_end":80115,"line_start":2365,"line_end":2365,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80120,"byte_end":80127,"line_start":2366,"line_end":2366,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80132,"byte_end":80161,"line_start":2367,"line_end":2367,"column_start":5,"column_end":34}},{"value":"/ use itertools::FoldWhile::{Continue, Done};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80166,"byte_end":80213,"line_start":2368,"line_end":2368,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80218,"byte_end":80221,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80226,"byte_end":80276,"line_start":2370,"line_end":2370,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80281,"byte_end":80284,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ let mut result = 0;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80289,"byte_end":80312,"line_start":2372,"line_end":2372,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80317,"byte_end":80320,"line_start":2373,"line_end":2373,"column_start":5,"column_end":8}},{"value":"/ // for loop:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80325,"byte_end":80341,"line_start":2374,"line_end":2374,"column_start":5,"column_end":21}},{"value":"/ for i in &numbers {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80346,"byte_end":80369,"line_start":2375,"line_end":2375,"column_start":5,"column_end":28}},{"value":"/     if *i > 5 {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80374,"byte_end":80393,"line_start":2376,"line_end":2376,"column_start":5,"column_end":24}},{"value":"/         break;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80398,"byte_end":80416,"line_start":2377,"line_end":2377,"column_start":5,"column_end":23}},{"value":"/     }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80421,"byte_end":80430,"line_start":2378,"line_end":2378,"column_start":5,"column_end":14}},{"value":"/     result = result + i;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80435,"byte_end":80463,"line_start":2379,"line_end":2379,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80468,"byte_end":80473,"line_start":2380,"line_end":2380,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80478,"byte_end":80481,"line_start":2381,"line_end":2381,"column_start":5,"column_end":8}},{"value":"/ // fold:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80486,"byte_end":80498,"line_start":2382,"line_end":2382,"column_start":5,"column_end":17}},{"value":"/ let result2 = numbers.iter().fold(0, |acc, x| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80503,"byte_end":80554,"line_start":2383,"line_end":2383,"column_start":5,"column_end":56}},{"value":"/     if *x > 5 { acc } else { acc + x }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80559,"byte_end":80601,"line_start":2384,"line_end":2384,"column_start":5,"column_end":47}},{"value":"/ });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80606,"byte_end":80613,"line_start":2385,"line_end":2385,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80618,"byte_end":80621,"line_start":2386,"line_end":2386,"column_start":5,"column_end":8}},{"value":"/ // fold_while:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80626,"byte_end":80644,"line_start":2387,"line_end":2387,"column_start":5,"column_end":23}},{"value":"/ let result3 = numbers.iter().fold_while(0, |acc, x| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80649,"byte_end":80706,"line_start":2388,"line_end":2388,"column_start":5,"column_end":62}},{"value":"/     if *x > 5 { Done(acc) } else { Continue(acc + x) }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80711,"byte_end":80769,"line_start":2389,"line_end":2389,"column_start":5,"column_end":63}},{"value":"/ }).into_inner();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80774,"byte_end":80794,"line_start":2390,"line_end":2390,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80799,"byte_end":80802,"line_start":2391,"line_end":2391,"column_start":5,"column_end":8}},{"value":"/ // they're the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80807,"byte_end":80830,"line_start":2392,"line_end":2392,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(result, result2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80835,"byte_end":80867,"line_start":2393,"line_end":2393,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(result2, result3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80872,"byte_end":80905,"line_start":2394,"line_end":2394,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80910,"byte_end":80917,"line_start":2395,"line_end":2395,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80922,"byte_end":80925,"line_start":2396,"line_end":2396,"column_start":5,"column_end":8}},{"value":"/ The big difference between the computations of `result2` and `result3` is that while","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":80930,"byte_end":81018,"line_start":2397,"line_end":2397,"column_start":5,"column_end":93}},{"value":"/ `fold()` called the provided closure for every item of the callee iterator,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81023,"byte_end":81102,"line_start":2398,"line_end":2398,"column_start":5,"column_end":84}},{"value":"/ `fold_while()` actually stopped iterating as soon as it encountered `Fold::Done(_)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81107,"byte_end":81195,"line_start":2399,"line_end":2399,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":2692},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82461,"byte_end":82465,"line_start":2443,"line_end":2443,"column_start":8,"column_end":12},"name":"sum1","qualname":"::Itertools::sum1","value":"pub fn sum1<S>(Self) -> Option<S> where Self: Sized,\nS: std::iter::Sum<Self::Item>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and add all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and add all the elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81819,"byte_end":81881,"line_start":2422,"line_end":2422,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81886,"byte_end":81889,"line_start":2423,"line_end":2423,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(sum)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81894,"byte_end":81954,"line_start":2424,"line_end":2424,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81959,"byte_end":81962,"line_start":2425,"line_end":2425,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81967,"byte_end":81979,"line_start":2426,"line_end":2426,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81984,"byte_end":81987,"line_start":2427,"line_end":2427,"column_start":5,"column_end":8}},{"value":"/ When calling `sum1()` and a primitive integer type is being returned, this","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":81992,"byte_end":82070,"line_start":2428,"line_end":2428,"column_start":5,"column_end":83}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82075,"byte_end":82150,"line_start":2429,"line_end":2429,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82155,"byte_end":82167,"line_start":2430,"line_end":2430,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82172,"byte_end":82175,"line_start":2431,"line_end":2431,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82180,"byte_end":82194,"line_start":2432,"line_end":2432,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82199,"byte_end":82202,"line_start":2433,"line_end":2433,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82207,"byte_end":82214,"line_start":2434,"line_end":2434,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82219,"byte_end":82248,"line_start":2435,"line_end":2435,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82253,"byte_end":82256,"line_start":2436,"line_end":2436,"column_start":5,"column_end":8}},{"value":"/ let empty_sum = (1..1).sum1::<i32>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82261,"byte_end":82302,"line_start":2437,"line_end":2437,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(empty_sum, None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82307,"byte_end":82339,"line_start":2438,"line_end":2438,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82344,"byte_end":82347,"line_start":2439,"line_end":2439,"column_start":5,"column_end":8}},{"value":"/ let nonempty_sum = (1..11).sum1::<i32>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82352,"byte_end":82397,"line_start":2440,"line_end":2440,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(nonempty_sum, Some(55));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82402,"byte_end":82441,"line_start":2441,"line_end":2441,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82446,"byte_end":82453,"line_start":2442,"line_end":2442,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83328,"byte_end":83336,"line_start":2471,"line_end":2471,"column_start":8,"column_end":16},"name":"product1","qualname":"::Itertools::product1","value":"pub fn product1<P>(Self) -> Option<P> where Self: Sized,\nP: std::iter::Product<Self::Item>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Iterate over the entire iterator and multiply all the elements.","sig":null,"attributes":[{"value":"/ Iterate over the entire iterator and multiply all the elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82657,"byte_end":82724,"line_start":2451,"line_end":2451,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82729,"byte_end":82732,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ An empty iterator returns `None`, otherwise `Some(product)`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82737,"byte_end":82801,"line_start":2453,"line_end":2453,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82806,"byte_end":82809,"line_start":2454,"line_end":2454,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82814,"byte_end":82826,"line_start":2455,"line_end":2455,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82831,"byte_end":82834,"line_start":2456,"line_end":2456,"column_start":5,"column_end":8}},{"value":"/ When calling `product1()` and a primitive integer type is being returned,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82839,"byte_end":82916,"line_start":2457,"line_end":2457,"column_start":5,"column_end":82}},{"value":"/ method will panic if the computation overflows and debug assertions are","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":82921,"byte_end":82996,"line_start":2458,"line_end":2458,"column_start":5,"column_end":80}},{"value":"/ enabled.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83001,"byte_end":83013,"line_start":2459,"line_end":2459,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83018,"byte_end":83021,"line_start":2460,"line_end":2460,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83026,"byte_end":83040,"line_start":2461,"line_end":2461,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83045,"byte_end":83052,"line_start":2462,"line_end":2462,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83057,"byte_end":83086,"line_start":2463,"line_end":2463,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83091,"byte_end":83094,"line_start":2464,"line_end":2464,"column_start":5,"column_end":8}},{"value":"/ let empty_product = (1..1).product1::<i32>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83099,"byte_end":83148,"line_start":2465,"line_end":2465,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(empty_product, None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83153,"byte_end":83189,"line_start":2466,"line_end":2466,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83194,"byte_end":83197,"line_start":2467,"line_end":2467,"column_start":5,"column_end":8}},{"value":"/ let nonempty_product = (1..11).product1::<i32>();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83202,"byte_end":83255,"line_start":2468,"line_end":2468,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(nonempty_product, Some(3628800));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83260,"byte_end":83308,"line_start":2469,"line_end":2469,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83313,"byte_end":83320,"line_start":2470,"line_end":2470,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84246,"byte_end":84261,"line_start":2497,"line_end":2497,"column_start":8,"column_end":23},"name":"sorted_unstable","qualname":"::Itertools::sorted_unstable","value":"pub fn sorted_unstable(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83536,"byte_end":83606,"line_start":2479,"line_end":2479,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83611,"byte_end":83614,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83619,"byte_end":83676,"line_start":2481,"line_end":2481,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83681,"byte_end":83748,"line_start":2482,"line_end":2482,"column_start":5,"column_end":72}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83753,"byte_end":83789,"line_start":2483,"line_end":2483,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83794,"byte_end":83797,"line_start":2484,"line_end":2484,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83802,"byte_end":83873,"line_start":2485,"line_end":2485,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83878,"byte_end":83927,"line_start":2486,"line_end":2486,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83932,"byte_end":83935,"line_start":2487,"line_end":2487,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83940,"byte_end":83947,"line_start":2488,"line_end":2488,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83952,"byte_end":83981,"line_start":2489,"line_end":2489,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83986,"byte_end":83989,"line_start":2490,"line_end":2490,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":83994,"byte_end":84048,"line_start":2491,"line_end":2491,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84053,"byte_end":84077,"line_start":2492,"line_end":2492,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted_unstable(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84082,"byte_end":84141,"line_start":2493,"line_end":2493,"column_start":5,"column_end":64}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84146,"byte_end":84192,"line_start":2494,"line_end":2494,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84197,"byte_end":84204,"line_start":2495,"line_end":2495,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84209,"byte_end":84238,"line_start":2496,"line_end":2496,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85521,"byte_end":85539,"line_start":2532,"line_end":2532,"column_start":8,"column_end":26},"name":"sorted_unstable_by","qualname":"::Itertools::sorted_unstable_by","value":"pub fn sorted_unstable_by<F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84568,"byte_end":84638,"line_start":2508,"line_end":2508,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84643,"byte_end":84646,"line_start":2509,"line_end":2509,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84651,"byte_end":84708,"line_start":2510,"line_end":2510,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84713,"byte_end":84783,"line_start":2511,"line_end":2511,"column_start":5,"column_end":75}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84788,"byte_end":84824,"line_start":2512,"line_end":2512,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84829,"byte_end":84832,"line_start":2513,"line_end":2513,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84837,"byte_end":84908,"line_start":2514,"line_end":2514,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84913,"byte_end":84962,"line_start":2515,"line_end":2515,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84967,"byte_end":84970,"line_start":2516,"line_end":2516,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84975,"byte_end":84982,"line_start":2517,"line_end":2517,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":84987,"byte_end":85016,"line_start":2518,"line_end":2518,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85021,"byte_end":85024,"line_start":2519,"line_end":2519,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85029,"byte_end":85074,"line_start":2520,"line_end":2520,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85079,"byte_end":85157,"line_start":2521,"line_end":2521,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85162,"byte_end":85165,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85170,"byte_end":85206,"line_start":2523,"line_end":2523,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85211,"byte_end":85231,"line_start":2524,"line_end":2524,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85236,"byte_end":85292,"line_start":2525,"line_end":2525,"column_start":5,"column_end":61}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85297,"byte_end":85335,"line_start":2526,"line_end":2526,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85340,"byte_end":85343,"line_start":2527,"line_end":2527,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85348,"byte_end":85396,"line_start":2528,"line_end":2528,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85401,"byte_end":85467,"line_start":2529,"line_end":2529,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85472,"byte_end":85479,"line_start":2530,"line_end":2530,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85484,"byte_end":85513,"line_start":2531,"line_end":2531,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2701},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86729,"byte_end":86751,"line_start":2565,"line_end":2565,"column_start":8,"column_end":30},"name":"sorted_unstable_by_key","qualname":"::Itertools::sorted_unstable_by_key","value":"pub fn sorted_unstable_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85787,"byte_end":85857,"line_start":2541,"line_end":2541,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85862,"byte_end":85865,"line_start":2542,"line_end":2542,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85870,"byte_end":85927,"line_start":2543,"line_end":2543,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_unstable_by_key`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":85932,"byte_end":86006,"line_start":2544,"line_end":2544,"column_start":5,"column_end":79}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86011,"byte_end":86047,"line_start":2545,"line_end":2545,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86052,"byte_end":86055,"line_start":2546,"line_end":2546,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86060,"byte_end":86131,"line_start":2547,"line_end":2547,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86136,"byte_end":86185,"line_start":2548,"line_end":2548,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86190,"byte_end":86193,"line_start":2549,"line_end":2549,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86198,"byte_end":86205,"line_start":2550,"line_end":2550,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86210,"byte_end":86239,"line_start":2551,"line_end":2551,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86244,"byte_end":86247,"line_start":2552,"line_end":2552,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86252,"byte_end":86297,"line_start":2553,"line_end":2553,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86302,"byte_end":86380,"line_start":2554,"line_end":2554,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86385,"byte_end":86388,"line_start":2555,"line_end":2555,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86393,"byte_end":86429,"line_start":2556,"line_end":2556,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86434,"byte_end":86454,"line_start":2557,"line_end":2557,"column_start":5,"column_end":25}},{"value":"/     .sorted_unstable_by_key(|x| -x.1)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86459,"byte_end":86500,"line_start":2558,"line_end":2558,"column_start":5,"column_end":46}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86505,"byte_end":86543,"line_start":2559,"line_end":2559,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86548,"byte_end":86551,"line_start":2560,"line_end":2560,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86556,"byte_end":86604,"line_start":2561,"line_end":2561,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86609,"byte_end":86675,"line_start":2562,"line_end":2562,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86680,"byte_end":86687,"line_start":2563,"line_end":2563,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":86692,"byte_end":86721,"line_start":2564,"line_end":2564,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2704},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87696,"byte_end":87702,"line_start":2593,"line_end":2593,"column_start":8,"column_end":14},"name":"sorted","qualname":"::Itertools::sorted","value":"pub fn sorted(Self) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87004,"byte_end":87074,"line_start":2575,"line_end":2575,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87079,"byte_end":87082,"line_start":2576,"line_end":2576,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87087,"byte_end":87144,"line_start":2577,"line_end":2577,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87149,"byte_end":87207,"line_start":2578,"line_end":2578,"column_start":5,"column_end":63}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87212,"byte_end":87248,"line_start":2579,"line_end":2579,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87253,"byte_end":87256,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87261,"byte_end":87332,"line_start":2581,"line_end":2581,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87337,"byte_end":87386,"line_start":2582,"line_end":2582,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87391,"byte_end":87394,"line_start":2583,"line_end":2583,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87399,"byte_end":87406,"line_start":2584,"line_end":2584,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87411,"byte_end":87440,"line_start":2585,"line_end":2585,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87445,"byte_end":87448,"line_start":2586,"line_end":2586,"column_start":5,"column_end":8}},{"value":"/ // sort the letters of the text in ascending order","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87453,"byte_end":87507,"line_start":2587,"line_end":2587,"column_start":5,"column_end":59}},{"value":"/ let text = \"bdacfe\";","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87512,"byte_end":87536,"line_start":2588,"line_end":2588,"column_start":5,"column_end":29}},{"value":"/ itertools::assert_equal(text.chars().sorted(),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87541,"byte_end":87591,"line_start":2589,"line_end":2589,"column_start":5,"column_end":55}},{"value":"/                         \"abcdef\".chars());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87596,"byte_end":87642,"line_start":2590,"line_end":2590,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87647,"byte_end":87654,"line_start":2591,"line_end":2591,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87659,"byte_end":87688,"line_start":2592,"line_end":2592,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2705},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88926,"byte_end":88935,"line_start":2628,"line_end":2628,"column_start":8,"column_end":17},"name":"sorted_by","qualname":"::Itertools::sorted_by","value":"pub fn sorted_by<F>(Self, F) -> VecIntoIter<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":87991,"byte_end":88061,"line_start":2604,"line_end":2604,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88066,"byte_end":88069,"line_start":2605,"line_end":2605,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88074,"byte_end":88131,"line_start":2606,"line_end":2606,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88136,"byte_end":88197,"line_start":2607,"line_end":2607,"column_start":5,"column_end":66}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88202,"byte_end":88238,"line_start":2608,"line_end":2608,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88243,"byte_end":88246,"line_start":2609,"line_end":2609,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88251,"byte_end":88322,"line_start":2610,"line_end":2610,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88327,"byte_end":88376,"line_start":2611,"line_end":2611,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88381,"byte_end":88384,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88389,"byte_end":88396,"line_start":2613,"line_end":2613,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88401,"byte_end":88430,"line_start":2614,"line_end":2614,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88435,"byte_end":88438,"line_start":2615,"line_end":2615,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88443,"byte_end":88488,"line_start":2616,"line_end":2616,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88493,"byte_end":88571,"line_start":2617,"line_end":2617,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88576,"byte_end":88579,"line_start":2618,"line_end":2618,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88584,"byte_end":88620,"line_start":2619,"line_end":2619,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88625,"byte_end":88645,"line_start":2620,"line_end":2620,"column_start":5,"column_end":25}},{"value":"/     .sorted_by(|a, b| Ord::cmp(&b.1, &a.1))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88650,"byte_end":88697,"line_start":2621,"line_end":2621,"column_start":5,"column_end":52}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88702,"byte_end":88740,"line_start":2622,"line_end":2622,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88745,"byte_end":88748,"line_start":2623,"line_end":2623,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88753,"byte_end":88801,"line_start":2624,"line_end":2624,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88806,"byte_end":88872,"line_start":2625,"line_end":2625,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88877,"byte_end":88884,"line_start":2626,"line_end":2626,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":88889,"byte_end":88918,"line_start":2627,"line_end":2627,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2707},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90098,"byte_end":90111,"line_start":2661,"line_end":2661,"column_start":8,"column_end":21},"name":"sorted_by_key","qualname":"::Itertools::sorted_by_key","value":"pub fn sorted_by_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89174,"byte_end":89244,"line_start":2637,"line_end":2637,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89249,"byte_end":89252,"line_start":2638,"line_end":2638,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89257,"byte_end":89314,"line_start":2639,"line_end":2639,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by_key`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89319,"byte_end":89384,"line_start":2640,"line_end":2640,"column_start":5,"column_end":70}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89389,"byte_end":89425,"line_start":2641,"line_end":2641,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89430,"byte_end":89433,"line_start":2642,"line_end":2642,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89438,"byte_end":89509,"line_start":2643,"line_end":2643,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89514,"byte_end":89563,"line_start":2644,"line_end":2644,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89568,"byte_end":89571,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89576,"byte_end":89583,"line_start":2646,"line_end":2646,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89588,"byte_end":89617,"line_start":2647,"line_end":2647,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89622,"byte_end":89625,"line_start":2648,"line_end":2648,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89630,"byte_end":89675,"line_start":2649,"line_end":2649,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89680,"byte_end":89758,"line_start":2650,"line_end":2650,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89763,"byte_end":89766,"line_start":2651,"line_end":2651,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89771,"byte_end":89807,"line_start":2652,"line_end":2652,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89812,"byte_end":89832,"line_start":2653,"line_end":2653,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_key(|x| -x.1)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89837,"byte_end":89869,"line_start":2654,"line_end":2654,"column_start":5,"column_end":37}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89874,"byte_end":89912,"line_start":2655,"line_end":2655,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89917,"byte_end":89920,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89925,"byte_end":89973,"line_start":2657,"line_end":2657,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":89978,"byte_end":90044,"line_start":2658,"line_end":2658,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90049,"byte_end":90056,"line_start":2659,"line_end":2659,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90061,"byte_end":90090,"line_start":2660,"line_end":2660,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2710},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91350,"byte_end":91370,"line_start":2696,"line_end":2696,"column_start":8,"column_end":28},"name":"sorted_by_cached_key","qualname":"::Itertools::sorted_by_cached_key","value":"pub fn sorted_by_cached_key<K, F>(Self, F) -> VecIntoIter<Self::Item> where\nSelf: Sized, K: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort all iterator elements into a new iterator in ascending order. The key function is\n called exactly once per key.","sig":null,"attributes":[{"value":"/ Sort all iterator elements into a new iterator in ascending order. The key function is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90355,"byte_end":90445,"line_start":2671,"line_end":2671,"column_start":5,"column_end":95}},{"value":"/ called exactly once per key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90450,"byte_end":90482,"line_start":2672,"line_end":2672,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90487,"byte_end":90490,"line_start":2673,"line_end":2673,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, uses the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90495,"byte_end":90552,"line_start":2674,"line_end":2674,"column_start":5,"column_end":62}},{"value":"/ [`slice::sort_by_cached_key`] method and returns the result as a new","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90557,"byte_end":90629,"line_start":2675,"line_end":2675,"column_start":5,"column_end":77}},{"value":"/ iterator that owns its elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90634,"byte_end":90670,"line_start":2676,"line_end":2676,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90675,"byte_end":90678,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90683,"byte_end":90754,"line_start":2678,"line_end":2678,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90759,"byte_end":90808,"line_start":2679,"line_end":2679,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90813,"byte_end":90816,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90821,"byte_end":90828,"line_start":2681,"line_end":2681,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90833,"byte_end":90862,"line_start":2682,"line_end":2682,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90867,"byte_end":90870,"line_start":2683,"line_end":2683,"column_start":5,"column_end":8}},{"value":"/ // sort people in descending order by age","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90875,"byte_end":90920,"line_start":2684,"line_end":2684,"column_start":5,"column_end":50}},{"value":"/ let people = vec![(\"Jane\", 20), (\"John\", 18), (\"Jill\", 30), (\"Jack\", 27)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":90925,"byte_end":91003,"line_start":2685,"line_end":2685,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91008,"byte_end":91011,"line_start":2686,"line_end":2686,"column_start":5,"column_end":8}},{"value":"/ let oldest_people_first = people","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91016,"byte_end":91052,"line_start":2687,"line_end":2687,"column_start":5,"column_end":41}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91057,"byte_end":91077,"line_start":2688,"line_end":2688,"column_start":5,"column_end":25}},{"value":"/     .sorted_by_cached_key(|x| -x.1)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91082,"byte_end":91121,"line_start":2689,"line_end":2689,"column_start":5,"column_end":44}},{"value":"/     .map(|(person, _age)| person);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91126,"byte_end":91164,"line_start":2690,"line_end":2690,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91169,"byte_end":91172,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(oldest_people_first,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91177,"byte_end":91225,"line_start":2692,"line_end":2692,"column_start":5,"column_end":53}},{"value":"/                         vec![\"Jill\", \"Jack\", \"Jane\", \"John\"]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91230,"byte_end":91296,"line_start":2693,"line_end":2693,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91301,"byte_end":91308,"line_start":2694,"line_end":2694,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91313,"byte_end":91342,"line_start":2695,"line_end":2695,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2713},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92726,"byte_end":92736,"line_start":2735,"line_end":2735,"column_start":8,"column_end":18},"name":"k_smallest","qualname":"::Itertools::k_smallest","value":"pub fn k_smallest(Self, usize) -> VecIntoIter<Self::Item> where Self: Sized,\nSelf::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Sort the k smallest elements into a new iterator, in ascending order.","sig":null,"attributes":[{"value":"/ Sort the k smallest elements into a new iterator, in ascending order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91613,"byte_end":91686,"line_start":2707,"line_end":2707,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91691,"byte_end":91694,"line_start":2708,"line_end":2708,"column_start":5,"column_end":8}},{"value":"/ **Note:** This consumes the entire iterator, and returns the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91699,"byte_end":91770,"line_start":2709,"line_end":2709,"column_start":5,"column_end":76}},{"value":"/ as a new iterator that owns its elements.  If the input contains","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91775,"byte_end":91843,"line_start":2710,"line_end":2710,"column_start":5,"column_end":73}},{"value":"/ less than k elements, the result is equivalent to `self.sorted()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91848,"byte_end":91918,"line_start":2711,"line_end":2711,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91923,"byte_end":91926,"line_start":2712,"line_end":2712,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to use `k * sizeof(Self::Item) + O(1)` memory","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":91931,"byte_end":91999,"line_start":2713,"line_end":2713,"column_start":5,"column_end":73}},{"value":"/ and `O(n log k)` time, with `n` the number of elements in the input.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92004,"byte_end":92076,"line_start":2714,"line_end":2714,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92081,"byte_end":92084,"line_start":2715,"line_end":2715,"column_start":5,"column_end":8}},{"value":"/ The sorted iterator, if directly collected to a `Vec`, is converted","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92089,"byte_end":92160,"line_start":2716,"line_end":2716,"column_start":5,"column_end":76}},{"value":"/ without any extra copying or allocation cost.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92165,"byte_end":92214,"line_start":2717,"line_end":2717,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92219,"byte_end":92222,"line_start":2718,"line_end":2718,"column_start":5,"column_end":8}},{"value":"/ **Note:** This is functionally-equivalent to `self.sorted().take(k)`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92227,"byte_end":92299,"line_start":2719,"line_end":2719,"column_start":5,"column_end":77}},{"value":"/ but much more efficient.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92304,"byte_end":92332,"line_start":2720,"line_end":2720,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92337,"byte_end":92340,"line_start":2721,"line_end":2721,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92345,"byte_end":92352,"line_start":2722,"line_end":2722,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92357,"byte_end":92386,"line_start":2723,"line_end":2723,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92391,"byte_end":92394,"line_start":2724,"line_end":2724,"column_start":5,"column_end":8}},{"value":"/ // A random permutation of 0..15","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92399,"byte_end":92435,"line_start":2725,"line_end":2725,"column_start":5,"column_end":41}},{"value":"/ let numbers = vec![6, 9, 1, 14, 0, 4, 8, 7, 11, 2, 10, 3, 13, 12, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92440,"byte_end":92513,"line_start":2726,"line_end":2726,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92518,"byte_end":92521,"line_start":2727,"line_end":2727,"column_start":5,"column_end":8}},{"value":"/ let five_smallest = numbers","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92526,"byte_end":92557,"line_start":2728,"line_end":2728,"column_start":5,"column_end":36}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92562,"byte_end":92582,"line_start":2729,"line_end":2729,"column_start":5,"column_end":25}},{"value":"/     .k_smallest(5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92587,"byte_end":92610,"line_start":2730,"line_end":2730,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92615,"byte_end":92618,"line_start":2731,"line_end":2731,"column_start":5,"column_end":8}},{"value":"/ itertools::assert_equal(five_smallest, 0..5);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92623,"byte_end":92672,"line_start":2732,"line_end":2732,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92677,"byte_end":92684,"line_start":2733,"line_end":2733,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92689,"byte_end":92718,"line_start":2734,"line_end":2734,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93668,"byte_end":93681,"line_start":2765,"line_end":2765,"column_start":8,"column_end":21},"name":"partition_map","qualname":"::Itertools::partition_map","value":"pub fn partition_map<A, B, F, L, R>(Self, F) -> (A, B) where Self: Sized,\nF: FnMut(Self::Item) -> Either<L, R>, A: Default + Extend<L>, B: Default +\nExtend<R>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Collect all iterator elements into one of two\n partitions. Unlike [`Iterator::partition`], each partition may\n have a distinct type.","sig":null,"attributes":[{"value":"/ Collect all iterator elements into one of two","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":92957,"byte_end":93006,"line_start":2744,"line_end":2744,"column_start":5,"column_end":54}},{"value":"/ partitions. Unlike [`Iterator::partition`], each partition may","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93011,"byte_end":93077,"line_start":2745,"line_end":2745,"column_start":5,"column_end":71}},{"value":"/ have a distinct type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93082,"byte_end":93107,"line_start":2746,"line_end":2746,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93112,"byte_end":93115,"line_start":2747,"line_end":2747,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93120,"byte_end":93127,"line_start":2748,"line_end":2748,"column_start":5,"column_end":12}},{"value":"/ use itertools::{Itertools, Either};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93132,"byte_end":93171,"line_start":2749,"line_end":2749,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93176,"byte_end":93179,"line_start":2750,"line_end":2750,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93184,"byte_end":93259,"line_start":2751,"line_end":2751,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93264,"byte_end":93267,"line_start":2752,"line_end":2752,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93272,"byte_end":93344,"line_start":2753,"line_end":2753,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93349,"byte_end":93369,"line_start":2754,"line_end":2754,"column_start":5,"column_end":25}},{"value":"/     .partition_map(|r| {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93374,"byte_end":93402,"line_start":2755,"line_end":2755,"column_start":5,"column_end":33}},{"value":"/         match r {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93407,"byte_end":93428,"line_start":2756,"line_end":2756,"column_start":5,"column_end":26}},{"value":"/             Ok(v) => Either::Left(v),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93433,"byte_end":93474,"line_start":2757,"line_end":2757,"column_start":5,"column_end":46}},{"value":"/             Err(v) => Either::Right(v),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93479,"byte_end":93522,"line_start":2758,"line_end":2758,"column_start":5,"column_end":48}},{"value":"/         }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93527,"byte_end":93540,"line_start":2759,"line_end":2759,"column_start":5,"column_end":18}},{"value":"/     });","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93545,"byte_end":93556,"line_start":2760,"line_end":2760,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93561,"byte_end":93564,"line_start":2761,"line_end":2761,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93569,"byte_end":93603,"line_start":2762,"line_end":2762,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93608,"byte_end":93648,"line_start":2763,"line_end":2763,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":93653,"byte_end":93660,"line_start":2764,"line_end":2764,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2721},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94698,"byte_end":94714,"line_start":2797,"line_end":2797,"column_start":8,"column_end":24},"name":"partition_result","qualname":"::Itertools::partition_result","value":"pub fn partition_result<A, B, T, E>(Self) -> (A, B) where Self: Iterator<Item\n= Result<T, E>> + Sized, A: Default + Extend<T>, B: Default + Extend<E>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Partition a sequence of `Result`s into one list of all the `Ok` elements\n and another list of all the `Err` elements.","sig":null,"attributes":[{"value":"/ Partition a sequence of `Result`s into one list of all the `Ok` elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94173,"byte_end":94249,"line_start":2782,"line_end":2782,"column_start":5,"column_end":81}},{"value":"/ and another list of all the `Err` elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94254,"byte_end":94301,"line_start":2783,"line_end":2783,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94306,"byte_end":94309,"line_start":2784,"line_end":2784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94314,"byte_end":94321,"line_start":2785,"line_end":2785,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94326,"byte_end":94355,"line_start":2786,"line_end":2786,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94360,"byte_end":94363,"line_start":2787,"line_end":2787,"column_start":5,"column_end":8}},{"value":"/ let successes_and_failures = vec![Ok(1), Err(false), Err(true), Ok(2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94368,"byte_end":94443,"line_start":2788,"line_end":2788,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94448,"byte_end":94451,"line_start":2789,"line_end":2789,"column_start":5,"column_end":8}},{"value":"/ let (successes, failures): (Vec<_>, Vec<_>) = successes_and_failures","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94456,"byte_end":94528,"line_start":2790,"line_end":2790,"column_start":5,"column_end":77}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94533,"byte_end":94553,"line_start":2791,"line_end":2791,"column_start":5,"column_end":25}},{"value":"/     .partition_result();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94558,"byte_end":94586,"line_start":2792,"line_end":2792,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94591,"byte_end":94594,"line_start":2793,"line_end":2793,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(successes, [1, 2]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94599,"byte_end":94633,"line_start":2794,"line_end":2794,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(failures, [false, true]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94638,"byte_end":94678,"line_start":2795,"line_end":2795,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":94683,"byte_end":94690,"line_start":2796,"line_end":2796,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95713,"byte_end":95727,"line_start":2826,"line_end":2826,"column_start":8,"column_end":22},"name":"into_group_map","qualname":"::Itertools::into_group_map","value":"pub fn into_group_map<K, V>(Self) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values\n are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","sig":null,"attributes":[{"value":"/ Return a `HashMap` of keys mapped to `Vec`s of values. Keys and values","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95033,"byte_end":95107,"line_start":2809,"line_end":2809,"column_start":5,"column_end":79}},{"value":"/ are taken from `(Key, Value)` tuple pairs yielded by the input iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95112,"byte_end":95188,"line_start":2810,"line_end":2810,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95193,"byte_end":95196,"line_start":2811,"line_end":2811,"column_start":5,"column_end":8}},{"value":"/ Essentially a shorthand for `.into_grouping_map().collect::<Vec<_>>()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95201,"byte_end":95276,"line_start":2812,"line_end":2812,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95281,"byte_end":95284,"line_start":2813,"line_end":2813,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95289,"byte_end":95296,"line_start":2814,"line_end":2814,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95301,"byte_end":95330,"line_start":2815,"line_end":2815,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95335,"byte_end":95338,"line_start":2816,"line_end":2816,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95343,"byte_end":95417,"line_start":2817,"line_end":2817,"column_start":5,"column_end":79}},{"value":"/ let lookup = data.into_iter().into_group_map();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95422,"byte_end":95473,"line_start":2818,"line_end":2818,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95478,"byte_end":95481,"line_start":2819,"line_end":2819,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![10, 20]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95486,"byte_end":95527,"line_start":2820,"line_end":2820,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95532,"byte_end":95569,"line_start":2821,"line_end":2821,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![12, 42]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95574,"byte_end":95615,"line_start":2822,"line_end":2822,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(lookup[&3], vec![13, 33]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95620,"byte_end":95661,"line_start":2823,"line_end":2823,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95666,"byte_end":95673,"line_start":2824,"line_end":2824,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95678,"byte_end":95705,"line_start":2825,"line_end":2825,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2730},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96970,"byte_end":96987,"line_start":2861,"line_end":2861,"column_start":8,"column_end":25},"name":"into_group_map_by","qualname":"::Itertools::into_group_map_by","value":"pub fn into_group_map_by<K, V, F>(Self, F) -> HashMap<K, Vec<V>> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: Fn(&V) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified\n in the closure.","sig":null,"attributes":[{"value":"/ Return an `Iterator` on a `HashMap`. Keys mapped to `Vec`s of values. The key is specified","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95898,"byte_end":95992,"line_start":2833,"line_end":2833,"column_start":5,"column_end":99}},{"value":"/ in the closure.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":95997,"byte_end":96016,"line_start":2834,"line_end":2834,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96021,"byte_end":96024,"line_start":2835,"line_end":2835,"column_start":5,"column_end":8}},{"value":"/ Essentially a shorthand for `.into_grouping_map_by(f).collect::<Vec<_>>()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96029,"byte_end":96108,"line_start":2836,"line_end":2836,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96113,"byte_end":96116,"line_start":2837,"line_end":2837,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96121,"byte_end":96128,"line_start":2838,"line_end":2838,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96133,"byte_end":96162,"line_start":2839,"line_end":2839,"column_start":5,"column_end":34}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96167,"byte_end":96201,"line_start":2840,"line_end":2840,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96206,"byte_end":96209,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ let data = vec![(0, 10), (2, 12), (3, 13), (0, 20), (3, 33), (2, 42)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96214,"byte_end":96288,"line_start":2842,"line_end":2842,"column_start":5,"column_end":79}},{"value":"/ let lookup: HashMap<u32,Vec<(u32, u32)>> =","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96293,"byte_end":96339,"line_start":2843,"line_end":2843,"column_start":5,"column_end":51}},{"value":"/     data.clone().into_iter().into_group_map_by(|a| a.0);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96344,"byte_end":96404,"line_start":2844,"line_end":2844,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96409,"byte_end":96412,"line_start":2845,"line_end":2845,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(lookup[&0], vec![(0,10),(0,20)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96417,"byte_end":96465,"line_start":2846,"line_end":2846,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lookup.get(&1), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96470,"byte_end":96507,"line_start":2847,"line_end":2847,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(lookup[&2], vec![(2,12), (2,42)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96512,"byte_end":96561,"line_start":2848,"line_end":2848,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lookup[&3], vec![(3,13), (3,33)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96566,"byte_end":96615,"line_start":2849,"line_end":2849,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96620,"byte_end":96623,"line_start":2850,"line_end":2850,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96628,"byte_end":96643,"line_start":2851,"line_end":2851,"column_start":5,"column_end":20}},{"value":"/     data.into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96648,"byte_end":96672,"line_start":2852,"line_end":2852,"column_start":5,"column_end":29}},{"value":"/         .into_group_map_by(|x| x.0)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96677,"byte_end":96716,"line_start":2853,"line_end":2853,"column_start":5,"column_end":44}},{"value":"/         .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96721,"byte_end":96745,"line_start":2854,"line_end":2854,"column_start":5,"column_end":29}},{"value":"/         .map(|(key, values)| (key, values.into_iter().fold(0,|acc, (_,v)| acc + v )))","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96750,"byte_end":96839,"line_start":2855,"line_end":2855,"column_start":5,"column_end":94}},{"value":"/         .collect::<HashMap<u32,u32>>()[&0],","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96844,"byte_end":96891,"line_start":2856,"line_end":2856,"column_start":5,"column_end":52}},{"value":"/     30,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96896,"byte_end":96907,"line_start":2857,"line_end":2857,"column_start":5,"column_end":16}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96912,"byte_end":96918,"line_start":2858,"line_end":2858,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96923,"byte_end":96930,"line_start":2859,"line_end":2859,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":96935,"byte_end":96962,"line_start":2860,"line_end":2860,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2734},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97702,"byte_end":97719,"line_start":2880,"line_end":2880,"column_start":8,"column_end":25},"name":"into_grouping_map","qualname":"::Itertools::into_grouping_map","value":"pub fn into_grouping_map<K, V>(Self) -> GroupingMap<Self> where\nSelf: Iterator<Item = (K, V)> + Sized, K: Hash + Eq","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The input iterator must yield item in the form of `(K, V)` where the\n value of type `K` will be used as key to identify the groups and the\n value of type `V` as value for the folding operation.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97206,"byte_end":97280,"line_start":2870,"line_end":2870,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97285,"byte_end":97336,"line_start":2871,"line_end":2871,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97341,"byte_end":97345,"line_start":2872,"line_end":2872,"column_start":5,"column_end":9}},{"value":"/ The input iterator must yield item in the form of `(K, V)` where the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97350,"byte_end":97422,"line_start":2873,"line_end":2873,"column_start":5,"column_end":77}},{"value":"/ value of type `K` will be used as key to identify the groups and the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97427,"byte_end":97499,"line_start":2874,"line_end":2874,"column_start":5,"column_end":77}},{"value":"/ value of type `V` as value for the folding operation.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97504,"byte_end":97561,"line_start":2875,"line_end":2875,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97566,"byte_end":97570,"line_start":2876,"line_end":2876,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97575,"byte_end":97620,"line_start":2877,"line_end":2877,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97625,"byte_end":97662,"line_start":2878,"line_end":2878,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97667,"byte_end":97694,"line_start":2879,"line_end":2879,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2737},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98329,"byte_end":98349,"line_start":2896,"line_end":2896,"column_start":8,"column_end":28},"name":"into_grouping_map_by","qualname":"::Itertools::into_grouping_map_by","value":"pub fn into_grouping_map_by<K, V, F>(Self, F) -> GroupingMapBy<Self, F> where\nSelf: Iterator<Item = V> + Sized, K: Hash + Eq, F: FnMut(&V) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Constructs a `GroupingMap` to be used later with one of the efficient \n group-and-fold operations it allows to perform.\n \n The values from this iterator will be used as values for the folding operation\n while the keys will be obtained from the values by calling `key_mapper`.\n \n See [`GroupingMap`] for more informations\n on what operations are available.\n","sig":null,"attributes":[{"value":"/ Constructs a `GroupingMap` to be used later with one of the efficient ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97881,"byte_end":97955,"line_start":2887,"line_end":2887,"column_start":5,"column_end":79}},{"value":"/ group-and-fold operations it allows to perform.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":97960,"byte_end":98011,"line_start":2888,"line_end":2888,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98016,"byte_end":98020,"line_start":2889,"line_end":2889,"column_start":5,"column_end":9}},{"value":"/ The values from this iterator will be used as values for the folding operation","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98025,"byte_end":98107,"line_start":2890,"line_end":2890,"column_start":5,"column_end":87}},{"value":"/ while the keys will be obtained from the values by calling `key_mapper`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98112,"byte_end":98188,"line_start":2891,"line_end":2891,"column_start":5,"column_end":81}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98193,"byte_end":98197,"line_start":2892,"line_end":2892,"column_start":5,"column_end":9}},{"value":"/ See [`GroupingMap`] for more informations","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98202,"byte_end":98247,"line_start":2893,"line_end":2893,"column_start":5,"column_end":50}},{"value":"/ on what operations are available.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98252,"byte_end":98289,"line_start":2894,"line_end":2894,"column_start":5,"column_end":42}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98294,"byte_end":98321,"line_start":2895,"line_end":2895,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99268,"byte_end":99275,"line_start":2927,"line_end":2927,"column_start":8,"column_end":15},"name":"min_set","qualname":"::Itertools::min_set","value":"pub fn min_set(Self) -> Vec<Self::Item> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all minimum elements of an iterator.","sig":null,"attributes":[{"value":"/ Return all minimum elements of an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98608,"byte_end":98655,"line_start":2904,"line_end":2904,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98660,"byte_end":98663,"line_start":2905,"line_end":2905,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98668,"byte_end":98682,"line_start":2906,"line_end":2906,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98687,"byte_end":98690,"line_start":2907,"line_end":2907,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98695,"byte_end":98702,"line_start":2908,"line_end":2908,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98707,"byte_end":98736,"line_start":2909,"line_end":2909,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98741,"byte_end":98744,"line_start":2910,"line_end":2910,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98749,"byte_end":98774,"line_start":2911,"line_end":2911,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().min_set(), Vec::<&i32>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98779,"byte_end":98834,"line_start":2912,"line_end":2912,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98839,"byte_end":98842,"line_start":2913,"line_end":2913,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98847,"byte_end":98863,"line_start":2914,"line_end":2914,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().min_set(), vec![&1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98868,"byte_end":98913,"line_start":2915,"line_end":2915,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98918,"byte_end":98921,"line_start":2916,"line_end":2916,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98926,"byte_end":98954,"line_start":2917,"line_end":2917,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().min_set(), vec![&1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":98959,"byte_end":99004,"line_start":2918,"line_end":2918,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99009,"byte_end":99012,"line_start":2919,"line_end":2919,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99017,"byte_end":99042,"line_start":2920,"line_end":2920,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().min_set(), vec![&1, &1, &1, &1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99047,"byte_end":99104,"line_start":2921,"line_end":2921,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99109,"byte_end":99116,"line_start":2922,"line_end":2922,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99121,"byte_end":99124,"line_start":2923,"line_end":2923,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99129,"byte_end":99198,"line_start":2924,"line_end":2924,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99203,"byte_end":99228,"line_start":2925,"line_end":2925,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99233,"byte_end":99260,"line_start":2926,"line_end":2926,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2744},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100410,"byte_end":100420,"line_start":2958,"line_end":2958,"column_start":8,"column_end":18},"name":"min_set_by","qualname":"::Itertools::min_set_by","value":"pub fn min_set_by<F>(Self, F) -> Vec<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all minimum elements of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return all minimum elements of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99432,"byte_end":99496,"line_start":2933,"line_end":2933,"column_start":5,"column_end":69}},{"value":"/ the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99501,"byte_end":99528,"line_start":2934,"line_end":2934,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99533,"byte_end":99536,"line_start":2935,"line_end":2935,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99541,"byte_end":99555,"line_start":2936,"line_end":2936,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99560,"byte_end":99563,"line_start":2937,"line_end":2937,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99568,"byte_end":99575,"line_start":2938,"line_end":2938,"column_start":5,"column_end":12}},{"value":"/ # use std::cmp::Ordering;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99580,"byte_end":99609,"line_start":2939,"line_end":2939,"column_start":5,"column_end":34}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99614,"byte_end":99643,"line_start":2940,"line_end":2940,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99648,"byte_end":99651,"line_start":2941,"line_end":2941,"column_start":5,"column_end":8}},{"value":"/ let a: [(i32, i32); 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99656,"byte_end":99688,"line_start":2942,"line_end":2942,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.iter().min_set_by(|_, _| Ordering::Equal), Vec::<&(i32, i32)>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99693,"byte_end":99780,"line_start":2943,"line_end":2943,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99785,"byte_end":99788,"line_start":2944,"line_end":2944,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99793,"byte_end":99814,"line_start":2945,"line_end":2945,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().min_set_by(|&&(k1,_), &&(k2, _)| k1.cmp(&k2)), vec![&(1, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99819,"byte_end":99905,"line_start":2946,"line_end":2946,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99910,"byte_end":99913,"line_start":2947,"line_end":2947,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (2, 2), (3, 9), (4, 8), (5, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99918,"byte_end":99971,"line_start":2948,"line_end":2948,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(a.iter().min_set_by(|&&(_,k1), &&(_,k2)| k1.cmp(&k2)), vec![&(1, 2), &(2, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":99976,"byte_end":100070,"line_start":2949,"line_end":2949,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100075,"byte_end":100078,"line_start":2950,"line_end":2950,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (1, 3), (1, 4), (1, 5)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100083,"byte_end":100128,"line_start":2951,"line_end":2951,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.iter().min_set_by(|&&(k1,_), &&(k2, _)| k1.cmp(&k2)), vec![&(1, 2), &(1, 3), &(1, 4), &(1, 5)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100133,"byte_end":100246,"line_start":2952,"line_end":2952,"column_start":5,"column_end":118}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100251,"byte_end":100258,"line_start":2953,"line_end":2953,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100263,"byte_end":100266,"line_start":2954,"line_end":2954,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100271,"byte_end":100340,"line_start":2955,"line_end":2955,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100345,"byte_end":100370,"line_start":2956,"line_end":2956,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100375,"byte_end":100402,"line_start":2957,"line_end":2957,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2748},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101559,"byte_end":101573,"line_start":2992,"line_end":2992,"column_start":8,"column_end":22},"name":"min_set_by_key","qualname":"::Itertools::min_set_by_key","value":"pub fn min_set_by_key<K, F>(Self, F) -> Vec<Self::Item> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all minimum elements of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return all minimum elements of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100678,"byte_end":100742,"line_start":2968,"line_end":2968,"column_start":5,"column_end":69}},{"value":"/ the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100747,"byte_end":100774,"line_start":2969,"line_end":2969,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100779,"byte_end":100782,"line_start":2970,"line_end":2970,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100787,"byte_end":100801,"line_start":2971,"line_end":2971,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100806,"byte_end":100809,"line_start":2972,"line_end":2972,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100814,"byte_end":100821,"line_start":2973,"line_end":2973,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100826,"byte_end":100855,"line_start":2974,"line_end":2974,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100860,"byte_end":100863,"line_start":2975,"line_end":2975,"column_start":5,"column_end":8}},{"value":"/ let a: [(i32, i32); 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100868,"byte_end":100900,"line_start":2976,"line_end":2976,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.iter().min_set_by_key(|_| ()), Vec::<&(i32, i32)>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100905,"byte_end":100980,"line_start":2977,"line_end":2977,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100985,"byte_end":100988,"line_start":2978,"line_end":2978,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":100993,"byte_end":101014,"line_start":2979,"line_end":2979,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().min_set_by_key(|&&(k,_)| k), vec![&(1, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101019,"byte_end":101087,"line_start":2980,"line_end":2980,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101092,"byte_end":101095,"line_start":2981,"line_end":2981,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (2, 2), (3, 9), (4, 8), (5, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101100,"byte_end":101153,"line_start":2982,"line_end":2982,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(a.iter().min_set_by_key(|&&(_, k)| k), vec![&(1, 2), &(2, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101158,"byte_end":101236,"line_start":2983,"line_end":2983,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101241,"byte_end":101244,"line_start":2984,"line_end":2984,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (1, 3), (1, 4), (1, 5)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101249,"byte_end":101294,"line_start":2985,"line_end":2985,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.iter().min_set_by_key(|&&(k, _)| k), vec![&(1, 2), &(1, 3), &(1, 4), &(1, 5)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101299,"byte_end":101395,"line_start":2986,"line_end":2986,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101400,"byte_end":101407,"line_start":2987,"line_end":2987,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101412,"byte_end":101415,"line_start":2988,"line_end":2988,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101420,"byte_end":101489,"line_start":2989,"line_end":2989,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101494,"byte_end":101519,"line_start":2990,"line_end":2990,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101524,"byte_end":101551,"line_start":2991,"line_end":2991,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2752},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102424,"byte_end":102431,"line_start":3021,"line_end":3021,"column_start":8,"column_end":15},"name":"max_set","qualname":"::Itertools::max_set","value":"pub fn max_set(Self) -> Vec<Self::Item> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all maximum elements of an iterator.","sig":null,"attributes":[{"value":"/ Return all maximum elements of an iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101764,"byte_end":101811,"line_start":2998,"line_end":2998,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101816,"byte_end":101819,"line_start":2999,"line_end":2999,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101824,"byte_end":101838,"line_start":3000,"line_end":3000,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101843,"byte_end":101846,"line_start":3001,"line_end":3001,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101851,"byte_end":101858,"line_start":3002,"line_end":3002,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101863,"byte_end":101892,"line_start":3003,"line_end":3003,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101897,"byte_end":101900,"line_start":3004,"line_end":3004,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101905,"byte_end":101930,"line_start":3005,"line_end":3005,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().max_set(), Vec::<&i32>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101935,"byte_end":101990,"line_start":3006,"line_end":3006,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":101995,"byte_end":101998,"line_start":3007,"line_end":3007,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102003,"byte_end":102019,"line_start":3008,"line_end":3008,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().max_set(), vec![&1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102024,"byte_end":102069,"line_start":3009,"line_end":3009,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102074,"byte_end":102077,"line_start":3010,"line_end":3010,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102082,"byte_end":102110,"line_start":3011,"line_end":3011,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().max_set(), vec![&5]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102115,"byte_end":102160,"line_start":3012,"line_end":3012,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102165,"byte_end":102168,"line_start":3013,"line_end":3013,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102173,"byte_end":102198,"line_start":3014,"line_end":3014,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().max_set(), vec![&1, &1, &1, &1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102203,"byte_end":102260,"line_start":3015,"line_end":3015,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102265,"byte_end":102272,"line_start":3016,"line_end":3016,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102277,"byte_end":102280,"line_start":3017,"line_end":3017,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102285,"byte_end":102354,"line_start":3018,"line_end":3018,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102359,"byte_end":102384,"line_start":3019,"line_end":3019,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102389,"byte_end":102416,"line_start":3020,"line_end":3020,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2755},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103566,"byte_end":103576,"line_start":3052,"line_end":3052,"column_start":8,"column_end":18},"name":"max_set_by","qualname":"::Itertools::max_set_by","value":"pub fn max_set_by<F>(Self, F) -> Vec<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all maximum elements of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return all maximum elements of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102588,"byte_end":102652,"line_start":3027,"line_end":3027,"column_start":5,"column_end":69}},{"value":"/ the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102657,"byte_end":102684,"line_start":3028,"line_end":3028,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102689,"byte_end":102692,"line_start":3029,"line_end":3029,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102697,"byte_end":102711,"line_start":3030,"line_end":3030,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102716,"byte_end":102719,"line_start":3031,"line_end":3031,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102724,"byte_end":102731,"line_start":3032,"line_end":3032,"column_start":5,"column_end":12}},{"value":"/ # use std::cmp::Ordering;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102736,"byte_end":102765,"line_start":3033,"line_end":3033,"column_start":5,"column_end":34}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102770,"byte_end":102799,"line_start":3034,"line_end":3034,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102804,"byte_end":102807,"line_start":3035,"line_end":3035,"column_start":5,"column_end":8}},{"value":"/ let a: [(i32, i32); 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102812,"byte_end":102844,"line_start":3036,"line_end":3036,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.iter().max_set_by(|_, _| Ordering::Equal), Vec::<&(i32, i32)>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102849,"byte_end":102936,"line_start":3037,"line_end":3037,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102941,"byte_end":102944,"line_start":3038,"line_end":3038,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102949,"byte_end":102970,"line_start":3039,"line_end":3039,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().max_set_by(|&&(k1,_), &&(k2, _)| k1.cmp(&k2)), vec![&(1, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":102975,"byte_end":103061,"line_start":3040,"line_end":3040,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103066,"byte_end":103069,"line_start":3041,"line_end":3041,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (2, 2), (3, 9), (4, 8), (5, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103074,"byte_end":103127,"line_start":3042,"line_end":3042,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(a.iter().max_set_by(|&&(_,k1), &&(_,k2)| k1.cmp(&k2)), vec![&(3, 9), &(5, 9)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103132,"byte_end":103226,"line_start":3043,"line_end":3043,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103231,"byte_end":103234,"line_start":3044,"line_end":3044,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (1, 3), (1, 4), (1, 5)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103239,"byte_end":103284,"line_start":3045,"line_end":3045,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.iter().max_set_by(|&&(k1,_), &&(k2, _)| k1.cmp(&k2)), vec![&(1, 2), &(1, 3), &(1, 4), &(1, 5)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103289,"byte_end":103402,"line_start":3046,"line_end":3046,"column_start":5,"column_end":118}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103407,"byte_end":103414,"line_start":3047,"line_end":3047,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103419,"byte_end":103422,"line_start":3048,"line_end":3048,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103427,"byte_end":103496,"line_start":3049,"line_end":3049,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103501,"byte_end":103526,"line_start":3050,"line_end":3050,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103531,"byte_end":103558,"line_start":3051,"line_end":3051,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104715,"byte_end":104729,"line_start":3086,"line_end":3086,"column_start":8,"column_end":22},"name":"max_set_by_key","qualname":"::Itertools::max_set_by_key","value":"pub fn max_set_by_key<K, F>(Self, F) -> Vec<Self::Item> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return all minimum elements of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return all minimum elements of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103834,"byte_end":103898,"line_start":3062,"line_end":3062,"column_start":5,"column_end":69}},{"value":"/ the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103903,"byte_end":103930,"line_start":3063,"line_end":3063,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103935,"byte_end":103938,"line_start":3064,"line_end":3064,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103943,"byte_end":103957,"line_start":3065,"line_end":3065,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103962,"byte_end":103965,"line_start":3066,"line_end":3066,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103970,"byte_end":103977,"line_start":3067,"line_end":3067,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":103982,"byte_end":104011,"line_start":3068,"line_end":3068,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104016,"byte_end":104019,"line_start":3069,"line_end":3069,"column_start":5,"column_end":8}},{"value":"/ let a: [(i32, i32); 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104024,"byte_end":104056,"line_start":3070,"line_end":3070,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(a.iter().max_set_by_key(|_| ()), Vec::<&(i32, i32)>::new());","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104061,"byte_end":104136,"line_start":3071,"line_end":3071,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104141,"byte_end":104144,"line_start":3072,"line_end":3072,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104149,"byte_end":104170,"line_start":3073,"line_end":3073,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().max_set_by_key(|&&(k,_)| k), vec![&(1, 2)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104175,"byte_end":104243,"line_start":3074,"line_end":3074,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104248,"byte_end":104251,"line_start":3075,"line_end":3075,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (2, 2), (3, 9), (4, 8), (5, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104256,"byte_end":104309,"line_start":3076,"line_end":3076,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(a.iter().max_set_by_key(|&&(_, k)| k), vec![&(3, 9), &(5, 9)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104314,"byte_end":104392,"line_start":3077,"line_end":3077,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104397,"byte_end":104400,"line_start":3078,"line_end":3078,"column_start":5,"column_end":8}},{"value":"/ let a = [(1, 2), (1, 3), (1, 4), (1, 5)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104405,"byte_end":104450,"line_start":3079,"line_end":3079,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(a.iter().max_set_by_key(|&&(k, _)| k), vec![&(1, 2), &(1, 3), &(1, 4), &(1, 5)]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104455,"byte_end":104551,"line_start":3080,"line_end":3080,"column_start":5,"column_end":101}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104556,"byte_end":104563,"line_start":3081,"line_end":3081,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104568,"byte_end":104571,"line_start":3082,"line_end":3082,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104576,"byte_end":104645,"line_start":3083,"line_end":3083,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104650,"byte_end":104675,"line_start":3084,"line_end":3084,"column_start":5,"column_end":30}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104680,"byte_end":104707,"line_start":3085,"line_end":3085,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2763},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106212,"byte_end":106218,"line_start":3127,"line_end":3127,"column_start":8,"column_end":14},"name":"minmax","qualname":"::Itertools::minmax","value":"pub fn minmax(Self) -> MinMaxResult<Self::Item> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the minimum and maximum elements in the iterator.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum elements in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104920,"byte_end":104980,"line_start":3092,"line_end":3092,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104985,"byte_end":104988,"line_start":3093,"line_end":3093,"column_start":5,"column_end":8}},{"value":"/ The return type `MinMaxResult` is an enum of three variants:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":104993,"byte_end":105057,"line_start":3094,"line_end":3094,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105062,"byte_end":105065,"line_start":3095,"line_end":3095,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105070,"byte_end":105114,"line_start":3096,"line_end":3096,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(x)` if the iterator has exactly one element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105119,"byte_end":105181,"line_start":3097,"line_end":3097,"column_start":5,"column_end":67}},{"value":"/ - `MinMax(x, y)` is returned otherwise, where `x <= y`. Two","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105186,"byte_end":105249,"line_start":3098,"line_end":3098,"column_start":5,"column_end":68}},{"value":"/    values are equal if and only if there is more than one","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105254,"byte_end":105315,"line_start":3099,"line_end":3099,"column_start":5,"column_end":66}},{"value":"/    element in the iterator and all elements are equal.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105320,"byte_end":105378,"line_start":3100,"line_end":3100,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105383,"byte_end":105386,"line_start":3101,"line_end":3101,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `minmax` does `1.5 * n` comparisons,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105391,"byte_end":105461,"line_start":3102,"line_end":3102,"column_start":5,"column_end":75}},{"value":"/ and so is faster than calling `min` and `max` separately which does","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105466,"byte_end":105537,"line_start":3103,"line_end":3103,"column_start":5,"column_end":76}},{"value":"/ `2 * n` comparisons.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105542,"byte_end":105566,"line_start":3104,"line_end":3104,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105571,"byte_end":105574,"line_start":3105,"line_end":3105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105579,"byte_end":105593,"line_start":3106,"line_end":3106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105598,"byte_end":105601,"line_start":3107,"line_end":3107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105606,"byte_end":105613,"line_start":3108,"line_end":3108,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105618,"byte_end":105647,"line_start":3109,"line_end":3109,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105652,"byte_end":105718,"line_start":3110,"line_end":3110,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105723,"byte_end":105726,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105731,"byte_end":105756,"line_start":3112,"line_end":3112,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), NoElements);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105761,"byte_end":105807,"line_start":3113,"line_end":3113,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105812,"byte_end":105815,"line_start":3114,"line_end":3114,"column_start":5,"column_end":8}},{"value":"/ let a = [1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105820,"byte_end":105836,"line_start":3115,"line_end":3115,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(a.iter().minmax(), OneElement(&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105841,"byte_end":105891,"line_start":3116,"line_end":3116,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105896,"byte_end":105899,"line_start":3117,"line_end":3117,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 2, 3, 4, 5];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105904,"byte_end":105932,"line_start":3118,"line_end":3118,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105937,"byte_end":105987,"line_start":3119,"line_end":3119,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":105992,"byte_end":105995,"line_start":3120,"line_end":3120,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, 1, 1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106000,"byte_end":106025,"line_start":3121,"line_end":3121,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().minmax(), MinMax(&1, &1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106030,"byte_end":106080,"line_start":3122,"line_end":3122,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106085,"byte_end":106092,"line_start":3123,"line_end":3123,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106097,"byte_end":106100,"line_start":3124,"line_end":3124,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106105,"byte_end":106174,"line_start":3125,"line_end":3125,"column_start":5,"column_end":74}},{"value":"/ if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106179,"byte_end":106204,"line_start":3126,"line_end":3126,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2766},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106938,"byte_end":106951,"line_start":3144,"line_end":3144,"column_start":8,"column_end":21},"name":"minmax_by_key","qualname":"::Itertools::minmax_by_key","value":"pub fn minmax_by_key<K, F>(Self, F) -> MinMaxResult<Self::Item> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106382,"byte_end":106457,"line_start":3133,"line_end":3133,"column_start":5,"column_end":80}},{"value":"/ the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106462,"byte_end":106489,"line_start":3134,"line_end":3134,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106494,"byte_end":106497,"line_start":3135,"line_end":3135,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106502,"byte_end":106598,"line_start":3136,"line_end":3136,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106603,"byte_end":106606,"line_start":3137,"line_end":3137,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106611,"byte_end":106688,"line_start":3138,"line_end":3138,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106693,"byte_end":106770,"line_start":3139,"line_end":3139,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106775,"byte_end":106827,"line_start":3140,"line_end":3140,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106832,"byte_end":106835,"line_start":3141,"line_end":3141,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106840,"byte_end":106905,"line_start":3142,"line_end":3142,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":106910,"byte_end":106930,"line_start":3143,"line_end":3143,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107613,"byte_end":107622,"line_start":3158,"line_end":3158,"column_start":8,"column_end":17},"name":"minmax_by","qualname":"::Itertools::minmax_by","value":"pub fn minmax_by<F>(Self, F) -> MinMaxResult<Self::Item> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the minimum and maximum element of an iterator, as determined by\n the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the minimum and maximum element of an iterator, as determined by","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107149,"byte_end":107224,"line_start":3150,"line_end":3150,"column_start":5,"column_end":80}},{"value":"/ the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107229,"byte_end":107267,"line_start":3151,"line_end":3151,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107272,"byte_end":107275,"line_start":3152,"line_end":3152,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for [`.minmax()`](Itertools::minmax).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107280,"byte_end":107376,"line_start":3153,"line_end":3153,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107381,"byte_end":107384,"line_start":3154,"line_end":3154,"column_start":5,"column_end":8}},{"value":"/ For the minimum, the first minimal element is returned.  For the maximum,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107389,"byte_end":107466,"line_start":3155,"line_end":3155,"column_start":5,"column_end":82}},{"value":"/ the last maximal element wins.  This matches the behavior of the standard","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107471,"byte_end":107548,"line_start":3156,"line_end":3156,"column_start":5,"column_end":82}},{"value":"/ [`Iterator::min`] and [`Iterator::max`] methods.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107553,"byte_end":107605,"line_start":3157,"line_end":3157,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2774},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108457,"byte_end":108469,"line_start":3187,"line_end":3187,"column_start":8,"column_end":20},"name":"position_max","qualname":"::Itertools::position_max","value":"pub fn position_max(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107901,"byte_end":107964,"line_start":3168,"line_end":3168,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107969,"byte_end":107972,"line_start":3169,"line_end":3169,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":107977,"byte_end":108041,"line_start":3170,"line_end":3170,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108046,"byte_end":108075,"line_start":3171,"line_end":3171,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108080,"byte_end":108083,"line_start":3172,"line_end":3172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108088,"byte_end":108102,"line_start":3173,"line_end":3173,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108107,"byte_end":108110,"line_start":3174,"line_end":3174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108115,"byte_end":108122,"line_start":3175,"line_end":3175,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108127,"byte_end":108156,"line_start":3176,"line_end":3176,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108161,"byte_end":108164,"line_start":3177,"line_end":3177,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108169,"byte_end":108194,"line_start":3178,"line_end":3178,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108199,"byte_end":108245,"line_start":3179,"line_end":3179,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108250,"byte_end":108253,"line_start":3180,"line_end":3180,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108258,"byte_end":108289,"line_start":3181,"line_end":3181,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max(), Some(3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108294,"byte_end":108343,"line_start":3182,"line_end":3182,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108348,"byte_end":108351,"line_start":3183,"line_end":3183,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108356,"byte_end":108383,"line_start":3184,"line_end":3184,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_max(), Some(1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108388,"byte_end":108437,"line_start":3185,"line_end":3185,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108442,"byte_end":108449,"line_start":3186,"line_end":3186,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109320,"byte_end":109339,"line_start":3215,"line_end":3215,"column_start":8,"column_end":27},"name":"position_max_by_key","qualname":"::Itertools::position_max_by_key","value":"pub fn position_max_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108653,"byte_end":108719,"line_start":3195,"line_end":3195,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108724,"byte_end":108765,"line_start":3196,"line_end":3196,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108770,"byte_end":108773,"line_start":3197,"line_end":3197,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108778,"byte_end":108842,"line_start":3198,"line_end":3198,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108847,"byte_end":108876,"line_start":3199,"line_end":3199,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108881,"byte_end":108884,"line_start":3200,"line_end":3200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108889,"byte_end":108903,"line_start":3201,"line_end":3201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108908,"byte_end":108911,"line_start":3202,"line_end":3202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108916,"byte_end":108923,"line_start":3203,"line_end":3203,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108928,"byte_end":108957,"line_start":3204,"line_end":3204,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108962,"byte_end":108965,"line_start":3205,"line_end":3205,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":108970,"byte_end":108995,"line_start":3206,"line_end":3206,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109000,"byte_end":109064,"line_start":3207,"line_end":3207,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109069,"byte_end":109072,"line_start":3208,"line_end":3208,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109077,"byte_end":109112,"line_start":3209,"line_end":3209,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109117,"byte_end":109184,"line_start":3210,"line_end":3210,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109189,"byte_end":109192,"line_start":3211,"line_end":3211,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109197,"byte_end":109228,"line_start":3212,"line_end":3212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by_key(|x| x.abs()), Some(3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109233,"byte_end":109300,"line_start":3213,"line_end":3213,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109305,"byte_end":109312,"line_start":3214,"line_end":3214,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110250,"byte_end":110265,"line_start":3243,"line_end":3243,"column_start":8,"column_end":23},"name":"position_max_by","qualname":"::Itertools::position_max_by","value":"pub fn position_max_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the maximum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the maximum element in the iterator, as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109572,"byte_end":109638,"line_start":3223,"line_end":3223,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109643,"byte_end":109695,"line_start":3224,"line_end":3224,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109700,"byte_end":109703,"line_start":3225,"line_end":3225,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally maximum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109708,"byte_end":109772,"line_start":3226,"line_end":3226,"column_start":5,"column_end":69}},{"value":"/ last of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109777,"byte_end":109806,"line_start":3227,"line_end":3227,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109811,"byte_end":109814,"line_start":3228,"line_end":3228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109819,"byte_end":109833,"line_start":3229,"line_end":3229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109838,"byte_end":109841,"line_start":3230,"line_end":3230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109846,"byte_end":109853,"line_start":3231,"line_end":3231,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109858,"byte_end":109887,"line_start":3232,"line_end":3232,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109892,"byte_end":109895,"line_start":3233,"line_end":3233,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109900,"byte_end":109925,"line_start":3234,"line_end":3234,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109930,"byte_end":109994,"line_start":3235,"line_end":3235,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":109999,"byte_end":110002,"line_start":3236,"line_end":3236,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110007,"byte_end":110042,"line_start":3237,"line_end":3237,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110047,"byte_end":110114,"line_start":3238,"line_end":3238,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110119,"byte_end":110122,"line_start":3239,"line_end":3239,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110127,"byte_end":110158,"line_start":3240,"line_end":3240,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_max_by(|x, y| x.cmp(y)), Some(1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110163,"byte_end":110230,"line_start":3241,"line_end":3241,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110235,"byte_end":110242,"line_start":3242,"line_end":3242,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111055,"byte_end":111067,"line_start":3270,"line_end":3270,"column_start":8,"column_end":20},"name":"position_min","qualname":"::Itertools::position_min","value":"pub fn position_min(Self) -> Option<usize> where Self: Sized, Self::Item: Ord","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110498,"byte_end":110561,"line_start":3251,"line_end":3251,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110566,"byte_end":110569,"line_start":3252,"line_end":3252,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110574,"byte_end":110638,"line_start":3253,"line_end":3253,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110643,"byte_end":110673,"line_start":3254,"line_end":3254,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110678,"byte_end":110681,"line_start":3255,"line_end":3255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110686,"byte_end":110700,"line_start":3256,"line_end":3256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110705,"byte_end":110708,"line_start":3257,"line_end":3257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110713,"byte_end":110720,"line_start":3258,"line_end":3258,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110725,"byte_end":110754,"line_start":3259,"line_end":3259,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110759,"byte_end":110762,"line_start":3260,"line_end":3260,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110767,"byte_end":110792,"line_start":3261,"line_end":3261,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110797,"byte_end":110843,"line_start":3262,"line_end":3262,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110848,"byte_end":110851,"line_start":3263,"line_end":3263,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110856,"byte_end":110887,"line_start":3264,"line_end":3264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min(), Some(4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110892,"byte_end":110941,"line_start":3265,"line_end":3265,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110946,"byte_end":110949,"line_start":3266,"line_end":3266,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110954,"byte_end":110981,"line_start":3267,"line_end":3267,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_min(), Some(2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":110986,"byte_end":111035,"line_start":3268,"line_end":3268,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111040,"byte_end":111047,"line_start":3269,"line_end":3269,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2789},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111919,"byte_end":111938,"line_start":3298,"line_end":3298,"column_start":8,"column_end":27},"name":"position_min_by_key","qualname":"::Itertools::position_min_by_key","value":"pub fn position_min_by_key<K, F>(Self, F) -> Option<usize> where Self: Sized,\nK: Ord, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111251,"byte_end":111317,"line_start":3278,"line_end":3278,"column_start":5,"column_end":71}},{"value":"/ determined by the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111322,"byte_end":111363,"line_start":3279,"line_end":3279,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111368,"byte_end":111371,"line_start":3280,"line_end":3280,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111376,"byte_end":111440,"line_start":3281,"line_end":3281,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111445,"byte_end":111475,"line_start":3282,"line_end":3282,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111480,"byte_end":111483,"line_start":3283,"line_end":3283,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111488,"byte_end":111502,"line_start":3284,"line_end":3284,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111507,"byte_end":111510,"line_start":3285,"line_end":3285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111515,"byte_end":111522,"line_start":3286,"line_end":3286,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111527,"byte_end":111556,"line_start":3287,"line_end":3287,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111561,"byte_end":111564,"line_start":3288,"line_end":3288,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111569,"byte_end":111594,"line_start":3289,"line_end":3289,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111599,"byte_end":111663,"line_start":3290,"line_end":3290,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111668,"byte_end":111671,"line_start":3291,"line_end":3291,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111676,"byte_end":111711,"line_start":3292,"line_end":3292,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111716,"byte_end":111783,"line_start":3293,"line_end":3293,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111788,"byte_end":111791,"line_start":3294,"line_end":3294,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111796,"byte_end":111827,"line_start":3295,"line_end":3295,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by_key(|x| x.abs()), Some(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111832,"byte_end":111899,"line_start":3296,"line_end":3296,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":111904,"byte_end":111911,"line_start":3297,"line_end":3297,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2794},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112850,"byte_end":112865,"line_start":3326,"line_end":3326,"column_start":8,"column_end":23},"name":"position_min_by","qualname":"::Itertools::position_min_by","value":"pub fn position_min_by<F>(Self, F) -> Option<usize> where Self: Sized,\nF: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the position of the minimum element in the iterator, as\n determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the position of the minimum element in the iterator, as","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112171,"byte_end":112237,"line_start":3306,"line_end":3306,"column_start":5,"column_end":71}},{"value":"/ determined by the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112242,"byte_end":112294,"line_start":3307,"line_end":3307,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112299,"byte_end":112302,"line_start":3308,"line_end":3308,"column_start":5,"column_end":8}},{"value":"/ If several elements are equally minimum, the position of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112307,"byte_end":112371,"line_start":3309,"line_end":3309,"column_start":5,"column_end":69}},{"value":"/ first of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112376,"byte_end":112406,"line_start":3310,"line_end":3310,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112411,"byte_end":112414,"line_start":3311,"line_end":3311,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112419,"byte_end":112433,"line_start":3312,"line_end":3312,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112438,"byte_end":112441,"line_start":3313,"line_end":3313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112446,"byte_end":112453,"line_start":3314,"line_end":3314,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112458,"byte_end":112487,"line_start":3315,"line_end":3315,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112492,"byte_end":112495,"line_start":3316,"line_end":3316,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112500,"byte_end":112525,"line_start":3317,"line_end":3317,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112530,"byte_end":112594,"line_start":3318,"line_end":3318,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112599,"byte_end":112602,"line_start":3319,"line_end":3319,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112607,"byte_end":112642,"line_start":3320,"line_end":3320,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112647,"byte_end":112714,"line_start":3321,"line_end":3321,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112719,"byte_end":112722,"line_start":3322,"line_end":3322,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112727,"byte_end":112758,"line_start":3323,"line_end":3323,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_min_by(|x, y| x.cmp(y)), Some(2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112763,"byte_end":112830,"line_start":3324,"line_end":3324,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":112835,"byte_end":112842,"line_start":3325,"line_end":3325,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2798},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114767,"byte_end":114782,"line_start":3376,"line_end":3376,"column_start":8,"column_end":23},"name":"position_minmax","qualname":"::Itertools::position_minmax","value":"pub fn position_minmax(Self) -> MinMaxResult<usize> where Self: Sized,\nSelf::Item: PartialOrd","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the positions of the minimum and maximum elements in\n the iterator.","sig":null,"attributes":[{"value":"/ Return the positions of the minimum and maximum elements in","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113098,"byte_end":113161,"line_start":3334,"line_end":3334,"column_start":5,"column_end":68}},{"value":"/ the iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113166,"byte_end":113183,"line_start":3335,"line_end":3335,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113188,"byte_end":113191,"line_start":3336,"line_end":3336,"column_start":5,"column_end":8}},{"value":"/ The return type [`MinMaxResult`] is an enum of three variants:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113196,"byte_end":113262,"line_start":3337,"line_end":3337,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113267,"byte_end":113270,"line_start":3338,"line_end":3338,"column_start":5,"column_end":8}},{"value":"/ - `NoElements` if the iterator is empty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113275,"byte_end":113319,"line_start":3339,"line_end":3339,"column_start":5,"column_end":49}},{"value":"/ - `OneElement(xpos)` if the iterator has exactly one element.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113324,"byte_end":113389,"line_start":3340,"line_end":3340,"column_start":5,"column_end":70}},{"value":"/ - `MinMax(xpos, ypos)` is returned otherwise, where the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113394,"byte_end":113453,"line_start":3341,"line_end":3341,"column_start":5,"column_end":64}},{"value":"/    element at `xpos` ≤ the element at `ypos`. While the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113458,"byte_end":113519,"line_start":3342,"line_end":3342,"column_start":5,"column_end":64}},{"value":"/    referenced elements themselves may be equal, `xpos` cannot","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113524,"byte_end":113589,"line_start":3343,"line_end":3343,"column_start":5,"column_end":70}},{"value":"/    be equal to `ypos`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113594,"byte_end":113620,"line_start":3344,"line_end":3344,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113625,"byte_end":113628,"line_start":3345,"line_end":3345,"column_start":5,"column_end":8}},{"value":"/ On an iterator of length `n`, `position_minmax` does `1.5 * n`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113633,"byte_end":113699,"line_start":3346,"line_end":3346,"column_start":5,"column_end":71}},{"value":"/ comparisons, and so is faster than calling `position_min` and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113704,"byte_end":113769,"line_start":3347,"line_end":3347,"column_start":5,"column_end":70}},{"value":"/ `position_max` separately which does `2 * n` comparisons.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113774,"byte_end":113835,"line_start":3348,"line_end":3348,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113840,"byte_end":113843,"line_start":3349,"line_end":3349,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113848,"byte_end":113913,"line_start":3350,"line_end":3350,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113918,"byte_end":113984,"line_start":3351,"line_end":3351,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":113989,"byte_end":114055,"line_start":3352,"line_end":3352,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114060,"byte_end":114084,"line_start":3353,"line_end":3353,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114089,"byte_end":114092,"line_start":3354,"line_end":3354,"column_start":5,"column_end":8}},{"value":"/ The elements can be floats but no particular result is","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114097,"byte_end":114155,"line_start":3355,"line_end":3355,"column_start":5,"column_end":63}},{"value":"/ guaranteed if an element is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114160,"byte_end":114196,"line_start":3356,"line_end":3356,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114201,"byte_end":114204,"line_start":3357,"line_end":3357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114209,"byte_end":114223,"line_start":3358,"line_end":3358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114228,"byte_end":114231,"line_start":3359,"line_end":3359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114236,"byte_end":114243,"line_start":3360,"line_end":3360,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114248,"byte_end":114277,"line_start":3361,"line_end":3361,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114282,"byte_end":114348,"line_start":3362,"line_end":3362,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114353,"byte_end":114356,"line_start":3363,"line_end":3363,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114361,"byte_end":114386,"line_start":3364,"line_end":3364,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax(), NoElements);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114391,"byte_end":114446,"line_start":3365,"line_end":3365,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114451,"byte_end":114454,"line_start":3366,"line_end":3366,"column_start":5,"column_end":8}},{"value":"/ let a = [10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114459,"byte_end":114476,"line_start":3367,"line_end":3367,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(a.iter().position_minmax(), OneElement(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114481,"byte_end":114539,"line_start":3368,"line_end":3368,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114544,"byte_end":114547,"line_start":3369,"line_end":3369,"column_start":5,"column_end":8}},{"value":"/ let a = [-3, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114552,"byte_end":114583,"line_start":3370,"line_end":3370,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(4, 3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114588,"byte_end":114645,"line_start":3371,"line_end":3371,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114650,"byte_end":114653,"line_start":3372,"line_end":3372,"column_start":5,"column_end":8}},{"value":"/ let a = [1, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114658,"byte_end":114685,"line_start":3373,"line_end":3373,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(a.iter().position_minmax(), MinMax(2, 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114690,"byte_end":114747,"line_start":3374,"line_end":3374,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":114752,"byte_end":114759,"line_start":3375,"line_end":3375,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2811},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116466,"byte_end":116488,"line_start":3421,"line_end":3421,"column_start":8,"column_end":30},"name":"position_minmax_by_key","qualname":"::Itertools::position_minmax_by_key","value":"pub fn position_minmax_by_key<K, F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, K: PartialOrd, F: FnMut(&Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115172,"byte_end":115237,"line_start":3387,"line_end":3387,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115242,"byte_end":115296,"line_start":3388,"line_end":3388,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115301,"byte_end":115304,"line_start":3389,"line_end":3389,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115309,"byte_end":115371,"line_start":3390,"line_end":3390,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115376,"byte_end":115400,"line_start":3391,"line_end":3391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115405,"byte_end":115408,"line_start":3392,"line_end":3392,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115413,"byte_end":115478,"line_start":3393,"line_end":3393,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115483,"byte_end":115549,"line_start":3394,"line_end":3394,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115554,"byte_end":115620,"line_start":3395,"line_end":3395,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115625,"byte_end":115649,"line_start":3396,"line_end":3396,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115654,"byte_end":115657,"line_start":3397,"line_end":3397,"column_start":5,"column_end":8}},{"value":"/ The keys can be floats but no particular result is guaranteed","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115662,"byte_end":115727,"line_start":3398,"line_end":3398,"column_start":5,"column_end":70}},{"value":"/ if a key is NaN.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115732,"byte_end":115752,"line_start":3399,"line_end":3399,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115757,"byte_end":115760,"line_start":3400,"line_end":3400,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115765,"byte_end":115779,"line_start":3401,"line_end":3401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115784,"byte_end":115787,"line_start":3402,"line_end":3402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115792,"byte_end":115799,"line_start":3403,"line_end":3403,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115804,"byte_end":115833,"line_start":3404,"line_end":3404,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115838,"byte_end":115904,"line_start":3405,"line_end":3405,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115909,"byte_end":115912,"line_start":3406,"line_end":3406,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115917,"byte_end":115942,"line_start":3407,"line_end":3407,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), NoElements);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":115947,"byte_end":116020,"line_start":3408,"line_end":3408,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116025,"byte_end":116028,"line_start":3409,"line_end":3409,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116033,"byte_end":116054,"line_start":3410,"line_end":3410,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), OneElement(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116059,"byte_end":116135,"line_start":3411,"line_end":3411,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116140,"byte_end":116143,"line_start":3412,"line_end":3412,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116148,"byte_end":116183,"line_start":3413,"line_end":3413,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(1, 4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116188,"byte_end":116263,"line_start":3414,"line_end":3414,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116268,"byte_end":116271,"line_start":3415,"line_end":3415,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116276,"byte_end":116307,"line_start":3416,"line_end":3416,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by_key(|x| x.abs()), MinMax(0, 3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116312,"byte_end":116387,"line_start":3417,"line_end":3417,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116392,"byte_end":116399,"line_start":3418,"line_end":3418,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116404,"byte_end":116407,"line_start":3419,"line_end":3419,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116412,"byte_end":116458,"line_start":3420,"line_end":3420,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2825},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118093,"byte_end":118111,"line_start":3463,"line_end":3463,"column_start":8,"column_end":26},"name":"position_minmax_by","qualname":"::Itertools::position_minmax_by","value":"pub fn position_minmax_by<F>(Self, F) -> MinMaxResult<usize> where\nSelf: Sized, F: FnMut(&Self::Item, &Self::Item) -> Ordering","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Return the postions of the minimum and maximum elements of an\n iterator, as determined by the specified comparison function.","sig":null,"attributes":[{"value":"/ Return the postions of the minimum and maximum elements of an","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116891,"byte_end":116956,"line_start":3432,"line_end":3432,"column_start":5,"column_end":70}},{"value":"/ iterator, as determined by the specified comparison function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":116961,"byte_end":117026,"line_start":3433,"line_end":3433,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117031,"byte_end":117034,"line_start":3434,"line_end":3434,"column_start":5,"column_end":8}},{"value":"/ The return value is a variant of [`MinMaxResult`] like for","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117039,"byte_end":117101,"line_start":3435,"line_end":3435,"column_start":5,"column_end":67}},{"value":"/ [`position_minmax`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117106,"byte_end":117130,"line_start":3436,"line_end":3436,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117135,"byte_end":117138,"line_start":3437,"line_end":3437,"column_start":5,"column_end":8}},{"value":"/ For the minimum, if several elements are equally minimum, the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117143,"byte_end":117208,"line_start":3438,"line_end":3438,"column_start":5,"column_end":70}},{"value":"/ position of the first of them is returned. For the maximum, if","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117213,"byte_end":117279,"line_start":3439,"line_end":3439,"column_start":5,"column_end":71}},{"value":"/ several elements are equally maximum, the position of the last","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117284,"byte_end":117350,"line_start":3440,"line_end":3440,"column_start":5,"column_end":71}},{"value":"/ of them is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117355,"byte_end":117379,"line_start":3441,"line_end":3441,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117384,"byte_end":117387,"line_start":3442,"line_end":3442,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117392,"byte_end":117406,"line_start":3443,"line_end":3443,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117411,"byte_end":117414,"line_start":3444,"line_end":3444,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117419,"byte_end":117426,"line_start":3445,"line_end":3445,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117431,"byte_end":117460,"line_start":3446,"line_end":3446,"column_start":5,"column_end":34}},{"value":"/ use itertools::MinMaxResult::{NoElements, OneElement, MinMax};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117465,"byte_end":117531,"line_start":3447,"line_end":3447,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117536,"byte_end":117539,"line_start":3448,"line_end":3448,"column_start":5,"column_end":8}},{"value":"/ let a: [i32; 0] = [];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117544,"byte_end":117569,"line_start":3449,"line_end":3449,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), NoElements);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117574,"byte_end":117647,"line_start":3450,"line_end":3450,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117652,"byte_end":117655,"line_start":3451,"line_end":3451,"column_start":5,"column_end":8}},{"value":"/ let a = [10_i32];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117660,"byte_end":117681,"line_start":3452,"line_end":3452,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), OneElement(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117686,"byte_end":117762,"line_start":3453,"line_end":3453,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117767,"byte_end":117770,"line_start":3454,"line_end":3454,"column_start":5,"column_end":8}},{"value":"/ let a = [-3_i32, 0, 1, 5, -10];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117775,"byte_end":117810,"line_start":3455,"line_end":3455,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(4, 3));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117815,"byte_end":117890,"line_start":3456,"line_end":3456,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117895,"byte_end":117898,"line_start":3457,"line_end":3457,"column_start":5,"column_end":8}},{"value":"/ let a = [1_i32, 1, -1, -1];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117903,"byte_end":117934,"line_start":3458,"line_end":3458,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(a.iter().position_minmax_by(|x, y| x.cmp(y)), MinMax(2, 1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":117939,"byte_end":118014,"line_start":3459,"line_end":3459,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118019,"byte_end":118026,"line_start":3460,"line_end":3460,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118031,"byte_end":118034,"line_start":3461,"line_end":3461,"column_start":5,"column_end":8}},{"value":"/ [`position_minmax`]: Self::position_minmax","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118039,"byte_end":118085,"line_start":3462,"line_end":3462,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2838},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119449,"byte_end":119460,"line_start":3491,"line_end":3491,"column_start":8,"column_end":19},"name":"exactly_one","qualname":"::Itertools::exactly_one","value":"pub fn exactly_one(Self) -> Result<Self::Item, ExactlyOneError<Self>> where\nSelf: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" If the iterator yields exactly one element, that element will be returned, otherwise\n an error will be returned containing an iterator that has the same output as the input\n iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields exactly one element, that element will be returned, otherwise","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118529,"byte_end":118617,"line_start":3474,"line_end":3474,"column_start":5,"column_end":93}},{"value":"/ an error will be returned containing an iterator that has the same output as the input","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118622,"byte_end":118712,"line_start":3475,"line_end":3475,"column_start":5,"column_end":95}},{"value":"/ iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118717,"byte_end":118730,"line_start":3476,"line_end":3476,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118735,"byte_end":118738,"line_start":3477,"line_end":3477,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118743,"byte_end":118832,"line_start":3478,"line_end":3478,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should only be one element yielded is false this provides","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118837,"byte_end":118928,"line_start":3479,"line_end":3479,"column_start":5,"column_end":96}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":118933,"byte_end":119012,"line_start":3480,"line_end":3480,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119017,"byte_end":119020,"line_start":3481,"line_end":3481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119025,"byte_end":119039,"line_start":3482,"line_end":3482,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119044,"byte_end":119051,"line_start":3483,"line_end":3483,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119056,"byte_end":119085,"line_start":3484,"line_end":3484,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119090,"byte_end":119093,"line_start":3485,"line_end":3485,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).exactly_one().unwrap(), 2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119098,"byte_end":119168,"line_start":3486,"line_end":3486,"column_start":5,"column_end":75}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).exactly_one().unwrap_err().eq(2..4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119173,"byte_end":119258,"line_start":3487,"line_end":3487,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).exactly_one().unwrap_err().eq(2..5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119263,"byte_end":119348,"line_start":3488,"line_end":3488,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&_| false).exactly_one().unwrap_err().eq(0..0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119353,"byte_end":119429,"line_start":3489,"line_end":3489,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119434,"byte_end":119441,"line_start":3490,"line_end":3490,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2839},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120985,"byte_end":120996,"line_start":3527,"line_end":3527,"column_start":8,"column_end":19},"name":"at_most_one","qualname":"::Itertools::at_most_one","value":"pub fn at_most_one(Self) -> Result<Option<Self::Item>, ExactlyOneError<Self>>\nwhere Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" If the iterator yields no elements, Ok(None) will be returned. If the iterator yields\n exactly one element, that element will be returned, otherwise an error will be returned\n containing an iterator that has the same output as the input iterator.","sig":null,"attributes":[{"value":"/ If the iterator yields no elements, Ok(None) will be returned. If the iterator yields","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":119997,"byte_end":120086,"line_start":3510,"line_end":3510,"column_start":5,"column_end":94}},{"value":"/ exactly one element, that element will be returned, otherwise an error will be returned","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120091,"byte_end":120182,"line_start":3511,"line_end":3511,"column_start":5,"column_end":96}},{"value":"/ containing an iterator that has the same output as the input iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120187,"byte_end":120261,"line_start":3512,"line_end":3512,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120266,"byte_end":120269,"line_start":3513,"line_end":3513,"column_start":5,"column_end":8}},{"value":"/ This provides an additional layer of validation over just calling `Iterator::next()`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120274,"byte_end":120363,"line_start":3514,"line_end":3514,"column_start":5,"column_end":94}},{"value":"/ If your assumption that there should be at most one element yielded is false this provides","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120368,"byte_end":120462,"line_start":3515,"line_end":3515,"column_start":5,"column_end":99}},{"value":"/ the opportunity to detect and handle that, preventing errors at a distance.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120467,"byte_end":120546,"line_start":3516,"line_end":3516,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120551,"byte_end":120554,"line_start":3517,"line_end":3517,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120559,"byte_end":120573,"line_start":3518,"line_end":3518,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120578,"byte_end":120585,"line_start":3519,"line_end":3519,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120590,"byte_end":120619,"line_start":3520,"line_end":3520,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120624,"byte_end":120627,"line_start":3521,"line_end":3521,"column_start":5,"column_end":8}},{"value":"/ assert_eq!((0..10).filter(|&x| x == 2).at_most_one().unwrap(), Some(2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120632,"byte_end":120708,"line_start":3522,"line_end":3522,"column_start":5,"column_end":81}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 4).at_most_one().unwrap_err().eq(2..4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120713,"byte_end":120798,"line_start":3523,"line_end":3523,"column_start":5,"column_end":90}},{"value":"/ assert!((0..10).filter(|&x| x > 1 && x < 5).at_most_one().unwrap_err().eq(2..5));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120803,"byte_end":120888,"line_start":3524,"line_end":3524,"column_start":5,"column_end":90}},{"value":"/ assert_eq!((0..10).filter(|&_| false).at_most_one().unwrap(), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120893,"byte_end":120965,"line_start":3525,"line_end":3525,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":120970,"byte_end":120977,"line_start":3526,"line_end":3526,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122037,"byte_end":122046,"line_start":3561,"line_end":3561,"column_start":8,"column_end":17},"name":"multipeek","qualname":"::Itertools::multipeek","value":"pub fn multipeek(Self) -> MultiPeek<Self> where Self: Sized","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" An iterator adaptor that allows the user to peek at multiple `.next()`\n values without advancing the base iterator.","sig":null,"attributes":[{"value":"/ An iterator adaptor that allows the user to peek at multiple `.next()`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121518,"byte_end":121592,"line_start":3546,"line_end":3546,"column_start":5,"column_end":79}},{"value":"/ values without advancing the base iterator.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121597,"byte_end":121644,"line_start":3547,"line_end":3547,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121649,"byte_end":121652,"line_start":3548,"line_end":3548,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121657,"byte_end":121671,"line_start":3549,"line_end":3549,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121676,"byte_end":121683,"line_start":3550,"line_end":3550,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121688,"byte_end":121717,"line_start":3551,"line_end":3551,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121722,"byte_end":121725,"line_start":3552,"line_end":3552,"column_start":5,"column_end":8}},{"value":"/ let mut iter = (0..10).multipeek();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121730,"byte_end":121769,"line_start":3553,"line_end":3553,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.peek(), Some(&0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121774,"byte_end":121812,"line_start":3554,"line_end":3554,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121817,"byte_end":121855,"line_start":3555,"line_end":3555,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.peek(), Some(&2));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121860,"byte_end":121898,"line_start":3556,"line_end":3556,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(0));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121903,"byte_end":121940,"line_start":3557,"line_end":3557,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(iter.peek(), Some(&1));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121945,"byte_end":121983,"line_start":3558,"line_end":3558,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":121988,"byte_end":121995,"line_start":3559,"line_end":3559,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_alloc\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122000,"byte_end":122029,"line_start":3560,"line_end":3560,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2841},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122663,"byte_end":122669,"line_start":3582,"line_end":3582,"column_start":8,"column_end":14},"name":"counts","qualname":"::Itertools::counts","value":"pub fn counts(Self) -> HashMap<Self::Item, usize> where Self: Sized,\nSelf::Item: Eq + Hash","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122160,"byte_end":122227,"line_start":3568,"line_end":3568,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122232,"byte_end":122298,"line_start":3569,"line_end":3569,"column_start":5,"column_end":71}},{"value":"/ of times it appears.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122303,"byte_end":122327,"line_start":3570,"line_end":3570,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122332,"byte_end":122335,"line_start":3571,"line_end":3571,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122340,"byte_end":122354,"line_start":3572,"line_end":3572,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122359,"byte_end":122366,"line_start":3573,"line_end":3573,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122371,"byte_end":122402,"line_start":3574,"line_end":3574,"column_start":5,"column_end":36}},{"value":"/ let counts = [1, 1, 1, 3, 3, 5].into_iter().counts();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122407,"byte_end":122464,"line_start":3575,"line_end":3575,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(counts[&1], 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122469,"byte_end":122499,"line_start":3576,"line_end":3576,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&3], 2);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122504,"byte_end":122534,"line_start":3577,"line_end":3577,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts[&5], 1);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122539,"byte_end":122569,"line_start":3578,"line_end":3578,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(counts.get(&0), None);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122574,"byte_end":122611,"line_start":3579,"line_end":3579,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122616,"byte_end":122623,"line_start":3580,"line_end":3580,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122628,"byte_end":122655,"line_start":3581,"line_end":3581,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2843},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124272,"byte_end":124281,"line_start":3625,"line_end":3625,"column_start":8,"column_end":17},"name":"counts_by","qualname":"::Itertools::counts_by","value":"pub fn counts_by<K, F>(Self, F) -> HashMap<K, usize> where Self: Sized,\nK: Eq + Hash, F: FnMut(Self::Item) -> K","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Collect the items in this iterator and return a `HashMap` which\n contains each item that appears in the iterator and the number\n of times it appears,\n determining identity using a keying function.","sig":null,"attributes":[{"value":"/ Collect the items in this iterator and return a `HashMap` which","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122910,"byte_end":122977,"line_start":3592,"line_end":3592,"column_start":5,"column_end":72}},{"value":"/ contains each item that appears in the iterator and the number","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":122982,"byte_end":123048,"line_start":3593,"line_end":3593,"column_start":5,"column_end":71}},{"value":"/ of times it appears,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123053,"byte_end":123077,"line_start":3594,"line_end":3594,"column_start":5,"column_end":29}},{"value":"/ determining identity using a keying function.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123082,"byte_end":123131,"line_start":3595,"line_end":3595,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123136,"byte_end":123139,"line_start":3596,"line_end":3596,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123144,"byte_end":123151,"line_start":3597,"line_end":3597,"column_start":5,"column_end":12}},{"value":"/ # use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123156,"byte_end":123187,"line_start":3598,"line_end":3598,"column_start":5,"column_end":36}},{"value":"/ struct Character {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123192,"byte_end":123214,"line_start":3599,"line_end":3599,"column_start":5,"column_end":27}},{"value":"/   first_name: &'static str,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123219,"byte_end":123250,"line_start":3600,"line_end":3600,"column_start":5,"column_end":36}},{"value":"/   last_name:  &'static str,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123255,"byte_end":123286,"line_start":3601,"line_end":3601,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123291,"byte_end":123296,"line_start":3602,"line_end":3602,"column_start":5,"column_end":10}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123301,"byte_end":123305,"line_start":3603,"line_end":3603,"column_start":5,"column_end":9}},{"value":"/ let characters =","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123310,"byte_end":123330,"line_start":3604,"line_end":3604,"column_start":5,"column_end":25}},{"value":"/     vec![","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123335,"byte_end":123348,"line_start":3605,"line_end":3605,"column_start":5,"column_end":18}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Pond\"      },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123353,"byte_end":123423,"line_start":3606,"line_end":3606,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Wong\"      },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123428,"byte_end":123498,"line_start":3607,"line_end":3607,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"Amy\",   last_name: \"Santiago\"  },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123503,"byte_end":123573,"line_start":3608,"line_end":3608,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Bond\"      },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123578,"byte_end":123648,"line_start":3609,"line_end":3609,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Sullivan\"  },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123653,"byte_end":123723,"line_start":3610,"line_end":3610,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Norington\" },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123728,"byte_end":123798,"line_start":3611,"line_end":3611,"column_start":5,"column_end":75}},{"value":"/         Character { first_name: \"James\", last_name: \"Kirk\"      },","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123803,"byte_end":123873,"line_start":3612,"line_end":3612,"column_start":5,"column_end":75}},{"value":"/     ];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123878,"byte_end":123888,"line_start":3613,"line_end":3613,"column_start":5,"column_end":15}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123893,"byte_end":123897,"line_start":3614,"line_end":3614,"column_start":5,"column_end":9}},{"value":"/ let first_name_frequency = ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123902,"byte_end":123933,"line_start":3615,"line_end":3615,"column_start":5,"column_end":36}},{"value":"/     characters","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123938,"byte_end":123956,"line_start":3616,"line_end":3616,"column_start":5,"column_end":23}},{"value":"/         .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123961,"byte_end":123985,"line_start":3617,"line_end":3617,"column_start":5,"column_end":29}},{"value":"/         .counts_by(|c| c.first_name);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":123990,"byte_end":124031,"line_start":3618,"line_end":3618,"column_start":5,"column_end":46}},{"value":"/     ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124036,"byte_end":124044,"line_start":3619,"line_end":3619,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(first_name_frequency[\"Amy\"], 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124049,"byte_end":124096,"line_start":3620,"line_end":3620,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(first_name_frequency[\"James\"], 4);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124101,"byte_end":124150,"line_start":3621,"line_end":3621,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(first_name_frequency.contains_key(\"Asha\"), false);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124155,"byte_end":124220,"line_start":3622,"line_end":3622,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124225,"byte_end":124232,"line_start":3623,"line_end":3623,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"use_std\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124237,"byte_end":124264,"line_start":3624,"line_end":3624,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125105,"byte_end":125115,"line_start":3654,"line_end":3654,"column_start":8,"column_end":18},"name":"multiunzip","qualname":"::Itertools::multiunzip","value":"pub fn multiunzip<FromI>(Self) -> FromI where Self: Sized + MultiUnzip<FromI>","parent":{"krate":0,"index":2514},"children":[],"decl_id":null,"docs":" Converts an iterator of tuples into a tuple of containers.","sig":null,"attributes":[{"value":"/ Converts an iterator of tuples into a tuple of containers.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124455,"byte_end":124517,"line_start":3634,"line_end":3634,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124522,"byte_end":124525,"line_start":3635,"line_end":3635,"column_start":5,"column_end":8}},{"value":"/ `unzip()` consumes an entire iterator of n-ary tuples, producing `n` collections, one for each","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124530,"byte_end":124628,"line_start":3636,"line_end":3636,"column_start":5,"column_end":103}},{"value":"/ column.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124633,"byte_end":124644,"line_start":3637,"line_end":3637,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124649,"byte_end":124652,"line_start":3638,"line_end":3638,"column_start":5,"column_end":8}},{"value":"/ This function is, in some sense, the opposite of [`multizip`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124657,"byte_end":124723,"line_start":3639,"line_end":3639,"column_start":5,"column_end":71}},{"value":"/ ","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124728,"byte_end":124732,"line_start":3640,"line_end":3640,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124737,"byte_end":124744,"line_start":3641,"line_end":3641,"column_start":5,"column_end":12}},{"value":"/ use itertools::Itertools;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124749,"byte_end":124778,"line_start":3642,"line_end":3642,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124783,"byte_end":124786,"line_start":3643,"line_end":3643,"column_start":5,"column_end":8}},{"value":"/ let inputs = vec![(1, 2, 3), (4, 5, 6), (7, 8, 9)];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124791,"byte_end":124846,"line_start":3644,"line_end":3644,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124851,"byte_end":124854,"line_start":3645,"line_end":3645,"column_start":5,"column_end":8}},{"value":"/ let (a, b, c): (Vec<_>, Vec<_>, Vec<_>) = inputs","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124859,"byte_end":124911,"line_start":3646,"line_end":3646,"column_start":5,"column_end":57}},{"value":"/     .into_iter()","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124916,"byte_end":124936,"line_start":3647,"line_end":3647,"column_start":5,"column_end":25}},{"value":"/     .multiunzip();","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124941,"byte_end":124963,"line_start":3648,"line_end":3648,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124968,"byte_end":124971,"line_start":3649,"line_end":3649,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a, vec![1, 4, 7]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":124976,"byte_end":125009,"line_start":3650,"line_end":3650,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(b, vec![2, 5, 8]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125014,"byte_end":125047,"line_start":3651,"line_end":3651,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(c, vec![3, 6, 9]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125052,"byte_end":125085,"line_start":3652,"line_end":3652,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125090,"byte_end":125097,"line_start":3653,"line_end":3653,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":2850},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125637,"byte_end":125642,"line_start":3674,"line_end":3674,"column_start":8,"column_end":13},"name":"equal","qualname":"::equal","value":"pub fn equal<I, J>(I, J) -> bool where I: IntoIterator, J: IntoIterator,\nI::Item: PartialEq<J::Item>","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if both iterables produce equal sequences\n (elements pairwise equal and sequences of the same length),\n `false` otherwise.","sig":null,"attributes":[{"value":"/ Return `true` if both iterables produce equal sequences","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125296,"byte_end":125355,"line_start":3664,"line_end":3664,"column_start":1,"column_end":60}},{"value":"/ (elements pairwise equal and sequences of the same length),","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125356,"byte_end":125419,"line_start":3665,"line_end":3665,"column_start":1,"column_end":64}},{"value":"/ `false` otherwise.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125420,"byte_end":125442,"line_start":3666,"line_end":3666,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125443,"byte_end":125446,"line_start":3667,"line_end":3667,"column_start":1,"column_end":4}},{"value":"/ [`IntoIterator`] enabled version of [`Iterator::eq`].","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125447,"byte_end":125504,"line_start":3668,"line_end":3668,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125505,"byte_end":125508,"line_start":3669,"line_end":3669,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125509,"byte_end":125516,"line_start":3670,"line_end":3670,"column_start":1,"column_end":8}},{"value":"/ assert!(itertools::equal(vec![1, 2, 3], 1..4));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125517,"byte_end":125568,"line_start":3671,"line_end":3671,"column_start":1,"column_end":52}},{"value":"/ assert!(!itertools::equal(&[0, 0], &[0, 0, 0]));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125569,"byte_end":125621,"line_start":3672,"line_end":3672,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125622,"byte_end":125629,"line_start":3673,"line_end":3673,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126181,"byte_end":126193,"line_start":3692,"line_end":3692,"column_start":8,"column_end":20},"name":"assert_equal","qualname":"::assert_equal","value":"pub fn assert_equal<I, J>(I, J) where I: IntoIterator, J: IntoIterator,\nI::Item: fmt::Debug + PartialEq<J::Item>, J::Item: fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Assert that two iterables produce equal sequences, with the same\n semantics as [`equal(a, b)`](equal).","sig":null,"attributes":[{"value":"/ Assert that two iterables produce equal sequences, with the same","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125790,"byte_end":125858,"line_start":3682,"line_end":3682,"column_start":1,"column_end":69}},{"value":"/ semantics as [`equal(a, b)`](equal).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125859,"byte_end":125899,"line_start":3683,"line_end":3683,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125900,"byte_end":125903,"line_start":3684,"line_end":3684,"column_start":1,"column_end":4}},{"value":"/ **Panics** on assertion failure with a message that shows the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125904,"byte_end":125969,"line_start":3685,"line_end":3685,"column_start":1,"column_end":66}},{"value":"/ two iteration elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125970,"byte_end":125997,"line_start":3686,"line_end":3686,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125998,"byte_end":126001,"line_start":3687,"line_end":3687,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126002,"byte_end":126015,"line_start":3688,"line_end":3688,"column_start":1,"column_end":14}},{"value":"/ assert_equal(\"exceed\".split('c'), \"excess\".split('c'));","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126016,"byte_end":126075,"line_start":3689,"line_end":3689,"column_start":1,"column_end":60}},{"value":"/ // ^PANIC: panicked at 'Failed assertion Some(\"eed\") == Some(\"ess\") for iteration 1',","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126076,"byte_end":126165,"line_start":3690,"line_end":3690,"column_start":1,"column_end":90}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126166,"byte_end":126173,"line_start":3691,"line_end":3691,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2856},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127420,"byte_end":127429,"line_start":3734,"line_end":3734,"column_start":8,"column_end":17},"name":"partition","qualname":"::partition","value":"pub fn partition<'a, A: 'a, I, F>(I, F) -> usize where I: IntoIterator<Item =\n&'a mut A>, I::IntoIter: DoubleEndedIterator, F: FnMut(&A) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Partition a sequence using predicate `pred` so that elements\n that map to `true` are placed before elements which map to `false`.","sig":null,"attributes":[{"value":"/ Partition a sequence using predicate `pred` so that elements","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126881,"byte_end":126945,"line_start":3717,"line_end":3717,"column_start":1,"column_end":65}},{"value":"/ that map to `true` are placed before elements which map to `false`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":126946,"byte_end":127017,"line_start":3718,"line_end":3718,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127018,"byte_end":127021,"line_start":3719,"line_end":3719,"column_start":1,"column_end":4}},{"value":"/ The order within the partitions is arbitrary.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127022,"byte_end":127071,"line_start":3720,"line_end":3720,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127072,"byte_end":127075,"line_start":3721,"line_end":3721,"column_start":1,"column_end":4}},{"value":"/ Return the index of the split point.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127076,"byte_end":127116,"line_start":3722,"line_end":3722,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127117,"byte_end":127120,"line_start":3723,"line_end":3723,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127121,"byte_end":127128,"line_start":3724,"line_end":3724,"column_start":1,"column_end":8}},{"value":"/ use itertools::partition;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127129,"byte_end":127158,"line_start":3725,"line_end":3725,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127159,"byte_end":127162,"line_start":3726,"line_end":3726,"column_start":1,"column_end":4}},{"value":"/ # // use repeated numbers to not promise any ordering","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127163,"byte_end":127220,"line_start":3727,"line_end":3727,"column_start":1,"column_end":58}},{"value":"/ let mut data = [7, 1, 1, 7, 1, 1, 7];","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127221,"byte_end":127262,"line_start":3728,"line_end":3728,"column_start":1,"column_end":42}},{"value":"/ let split_index = partition(&mut data, |elt| *elt >= 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127263,"byte_end":127323,"line_start":3729,"line_end":3729,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127324,"byte_end":127327,"line_start":3730,"line_end":3730,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data, [7, 7, 7, 1, 1, 1, 1]);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127328,"byte_end":127372,"line_start":3731,"line_end":3731,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(split_index, 3);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127373,"byte_end":127404,"line_start":3732,"line_end":3732,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":127405,"byte_end":127412,"line_start":3733,"line_end":3733,"column_start":1,"column_end":8}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128345,"byte_end":128353,"line_start":3764,"line_end":3764,"column_start":5,"column_end":13},"name":"Continue","qualname":"::FoldWhile::Continue","value":"FoldWhile::Continue(T)","parent":{"krate":0,"index":5096},"children":[],"decl_id":null,"docs":" Continue folding with this value\n","sig":null,"attributes":[{"value":"/ Continue folding with this value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128304,"byte_end":128340,"line_start":3763,"line_end":3763,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5101},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128414,"byte_end":128418,"line_start":3766,"line_end":3766,"column_start":5,"column_end":9},"name":"Done","qualname":"::FoldWhile::Done","value":"FoldWhile::Done(T)","parent":{"krate":0,"index":5096},"children":[],"decl_id":null,"docs":" Fold is complete and will return this value\n","sig":null,"attributes":[{"value":"/ Fold is complete and will return this value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128362,"byte_end":128409,"line_start":3765,"line_end":3765,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":5096},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128285,"byte_end":128294,"line_start":3762,"line_end":3762,"column_start":10,"column_end":19},"name":"FoldWhile","qualname":"::FoldWhile","value":"pub enum FoldWhile<T> { Continue(T), Done(T), }","parent":null,"children":[{"krate":0,"index":5098},{"krate":0,"index":5101}],"decl_id":null,"docs":" An enum used for controlling the execution of `fold_while`.","sig":null,"attributes":[{"value":"/ An enum used for controlling the execution of `fold_while`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128092,"byte_end":128155,"line_start":3758,"line_end":3758,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128156,"byte_end":128159,"line_start":3759,"line_end":3759,"column_start":1,"column_end":4}},{"value":"/ See [`.fold_while()`](Itertools::fold_while) for more information.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128160,"byte_end":128230,"line_start":3760,"line_end":3760,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2863},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128510,"byte_end":128520,"line_start":3771,"line_end":3771,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<FoldWhile<T>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Return the value in the continue or done.\n","sig":null,"attributes":[{"value":"/ Return the value in the continue or done.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128453,"byte_end":128498,"line_start":3770,"line_end":3770,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2864},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128713,"byte_end":128720,"line_start":3778,"line_end":3778,"column_start":12,"column_end":19},"name":"is_done","qualname":"<FoldWhile<T>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if `self` is `Done`, false if it is `Continue`.\n","sig":null,"attributes":[{"value":"/ Return true if `self` is `Done`, false if it is `Continue`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128638,"byte_end":128701,"line_start":3777,"line_end":3777,"column_start":5,"column_end":68}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160606,"byte_end":160616,"line_start":16,"line_end":16,"column_start":46,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160717,"byte_end":160727,"line_start":23,"line_end":23,"column_start":30,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160979,"byte_end":160989,"line_start":35,"line_end":35,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162505,"byte_end":162515,"line_start":85,"line_end":85,"column_start":74,"column_end":84},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162789,"byte_end":162790,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163545,"byte_end":163567,"line_start":121,"line_end":121,"column_start":25,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2874}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163812,"byte_end":163834,"line_start":130,"line_end":130,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164153,"byte_end":164160,"line_start":146,"line_end":146,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164296,"byte_end":164297,"line_start":152,"line_end":152,"column_start":57,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165519,"byte_end":165550,"line_start":194,"line_end":194,"column_start":50,"column_end":81},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166952,"byte_end":166966,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":167683,"byte_end":167697,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":167922,"byte_end":167936,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168407,"byte_end":168425,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168664,"byte_end":168682,"line_start":87,"line_end":87,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2911}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169235,"byte_end":169255,"line_start":108,"line_end":108,"column_start":45,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":170196,"byte_end":170208,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2929}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":171260,"byte_end":171272,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":173363,"byte_end":173379,"line_start":127,"line_end":127,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":174027,"byte_end":174039,"line_start":156,"line_end":156,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131106,"byte_end":131116,"line_start":50,"line_end":50,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131736,"byte_end":131746,"line_start":76,"line_end":76,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":132628,"byte_end":132646,"line_start":111,"line_end":111,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134183,"byte_end":134201,"line_start":163,"line_end":163,"column_start":30,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134766,"byte_end":134773,"line_start":190,"line_end":190,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135393,"byte_end":135400,"line_start":215,"line_end":215,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137776,"byte_end":137783,"line_start":309,"line_end":309,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":631},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139630,"byte_end":139637,"line_start":367,"line_end":367,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140241,"byte_end":140249,"line_start":386,"line_end":386,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3010}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140468,"byte_end":140476,"line_start":395,"line_end":395,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":141500,"byte_end":141504,"line_start":437,"line_end":437,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142126,"byte_end":142130,"line_start":465,"line_end":465,"column_start":31,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142342,"byte_end":142350,"line_start":476,"line_end":476,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143816,"byte_end":143823,"line_start":526,"line_end":526,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3027}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144039,"byte_end":144040,"line_start":533,"line_end":533,"column_start":55,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144511,"byte_end":144518,"line_start":553,"line_end":553,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3028}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144738,"byte_end":144745,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":145782,"byte_end":145789,"line_start":599,"line_end":599,"column_start":33,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146312,"byte_end":146324,"line_start":615,"line_end":615,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3029}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146652,"byte_end":146664,"line_start":628,"line_end":628,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147723,"byte_end":147732,"line_start":669,"line_end":669,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148973,"byte_end":148990,"line_start":717,"line_end":717,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149184,"byte_end":149201,"line_start":728,"line_end":728,"column_start":30,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149366,"byte_end":149383,"line_start":738,"line_end":738,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":753}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149495,"byte_end":149512,"line_start":744,"line_end":744,"column_start":32,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152979,"byte_end":152987,"line_start":844,"line_end":844,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3378}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":153320,"byte_end":153328,"line_start":862,"line_end":862,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":783}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154433,"byte_end":154441,"line_start":905,"line_end":905,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154878,"byte_end":154889,"line_start":919,"line_end":919,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3379}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":155449,"byte_end":155460,"line_start":945,"line_end":945,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":821}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156579,"byte_end":156590,"line_start":988,"line_end":988,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157043,"byte_end":157052,"line_start":1004,"line_end":1004,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3390}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157385,"byte_end":157394,"line_start":1023,"line_end":1023,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157883,"byte_end":157892,"line_start":1045,"line_end":1045,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158258,"byte_end":158267,"line_start":1059,"line_end":1059,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158675,"byte_end":158681,"line_start":1074,"line_end":1074,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3400}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158945,"byte_end":158951,"line_start":1090,"line_end":1090,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":159817,"byte_end":159823,"line_start":1126,"line_end":1126,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":159929,"byte_end":159935,"line_start":1132,"line_end":1132,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":160243,"byte_end":160249,"line_start":1147,"line_end":1147,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176410,"byte_end":176422,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183736,"byte_end":183748,"line_start":232,"line_end":232,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":184111,"byte_end":184123,"line_start":246,"line_end":246,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193972,"byte_end":193982,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3740}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194776,"byte_end":194788,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194918,"byte_end":194930,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3742}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195388,"byte_end":195400,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":196653,"byte_end":196665,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":198011,"byte_end":198023,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198604,"byte_end":198631,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3751}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198776,"byte_end":198803,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":199472,"byte_end":199499,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":201097,"byte_end":201124,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201959,"byte_end":201974,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1133},{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":202399,"byte_end":202414,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203056,"byte_end":203071,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203126,"byte_end":203141,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203505,"byte_end":203520,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1148}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":204194,"byte_end":204209,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207676,"byte_end":207685,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":209779,"byte_end":209788,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211235,"byte_end":211244,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3760}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211435,"byte_end":211444,"line_start":144,"line_end":144,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211944,"byte_end":211953,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214880,"byte_end":214890,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1263}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":215651,"byte_end":215657,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217156,"byte_end":217170,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1300}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217305,"byte_end":217319,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218349,"byte_end":218360,"line_start":55,"line_end":55,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1324},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1337},{"krate":0,"index":1340},{"krate":0,"index":1344},{"krate":0,"index":1346},{"krate":0,"index":1349},{"krate":0,"index":1353},{"krate":0,"index":1355},{"krate":0,"index":1358},{"krate":0,"index":1362},{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238029,"byte_end":238030,"line_start":10,"line_end":10,"column_start":42,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238339,"byte_end":238349,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1413}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238535,"byte_end":238545,"line_start":40,"line_end":40,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":239587,"byte_end":239597,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246375,"byte_end":246385,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1451}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":248186,"byte_end":248193,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1466},{"krate":0,"index":1467}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249388,"byte_end":249394,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250297,"byte_end":250302,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1503}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250473,"byte_end":250478,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1509},{"krate":0,"index":1510}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252299,"byte_end":252309,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253283,"byte_end":253289,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":254041,"byte_end":254046,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":254205,"byte_end":254210,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1550},{"krate":0,"index":1551}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254742,"byte_end":254766,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1568}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255449,"byte_end":255450,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":256346,"byte_end":256361,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":257522,"byte_end":257537,"line_start":115,"line_end":115,"column_start":34,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":258835,"byte_end":258843,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":259739,"byte_end":259747,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3877}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261687,"byte_end":261697,"line_start":116,"line_end":116,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261832,"byte_end":261833,"line_start":122,"line_end":122,"column_start":56,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262932,"byte_end":262940,"line_start":163,"line_end":163,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3884}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263782,"byte_end":263790,"line_start":187,"line_end":187,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3885}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263939,"byte_end":263947,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":264794,"byte_end":264802,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lazy_buffer.rs","byte_start":265046,"byte_end":265056,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lazy_buffer.rs","byte_start":265907,"byte_end":265917,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267260,"byte_end":267271,"line_start":36,"line_end":36,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":3897}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267491,"byte_end":267502,"line_start":46,"line_end":46,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3898}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267727,"byte_end":267738,"line_start":55,"line_end":55,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272428,"byte_end":272440,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1748}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276567,"byte_end":276576,"line_start":32,"line_end":32,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276729,"byte_end":276738,"line_start":41,"line_end":41,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1774}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":277448,"byte_end":277457,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":277892,"byte_end":277901,"line_start":81,"line_end":81,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1784}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":278264,"byte_end":278273,"line_start":97,"line_end":97,"column_start":31,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278832,"byte_end":278840,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3946}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":279224,"byte_end":279232,"line_start":39,"line_end":39,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1807},{"krate":0,"index":1808},{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":279998,"byte_end":280006,"line_start":70,"line_end":70,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":280466,"byte_end":280474,"line_start":87,"line_end":87,"column_start":34,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":280584,"byte_end":280592,"line_start":93,"line_end":93,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281508,"byte_end":281515,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1837},{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282701,"byte_end":282708,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":283035,"byte_end":283042,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":283101,"byte_end":283108,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284160,"byte_end":284168,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1867}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284488,"byte_end":284495,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284914,"byte_end":284922,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285676,"byte_end":285692,"line_start":86,"line_end":86,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":3957}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":286016,"byte_end":286032,"line_start":103,"line_end":103,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1896}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288353,"byte_end":288365,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4003}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288940,"byte_end":288952,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":4030}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":289818,"byte_end":289830,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1935}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":292482,"byte_end":292494,"line_start":167,"line_end":167,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":293706,"byte_end":293719,"line_start":205,"line_end":205,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296523,"byte_end":296531,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4031}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296651,"byte_end":296659,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4032}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":297025,"byte_end":297033,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":298280,"byte_end":298288,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298768,"byte_end":298782,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301944,"byte_end":301952,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2025}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302454,"byte_end":302462,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2031}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304436,"byte_end":304442,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4060}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304502,"byte_end":304508,"line_start":57,"line_end":57,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":305052,"byte_end":305058,"line_start":75,"line_end":75,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2058}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":305504,"byte_end":305510,"line_start":97,"line_end":97,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306144,"byte_end":306151,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306541,"byte_end":306548,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2081}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306698,"byte_end":306705,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306758,"byte_end":306765,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310114,"byte_end":310124,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4077}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310965,"byte_end":310975,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312638,"byte_end":312644,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4078}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313027,"byte_end":313033,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2138},{"krate":0,"index":2139}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313568,"byte_end":313575,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4097}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313678,"byte_end":313685,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":315381,"byte_end":315384,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":316484,"byte_end":316487,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317130,"byte_end":317131,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317393,"byte_end":317404,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317576,"byte_end":317587,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318265,"byte_end":318276,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318948,"byte_end":318954,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319179,"byte_end":319185,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":320786,"byte_end":320798,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2226},{"krate":0,"index":2227}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321342,"byte_end":321354,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322457,"byte_end":322477,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2237},{"krate":0,"index":2238}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":325841,"byte_end":325853,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4351}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":326054,"byte_end":326066,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2273}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":326530,"byte_end":326534,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2277}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":327412,"byte_end":327424,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2286}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":328661,"byte_end":328673,"line_start":105,"line_end":105,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329319,"byte_end":329323,"line_start":127,"line_end":127,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2301},{"krate":0,"index":2302}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329613,"byte_end":329617,"line_start":137,"line_end":137,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4366}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329701,"byte_end":329705,"line_start":140,"line_end":140,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2313},{"krate":0,"index":2314}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330314,"byte_end":330322,"line_start":161,"line_end":161,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330605,"byte_end":330614,"line_start":175,"line_end":175,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":332392,"byte_end":332400,"line_start":21,"line_end":21,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4396}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":333189,"byte_end":333197,"line_start":52,"line_end":52,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2379}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":333934,"byte_end":333942,"line_start":81,"line_end":81,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2385}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":334349,"byte_end":334357,"line_start":97,"line_end":97,"column_start":33,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":334478,"byte_end":334484,"line_start":103,"line_end":103,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335215,"byte_end":335221,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2398}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335662,"byte_end":335668,"line_start":147,"line_end":147,"column_start":27,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":336059,"byte_end":336065,"line_start":161,"line_end":161,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4403}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340418,"byte_end":340430,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4612}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341243,"byte_end":341251,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2434}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341530,"byte_end":341542,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":342778,"byte_end":342790,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":342867,"byte_end":342879,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343788,"byte_end":343793,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":344371,"byte_end":344376,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":345308,"byte_end":345318,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2490},{"krate":0,"index":2491},{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":345940,"byte_end":345950,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2496}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":346771,"byte_end":346781,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":346884,"byte_end":346894,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125271,"byte_end":125272,"line_start":3662,"line_end":3662,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128434,"byte_end":128443,"line_start":3769,"line_end":3769,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2864}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":5588,"byte_end":5592,"line_start":188,"line_end":188,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":930}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160606,"byte_end":160616,"line_start":16,"line_end":16,"column_start":46,"column_end":56},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160717,"byte_end":160727,"line_start":23,"line_end":23,"column_start":30,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":160979,"byte_end":160989,"line_start":35,"line_end":35,"column_start":28,"column_end":38},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162505,"byte_end":162515,"line_start":85,"line_end":85,"column_start":74,"column_end":84},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":343},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":162789,"byte_end":162790,"line_start":92,"line_end":92,"column_start":49,"column_end":50},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":383},"to":{"krate":0,"index":358}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163545,"byte_end":163567,"line_start":121,"line_end":121,"column_start":25,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2867},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":163812,"byte_end":163834,"line_start":130,"line_end":130,"column_start":41,"column_end":63},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2867},"to":{"krate":0,"index":358}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164153,"byte_end":164160,"line_start":146,"line_end":146,"column_start":42,"column_end":49},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2875},"to":{"krate":0,"index":395}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":164296,"byte_end":164297,"line_start":152,"line_end":152,"column_start":57,"column_end":58},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":407},"to":{"krate":0,"index":395}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/coalesce.rs","byte_start":165519,"byte_end":165550,"line_start":194,"line_end":194,"column_start":50,"column_end":81},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2881},"to":{"krate":0,"index":358}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":166952,"byte_end":166966,"line_start":16,"line_end":16,"column_start":25,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2891},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":167683,"byte_end":167697,"line_start":48,"line_end":48,"column_start":36,"column_end":50},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2891},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":167922,"byte_end":167936,"line_start":58,"line_end":58,"column_start":34,"column_end":48},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2891},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168407,"byte_end":168425,"line_start":74,"line_end":74,"column_start":53,"column_end":71},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2904},"to":{"krate":0,"index":438}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":168664,"byte_end":168682,"line_start":87,"line_end":87,"column_start":29,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2904},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/map.rs","byte_start":169235,"byte_end":169255,"line_start":108,"line_end":108,"column_start":45,"column_end":65},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2912},"to":{"krate":0,"index":438}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":170196,"byte_end":170208,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2922},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":171260,"byte_end":171272,"line_start":60,"line_end":60,"column_start":9,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2922},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":173363,"byte_end":173379,"line_start":127,"line_end":127,"column_start":9,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/multi_product.rs","byte_start":174027,"byte_end":174039,"line_start":156,"line_end":156,"column_start":22,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2922},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131106,"byte_end":131116,"line_start":50,"line_end":50,"column_start":25,"column_end":35},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2948},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":131736,"byte_end":131746,"line_start":76,"line_end":76,"column_start":30,"column_end":40},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2948},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":132628,"byte_end":132646,"line_start":111,"line_end":111,"column_start":25,"column_end":43},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":2962},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134183,"byte_end":134201,"line_start":163,"line_end":163,"column_start":30,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2962},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":134766,"byte_end":134773,"line_start":190,"line_end":190,"column_start":9,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2976},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":135393,"byte_end":135400,"line_start":215,"line_end":215,"column_start":22,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2976},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":137776,"byte_end":137783,"line_start":309,"line_end":309,"column_start":25,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2986},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":139630,"byte_end":139637,"line_start":367,"line_end":367,"column_start":30,"column_end":37},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2986},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140241,"byte_end":140249,"line_start":386,"line_end":386,"column_start":27,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":3001},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":140468,"byte_end":140476,"line_start":395,"line_end":395,"column_start":28,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":3001},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":141500,"byte_end":141504,"line_start":437,"line_end":437,"column_start":22,"column_end":26},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":3011},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142126,"byte_end":142130,"line_start":465,"line_end":465,"column_start":31,"column_end":35},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":3011},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":142342,"byte_end":142350,"line_start":476,"line_end":476,"column_start":43,"column_end":51},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":3021},"to":{"krate":0,"index":662}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":143816,"byte_end":143823,"line_start":526,"line_end":526,"column_start":30,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":674},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144039,"byte_end":144040,"line_start":533,"line_end":533,"column_start":55,"column_end":56},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":688},"to":{"krate":0,"index":662}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144511,"byte_end":144518,"line_start":553,"line_end":553,"column_start":25,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":674},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":144738,"byte_end":144745,"line_start":563,"line_end":563,"column_start":28,"column_end":35},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":674},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":145782,"byte_end":145789,"line_start":599,"line_end":599,"column_start":33,"column_end":40},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":674},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146312,"byte_end":146324,"line_start":615,"line_end":615,"column_start":31,"column_end":43},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":709},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":146652,"byte_end":146664,"line_start":628,"line_end":628,"column_start":29,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":709},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":147723,"byte_end":147732,"line_start":669,"line_end":669,"column_start":25,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":3030},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148560,"byte_end":148565,"line_start":701,"line_end":701,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":737}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":148973,"byte_end":148990,"line_start":717,"line_end":717,"column_start":25,"column_end":42},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":3039},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149184,"byte_end":149201,"line_start":728,"line_end":728,"column_start":30,"column_end":47},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":3039},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149366,"byte_end":149383,"line_start":738,"line_end":738,"column_start":21,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3052},"to":{"krate":2,"index":2930}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":149495,"byte_end":149512,"line_start":744,"line_end":744,"column_start":32,"column_end":49},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3052},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":152979,"byte_end":152987,"line_start":844,"line_end":844,"column_start":27,"column_end":35},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3369},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":153320,"byte_end":153328,"line_start":862,"line_end":862,"column_start":31,"column_end":39},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3369},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154433,"byte_end":154441,"line_start":905,"line_end":905,"column_start":36,"column_end":44},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3369},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":154878,"byte_end":154889,"line_start":919,"line_end":919,"column_start":27,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":791},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":155449,"byte_end":155460,"line_start":945,"line_end":945,"column_start":34,"column_end":45},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":791},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":156579,"byte_end":156590,"line_start":988,"line_end":988,"column_start":39,"column_end":50},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":791},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157043,"byte_end":157052,"line_start":1004,"line_end":1004,"column_start":27,"column_end":36},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3380},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157385,"byte_end":157394,"line_start":1023,"line_end":1023,"column_start":25,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3380},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":157883,"byte_end":157892,"line_start":1045,"line_end":1045,"column_start":36,"column_end":45},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3380},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158258,"byte_end":158267,"line_start":1059,"line_end":1059,"column_start":30,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":3380},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158675,"byte_end":158681,"line_start":1074,"line_end":1074,"column_start":27,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":3391},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":158945,"byte_end":158951,"line_start":1090,"line_end":1090,"column_start":25,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":3391},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":159817,"byte_end":159823,"line_start":1126,"line_end":1126,"column_start":34,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3391},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":159929,"byte_end":159935,"line_start":1132,"line_end":1132,"column_start":36,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3391},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/adaptors/mod.rs","byte_start":160243,"byte_end":160249,"line_start":1147,"line_end":1147,"column_start":30,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3391},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":176410,"byte_end":176422,"line_start":16,"line_end":16,"column_start":12,"column_end":24},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":183736,"byte_end":183748,"line_start":232,"line_end":232,"column_start":9,"column_end":21},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/either_or_both.rs","byte_start":184111,"byte_end":184123,"line_start":246,"line_end":246,"column_start":43,"column_end":55},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3401},"to":{"krate":2,"index":2927}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/cons_tuples_impl.rs","byte_start":193972,"byte_end":193982,"line_start":52,"line_end":52,"column_start":22,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3732},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194776,"byte_end":194788,"line_start":17,"line_end":17,"column_start":19,"column_end":31},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":194918,"byte_end":194930,"line_start":24,"line_end":24,"column_start":24,"column_end":36},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":195388,"byte_end":195400,"line_start":45,"line_end":45,"column_start":19,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1054},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":196653,"byte_end":196665,"line_start":82,"line_end":82,"column_start":22,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations.rs","byte_start":198011,"byte_end":198023,"line_start":125,"line_end":125,"column_start":27,"column_end":39},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1054},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198604,"byte_end":198631,"line_start":22,"line_end":22,"column_start":24,"column_end":51},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3743},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":198776,"byte_end":198803,"line_start":30,"line_end":30,"column_start":9,"column_end":36},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":199472,"byte_end":199499,"line_start":57,"line_end":57,"column_start":22,"column_end":49},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3743},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/combinations_with_replacement.rs","byte_start":201097,"byte_end":201124,"line_start":105,"line_end":105,"column_start":27,"column_end":54},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3743},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":201959,"byte_end":201974,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":202399,"byte_end":202414,"line_start":46,"line_end":46,"column_start":22,"column_end":37},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3752},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203056,"byte_end":203071,"line_start":73,"line_end":73,"column_start":31,"column_end":46},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3752},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203126,"byte_end":203141,"line_start":75,"line_end":75,"column_start":21,"column_end":36},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3752},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":203505,"byte_end":203520,"line_start":88,"line_end":88,"column_start":19,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3752},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/exactly_one_err.rs","byte_start":204194,"byte_end":204209,"line_start":108,"line_end":108,"column_start":19,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3752},"to":{"krate":1,"index":2452}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":207676,"byte_end":207685,"line_start":34,"line_end":34,"column_start":28,"column_end":37},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":209779,"byte_end":209788,"line_start":94,"line_end":94,"column_start":39,"column_end":48},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211235,"byte_end":211244,"line_start":135,"line_end":135,"column_start":25,"column_end":34},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211435,"byte_end":211444,"line_start":144,"line_end":144,"column_start":30,"column_end":39},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/flatten_ok.rs","byte_start":211944,"byte_end":211953,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1198},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":214880,"byte_end":214890,"line_start":50,"line_end":50,"column_start":33,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3761},"to":{"krate":2,"index":9611}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/format.rs","byte_start":215651,"byte_end":215657,"line_start":73,"line_end":73,"column_start":13,"column_end":19},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":3772},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217156,"byte_end":217170,"line_start":14,"line_end":14,"column_start":12,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3817},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":217305,"byte_end":217319,"line_start":20,"line_end":20,"column_start":31,"column_end":45},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3817},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/grouping_map.rs","byte_start":218349,"byte_end":218360,"line_start":55,"line_end":55,"column_start":15,"column_end":26},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3831},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238029,"byte_end":238030,"line_start":10,"line_end":10,"column_start":42,"column_end":43},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1409},"to":{"krate":0,"index":1402}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238339,"byte_end":238349,"line_start":29,"line_end":29,"column_start":6,"column_end":16},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":238535,"byte_end":238545,"line_start":40,"line_end":40,"column_start":28,"column_end":38},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3840},"to":{"krate":0,"index":1402}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":239587,"byte_end":239597,"line_start":77,"line_end":77,"column_start":15,"column_end":25},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":246375,"byte_end":246385,"line_start":263,"line_end":263,"column_start":15,"column_end":25},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":248186,"byte_end":248193,"line_start":320,"line_end":320,"column_start":15,"column_end":22},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":249388,"byte_end":249394,"line_start":366,"line_end":366,"column_start":32,"column_end":38},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1476},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250297,"byte_end":250302,"line_start":402,"line_end":402,"column_start":28,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":250473,"byte_end":250478,"line_start":411,"line_end":411,"column_start":32,"column_end":37},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1490},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":252299,"byte_end":252309,"line_start":475,"line_end":475,"column_start":9,"column_end":19},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":253283,"byte_end":253289,"line_start":517,"line_end":517,"column_start":26,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1527},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":254041,"byte_end":254046,"line_start":550,"line_end":550,"column_start":22,"column_end":27},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":3266}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/groupbylazy.rs","byte_start":254205,"byte_end":254210,"line_start":559,"line_end":559,"column_start":26,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1537},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":254742,"byte_end":254766,"line_start":11,"line_end":11,"column_start":48,"column_end":72},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":3846},"to":{"krate":0,"index":1563}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":255449,"byte_end":255450,"line_start":34,"line_end":34,"column_start":59,"column_end":60},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1575},"to":{"krate":0,"index":1563}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":256346,"byte_end":256361,"line_start":70,"line_end":70,"column_start":29,"column_end":44},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":3856},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/intersperse.rs","byte_start":257522,"byte_end":257537,"line_start":115,"line_end":115,"column_start":34,"column_end":49},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":3856},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":258835,"byte_end":258843,"line_start":24,"line_end":24,"column_start":9,"column_end":17},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":259739,"byte_end":259747,"line_start":55,"line_end":55,"column_start":19,"column_end":27},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3870},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261687,"byte_end":261697,"line_start":116,"line_end":116,"column_start":44,"column_end":54},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3878},"to":{"krate":0,"index":1639}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":261832,"byte_end":261833,"line_start":122,"line_end":122,"column_start":56,"column_end":57},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1647},"to":{"krate":0,"index":1639}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":262932,"byte_end":262940,"line_start":163,"line_end":163,"column_start":27,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1651},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263782,"byte_end":263790,"line_start":187,"line_end":187,"column_start":22,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1651},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":263939,"byte_end":263947,"line_start":195,"line_end":195,"column_start":25,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1651},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/kmerge_impl.rs","byte_start":264794,"byte_end":264802,"line_start":224,"line_end":224,"column_start":30,"column_end":38},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1651},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lazy_buffer.rs","byte_start":265046,"byte_end":265056,"line_start":11,"line_end":11,"column_start":9,"column_end":19},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3886},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lazy_buffer.rs","byte_start":265907,"byte_end":265917,"line_start":52,"line_end":52,"column_start":25,"column_end":35},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":3886},"to":{"krate":2,"index":3327}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267260,"byte_end":267271,"line_start":36,"line_end":36,"column_start":25,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1720},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267491,"byte_end":267502,"line_start":46,"line_end":46,"column_start":30,"column_end":41},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1720},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/merge_join.rs","byte_start":267727,"byte_end":267738,"line_start":55,"line_end":55,"column_start":28,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1720},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/minmax.rs","byte_start":272428,"byte_end":272440,"line_start":18,"line_end":18,"column_start":16,"column_end":28},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3899},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276567,"byte_end":276576,"line_start":32,"line_end":32,"column_start":9,"column_end":18},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":3924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":276729,"byte_end":276738,"line_start":41,"line_end":41,"column_start":19,"column_end":28},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":3924},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":277448,"byte_end":277457,"line_start":64,"line_end":64,"column_start":25,"column_end":34},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":3924},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":277892,"byte_end":277901,"line_start":81,"line_end":81,"column_start":22,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3924},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/multipeek_impl.rs","byte_start":278264,"byte_end":278273,"line_start":97,"line_end":97,"column_start":31,"column_end":40},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3924},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":278832,"byte_end":278840,"line_start":19,"line_end":19,"column_start":32,"column_end":40},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":279224,"byte_end":279232,"line_start":39,"line_end":39,"column_start":25,"column_end":33},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":279998,"byte_end":280006,"line_start":70,"line_end":70,"column_start":36,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":280466,"byte_end":280474,"line_start":87,"line_end":87,"column_start":34,"column_end":42},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/pad_tail.rs","byte_start":280584,"byte_end":280592,"line_start":93,"line_end":93,"column_start":30,"column_end":38},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3935},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":281508,"byte_end":281515,"line_start":33,"line_end":33,"column_start":9,"column_end":16},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":282701,"byte_end":282708,"line_start":74,"line_end":74,"column_start":22,"column_end":29},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3947},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":283035,"byte_end":283042,"line_start":89,"line_end":89,"column_start":31,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":3947},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peek_nth.rs","byte_start":283101,"byte_end":283108,"line_start":91,"line_end":91,"column_start":25,"column_end":32},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":3947},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":283846,"byte_end":283854,"line_start":14,"line_end":14,"column_start":25,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":7914},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284160,"byte_end":284168,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":134}},"from":{"krate":2,"index":38580},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284488,"byte_end":284495,"line_start":37,"line_end":37,"column_start":25,"column_end":32},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2976},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":284914,"byte_end":284922,"line_start":56,"line_end":56,"column_start":25,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":4044},"to":{"krate":0,"index":1862}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":285676,"byte_end":285692,"line_start":86,"line_end":86,"column_start":40,"column_end":56},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/peeking_take_while.rs","byte_start":286016,"byte_end":286032,"line_start":103,"line_end":103,"column_start":29,"column_end":45},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288353,"byte_end":288365,"line_start":18,"line_end":18,"column_start":19,"column_end":31},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":288940,"byte_end":288952,"line_start":55,"line_end":55,"column_start":24,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":289818,"byte_end":289830,"line_start":96,"line_end":96,"column_start":22,"column_end":34},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":292482,"byte_end":292494,"line_start":167,"line_end":167,"column_start":9,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/permutations.rs","byte_start":293706,"byte_end":293719,"line_start":205,"line_end":205,"column_start":6,"column_end":19},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":4019},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296523,"byte_end":296531,"line_start":20,"line_end":20,"column_start":19,"column_end":27},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1975},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":296651,"byte_end":296659,"line_start":27,"line_end":27,"column_start":24,"column_end":32},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1975},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":297025,"byte_end":297033,"line_start":45,"line_end":45,"column_start":22,"column_end":30},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1975},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/powerset.rs","byte_start":298280,"byte_end":298288,"line_start":86,"line_end":86,"column_start":27,"column_end":35},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1975},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/process_results_impl.rs","byte_start":298768,"byte_end":298782,"line_start":14,"line_end":14,"column_start":32,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":4033},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":301944,"byte_end":301952,"line_start":28,"line_end":28,"column_start":19,"column_end":27},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":4044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/put_back_n_impl.rs","byte_start":302454,"byte_end":302462,"line_start":49,"line_end":49,"column_start":32,"column_end":40},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":4044},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304436,"byte_end":304442,"line_start":53,"line_end":53,"column_start":19,"column_end":25},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":304502,"byte_end":304508,"line_start":57,"line_end":57,"column_start":25,"column_end":31},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":305052,"byte_end":305058,"line_start":75,"line_end":75,"column_start":33,"column_end":39},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/rciter_impl.rs","byte_start":305504,"byte_end":305510,"line_start":97,"line_end":97,"column_start":30,"column_end":36},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":4054},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306144,"byte_end":306151,"line_start":24,"line_end":24,"column_start":22,"column_end":29},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":4061},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306541,"byte_end":306548,"line_start":44,"line_end":44,"column_start":33,"column_end":40},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":4061},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306698,"byte_end":306705,"line_start":53,"line_end":53,"column_start":31,"column_end":38},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":4061},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/repeatn.rs","byte_start":306758,"byte_end":306765,"line_start":57,"line_end":57,"column_start":27,"column_end":34},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":4061},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310114,"byte_end":310124,"line_start":15,"line_end":15,"column_start":24,"column_end":34},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":4071},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":310965,"byte_end":310975,"line_start":49,"line_end":49,"column_start":25,"column_end":35},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":4071},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":312638,"byte_end":312644,"line_start":109,"line_end":109,"column_start":28,"column_end":34},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":4079},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313027,"byte_end":313033,"line_start":124,"line_end":124,"column_start":29,"column_end":35},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":4079},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313568,"byte_end":313575,"line_start":146,"line_end":146,"column_start":28,"column_end":35},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":4088},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/sources.rs","byte_start":313678,"byte_end":313685,"line_start":152,"line_end":152,"column_start":26,"column_end":33},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4088},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":315381,"byte_end":315384,"line_start":37,"line_end":37,"column_start":22,"column_end":25},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tee.rs","byte_start":316484,"byte_end":316487,"line_start":75,"line_end":75,"column_start":31,"column_end":34},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4108},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317070,"byte_end":317082,"line_start":16,"line_end":16,"column_start":7,"column_end":19},"kind":"SuperTrait","from":{"krate":0,"index":2239},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317130,"byte_end":317131,"line_start":19,"line_end":19,"column_start":44,"column_end":45},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2192},"to":{"krate":0,"index":2190}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317393,"byte_end":317404,"line_start":33,"line_end":33,"column_start":9,"column_end":20},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":317576,"byte_end":317587,"line_start":44,"line_end":44,"column_start":22,"column_end":33},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4115},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318265,"byte_end":318276,"line_start":72,"line_end":72,"column_start":31,"column_end":42},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":4115},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":318948,"byte_end":318954,"line_start":101,"line_end":101,"column_start":25,"column_end":31},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":4125},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":319179,"byte_end":319185,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":4125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":320786,"byte_end":320798,"line_start":170,"line_end":170,"column_start":25,"column_end":37},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":4138},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":321342,"byte_end":321354,"line_start":191,"line_end":191,"column_start":30,"column_end":42},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":4138},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322457,"byte_end":322477,"line_start":227,"line_end":227,"column_start":25,"column_end":45},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":4151},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/tuple_impl.rs","byte_start":322718,"byte_end":322723,"line_start":239,"line_end":239,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":2239}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":325841,"byte_end":325853,"line_start":15,"line_end":15,"column_start":34,"column_end":46},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":4340},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":326054,"byte_end":326066,"line_start":23,"line_end":23,"column_start":42,"column_end":54},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":4340},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":326530,"byte_end":326534,"line_start":43,"line_end":43,"column_start":18,"column_end":22},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":4352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":327412,"byte_end":327424,"line_start":71,"line_end":71,"column_start":34,"column_end":46},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":4340},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":328661,"byte_end":328673,"line_start":105,"line_end":105,"column_start":45,"column_end":57},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":4340},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329319,"byte_end":329323,"line_start":127,"line_end":127,"column_start":33,"column_end":37},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":4362},"to":{"krate":0,"index":2294}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329613,"byte_end":329617,"line_start":137,"line_end":137,"column_start":28,"column_end":32},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2303},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":329701,"byte_end":329705,"line_start":140,"line_end":140,"column_start":39,"column_end":43},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2303},"to":{"krate":0,"index":2294}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330314,"byte_end":330322,"line_start":161,"line_end":161,"column_start":38,"column_end":46},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":4367},"to":{"krate":0,"index":2315}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/duplicates_impl.rs","byte_start":330605,"byte_end":330614,"line_start":175,"line_end":175,"column_start":35,"column_end":44},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":4377},"to":{"krate":0,"index":2315}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":332392,"byte_end":332400,"line_start":21,"line_end":21,"column_start":30,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":4384},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":333189,"byte_end":333197,"line_start":52,"line_end":52,"column_start":28,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":4384},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":333934,"byte_end":333942,"line_start":81,"line_end":81,"column_start":39,"column_end":47},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":4384},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":334349,"byte_end":334357,"line_start":97,"line_end":97,"column_start":33,"column_end":41},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":4384},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":334478,"byte_end":334484,"line_start":103,"line_end":103,"column_start":22,"column_end":28},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4397},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335215,"byte_end":335221,"line_start":131,"line_end":131,"column_start":33,"column_end":39},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4397},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":335662,"byte_end":335668,"line_start":147,"line_end":147,"column_start":27,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4397},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unique_impl.rs","byte_start":336059,"byte_end":336065,"line_start":161,"line_end":161,"column_start":24,"column_end":30},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4397},"to":{"krate":2,"index":9604}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/unziptuple.rs","byte_start":337303,"byte_end":337311,"line_start":32,"line_end":32,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":7914},"to":{"krate":0,"index":2409}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":340418,"byte_end":340430,"line_start":16,"line_end":16,"column_start":19,"column_end":31},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2424},"to":{"krate":2,"index":2645}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341243,"byte_end":341251,"line_start":49,"line_end":49,"column_start":9,"column_end":17},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4613},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":341530,"byte_end":341542,"line_start":61,"line_end":61,"column_start":32,"column_end":44},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2424},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":342778,"byte_end":342790,"line_start":95,"line_end":95,"column_start":31,"column_end":43},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2424},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/with_position.rs","byte_start":342867,"byte_end":342879,"line_start":99,"line_end":99,"column_start":37,"column_end":49},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2424},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":343788,"byte_end":343793,"line_start":37,"line_end":37,"column_start":25,"column_end":30},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4641},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_eq_impl.rs","byte_start":344371,"byte_end":344376,"line_start":57,"line_end":57,"column_start":34,"column_end":39},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4641},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":345308,"byte_end":345318,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4654},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":345940,"byte_end":345950,"line_start":55,"line_end":55,"column_start":36,"column_end":46},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4654},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":346771,"byte_end":346781,"line_start":75,"line_end":75,"column_start":34,"column_end":44},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4654},"to":{"krate":2,"index":7791}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/zip_longest.rs","byte_start":346884,"byte_end":346894,"line_start":80,"line_end":80,"column_start":30,"column_end":40},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4654},"to":{"krate":2,"index":8187}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":12766,"byte_end":12774,"line_start":431,"line_end":431,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":7914},"to":{"krate":0,"index":2514}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":125271,"byte_end":125272,"line_start":3662,"line_end":3662,"column_start":31,"column_end":32},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2849},"to":{"krate":0,"index":2514}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/itertools-0.10.5/src/lib.rs","byte_start":128434,"byte_end":128443,"line_start":3769,"line_end":3769,"column_start":9,"column_end":18},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":5096},"to":{"krate":4294967295,"index":4294967295}}]}