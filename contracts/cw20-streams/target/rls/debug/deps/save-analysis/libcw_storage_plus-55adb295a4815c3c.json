{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0","program":"/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","cw_storage_plus","--edition=2018","/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"iterator\"","-C","metadata=55adb295a4815c3c","-C","extra-filename=-55adb295a4815c3c","--out-dir","/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps","-L","dependency=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps","--extern","cosmwasm_std=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps/libcosmwasm_std-44948175604c40a0.rmeta","--extern","schemars=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps/libschemars-f7aae436d19369a8.rmeta","--extern","serde=/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps/libserde-2036ba6eb090c8d1.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/trevorclarke/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/trevorclarke/code/cron/cw-purrbox/contracts/cw20-streams/target/rls/debug/deps/libcw_storage_plus-55adb295a4815c3c.rmeta"},"prelude":{"crate_id":{"name":"cw_storage_plus","disambiguator":[6142935567698736922,0]},"crate_root":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src","external_crates":[{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9602236740471282608,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16249227214258238047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13791225915815425008,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[455111089362928276,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[740641686899810413,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1452182208797737205,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4474361821197688885,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[11146593528668201643,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[7026141623111916022,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11096207044195207047,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":11,"id":{"name":"std_detect","disambiguator":[16946906222655600942,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[9670608472714711915,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[3075685271658393714,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[7553277853646633394,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[5387634511767759158,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[10401181353817371068,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14296571408058143832,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":18,"id":{"name":"cosmwasm_std","disambiguator":[9039568743265929778,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":19,"id":{"name":"schemars","disambiguator":[7997999724516670068,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":20,"id":{"name":"schemars_derive","disambiguator":[12158405920072145054,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":21,"id":{"name":"serde_json","disambiguator":[1908215773447981276,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","num":22,"id":{"name":"serde","disambiguator":[5727982145564189251,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","num":23,"id":{"name":"serde_derive","disambiguator":[6005655599024246725,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":24,"id":{"name":"itoa","disambiguator":[4616050707793390338,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":25,"id":{"name":"ryu","disambiguator":[16073521324321269628,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":26,"id":{"name":"dyn_clone","disambiguator":[1693628512300680272,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":27,"id":{"name":"cosmwasm_crypto","disambiguator":[10510205978963884500,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":28,"id":{"name":"ed25519_zebra","disambiguator":[10479482495908424475,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":29,"id":{"name":"curve25519_dalek","disambiguator":[269918578294051065,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":30,"id":{"name":"byteorder","disambiguator":[17265137979086274999,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":31,"id":{"name":"digest","disambiguator":[7733490391935835011,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":32,"id":{"name":"generic_array","disambiguator":[7899941157077680329,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":33,"id":{"name":"typenum","disambiguator":[14585012641457782044,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":34,"id":{"name":"rand_core","disambiguator":[8008878856750733654,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":35,"id":{"name":"zeroize","disambiguator":[6111263756857440635,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":36,"id":{"name":"subtle","disambiguator":[10187600383036868428,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":37,"id":{"name":"hashbrown","disambiguator":[17391556480082573983,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":38,"id":{"name":"ahash","disambiguator":[14768118445737572987,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":39,"id":{"name":"once_cell","disambiguator":[4525933762301159880,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":40,"id":{"name":"getrandom","disambiguator":[7826760453764783728,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":41,"id":{"name":"cfg_if","disambiguator":[13037983282529128945,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":42,"id":{"name":"libc","disambiguator":[12525383312641221777,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":43,"id":{"name":"rand_core","disambiguator":[41299114264952942,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":44,"id":{"name":"sha2","disambiguator":[17160066994774053118,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":45,"id":{"name":"block_buffer","disambiguator":[15833217138124471697,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":46,"id":{"name":"opaque_debug","disambiguator":[10149071386350004449,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":47,"id":{"name":"hex","disambiguator":[1555668764392856396,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":48,"id":{"name":"thiserror","disambiguator":[8382220700576557444,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":49,"id":{"name":"thiserror_impl","disambiguator":[9748708530611086281,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":50,"id":{"name":"digest","disambiguator":[15049202732038179696,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":51,"id":{"name":"crypto_common","disambiguator":[14089165646673226514,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":52,"id":{"name":"block_buffer","disambiguator":[5185094059600351175,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":53,"id":{"name":"k256","disambiguator":[2002471042223051723,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":54,"id":{"name":"elliptic_curve","disambiguator":[5097989422678828800,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":55,"id":{"name":"crypto_bigint","disambiguator":[13828368939363800264,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":56,"id":{"name":"group","disambiguator":[4059414381887118030,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":57,"id":{"name":"ff","disambiguator":[6689642643876023332,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":58,"id":{"name":"sec1","disambiguator":[18833169689429462,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":59,"id":{"name":"base16ct","disambiguator":[11517450063084463904,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":60,"id":{"name":"der","disambiguator":[17124280930950120561,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":61,"id":{"name":"const_oid","disambiguator":[3453305132763655898,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":62,"id":{"name":"pkcs8","disambiguator":[5259636068201448400,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":63,"id":{"name":"spki","disambiguator":[17120857976118901835,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":64,"id":{"name":"ecdsa","disambiguator":[1516976248998464302,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":65,"id":{"name":"signature","disambiguator":[17826267043976948828,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":66,"id":{"name":"rfc6979","disambiguator":[6718295853866798419,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":67,"id":{"name":"hmac","disambiguator":[8768351420422664234,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":68,"id":{"name":"sha2","disambiguator":[11127509538504096271,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":69,"id":{"name":"forward_ref","disambiguator":[15111780361225034360,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":70,"id":{"name":"derivative","disambiguator":[17688861418104073693,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":71,"id":{"name":"cosmwasm_derive","disambiguator":[7045390318938350074,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":72,"id":{"name":"uint","disambiguator":[3575765973547177014,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":73,"id":{"name":"static_assertions","disambiguator":[10004466869080491857,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":74,"id":{"name":"crunchy","disambiguator":[481853865009412334,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":75,"id":{"name":"base64","disambiguator":[10387399929754765628,0]}},{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","num":76,"id":{"name":"serde_json_wasm","disambiguator":[7149093843897242088,0]}}],"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":0,"byte_end":2580,"line_start":1,"line_end":87,"column_start":1,"column_end":38}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/mod.rs","byte_start":136396,"byte_end":136406,"line_start":6,"line_end":6,"column_start":16,"column_end":26},"alias_span":null,"name":"MultiIndex","value":"","parent":{"krate":0,"index":574}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/mod.rs","byte_start":136424,"byte_end":136435,"line_start":7,"line_end":7,"column_start":17,"column_end":28},"alias_span":null,"name":"UniqueIndex","value":"","parent":{"krate":0,"index":574}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":259370,"byte_end":259382,"line_start":5,"line_end":5,"column_start":15,"column_end":27},"alias_span":null,"name":"SnapshotItem","value":"","parent":{"krate":0,"index":1430}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":259397,"byte_end":259408,"line_start":6,"line_end":6,"column_start":14,"column_end":25},"alias_span":null,"name":"SnapshotMap","value":"","parent":{"krate":0,"index":1430}},{"kind":"Use","ref_id":{"krate":0,"index":1763},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1022,"byte_end":1027,"line_start":34,"line_end":34,"column_start":17,"column_end":22},"alias_span":null,"name":"Bound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1029,"byte_end":1036,"line_start":34,"line_end":34,"column_start":24,"column_end":31},"alias_span":null,"name":"Bounder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1786},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1038,"byte_end":1049,"line_start":34,"line_end":34,"column_start":33,"column_end":44},"alias_span":null,"name":"PrefixBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1752},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1051,"byte_end":1059,"line_start":34,"line_end":34,"column_start":46,"column_end":54},"alias_span":null,"name":"RawBound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":102},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1074,"byte_end":1088,"line_start":35,"line_end":35,"column_start":13,"column_end":27},"alias_span":null,"name":"KeyDeserialize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":187},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1105,"byte_end":1110,"line_start":36,"line_end":36,"column_start":16,"column_end":21},"alias_span":null,"name":"Deque","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":226},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1127,"byte_end":1136,"line_start":37,"line_end":37,"column_start":16,"column_end":25},"alias_span":null,"name":"DequeIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1154,"byte_end":1160,"line_start":38,"line_end":38,"column_start":17,"column_end":23},"alias_span":null,"name":"Endian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1213,"byte_end":1222,"line_start":40,"line_end":40,"column_start":23,"column_end":32},"alias_span":null,"name":"IndexList","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":379},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1224,"byte_end":1234,"line_start":40,"line_end":40,"column_start":34,"column_end":44},"alias_span":null,"name":"IndexedMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":507},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1292,"byte_end":1310,"line_start":42,"line_end":42,"column_start":27,"column_end":45},"alias_span":null,"name":"IndexedSnapshotMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":865},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1358,"byte_end":1363,"line_start":44,"line_end":44,"column_start":18,"column_end":23},"alias_span":null,"name":"Index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":638},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1411,"byte_end":1421,"line_start":46,"line_end":46,"column_start":18,"column_end":28},"alias_span":null,"name":"MultiIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1469,"byte_end":1480,"line_start":48,"line_end":48,"column_start":18,"column_end":29},"alias_span":null,"name":"UniqueIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":873},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1499,"byte_end":1505,"line_start":49,"line_end":49,"column_start":18,"column_end":24},"alias_span":null,"name":"IntKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":921},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1521,"byte_end":1525,"line_start":50,"line_end":50,"column_start":15,"column_end":19},"alias_span":null,"name":"Item","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2052},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1542,"byte_end":1545,"line_start":51,"line_end":51,"column_start":16,"column_end":19},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1039},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1547,"byte_end":1555,"line_start":51,"line_end":51,"column_start":21,"column_end":29},"alias_span":null,"name":"Prefixer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":990},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1557,"byte_end":1567,"line_start":51,"line_end":51,"column_start":31,"column_end":41},"alias_span":null,"name":"PrimaryKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2180},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1583,"byte_end":1586,"line_start":52,"line_end":52,"column_start":14,"column_end":17},"alias_span":null,"name":"Map","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2197},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1602,"byte_end":1606,"line_start":53,"line_end":53,"column_start":15,"column_end":19},"alias_span":null,"name":"Path","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1410},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1654,"byte_end":1671,"line_start":55,"line_end":55,"column_start":18,"column_end":35},"alias_span":null,"name":"range_with_prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2207},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1673,"byte_end":1679,"line_start":55,"line_end":55,"column_start":37,"column_end":43},"alias_span":null,"name":"Prefix","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1465},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1730,"byte_end":1742,"line_start":57,"line_end":57,"column_start":20,"column_end":32},"alias_span":null,"name":"SnapshotItem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1744,"byte_end":1755,"line_start":57,"line_end":57,"column_start":34,"column_end":45},"alias_span":null,"name":"SnapshotMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2238},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":1757,"byte_end":1765,"line_start":57,"line_end":57,"column_start":47,"column_end":55},"alias_span":null,"name":"Strategy","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":0,"byte_end":2580,"line_start":1,"line_end":87,"column_start":1,"column_end":38},"name":"","qualname":"::","value":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":82},{"krate":0,"index":147},{"krate":0,"index":249},{"krate":0,"index":261},{"krate":0,"index":319},{"krate":0,"index":444},{"krate":0,"index":574},{"krate":0,"index":869},{"krate":0,"index":879},{"krate":0,"index":943},{"krate":0,"index":971},{"krate":0,"index":1105},{"krate":0,"index":1239},{"krate":0,"index":1294},{"krate":0,"index":1430},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1701},{"krate":0,"index":1704},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1713},{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1726},{"krate":0,"index":1729},{"krate":0,"index":1732},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749}],"decl_id":null,"docs":"After building `cosmwasm-storage`, we realized many of the design decisions were\nlimiting us and producing a lot of needless boilerplate. The decision was made to leave\nthose APIs stable for anyone wanting a very basic abstraction on the KV-store and to\nbuild a much more powerful and complex ORM layer that can provide powerful accessors\nusing complex key types, which are transparently turned into bytes.","sig":null,"attributes":[{"value":"*\nAfter building `cosmwasm-storage`, we realized many of the design decisions were\nlimiting us and producing a lot of needless boilerplate. The decision was made to leave\nthose APIs stable for anyone wanting a very basic abstraction on the KV-store and to\nbuild a much more powerful and complex ORM layer that can provide powerful accessors\nusing complex key types, which are transparently turned into bytes.\n\nThis led to a number of breaking API changes in this package of the course of several\nreleases as we updated this with lots of experience, user feedback, and deep dives to harness\nthe full power of generics.\n\nFor more information on this package, please check out the\n[README](https://github.com/CosmWasm/cw-plus/blob/main/packages/storage-plus/README.md).\n*/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/lib.rs","byte_start":0,"byte_end":771,"line_start":1,"line_end":14,"column_start":1,"column_end":3}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3197,"byte_end":3206,"line_start":16,"line_end":16,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::RawBound::Inclusive","value":"RawBound::Inclusive(Vec<u8>)","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3221,"byte_end":3230,"line_start":17,"line_end":17,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::RawBound::Exclusive","value":"RawBound::Exclusive(Vec<u8>)","parent":{"krate":0,"index":1752},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3182,"byte_end":3190,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"RawBound","qualname":"::bound::RawBound","value":"pub enum RawBound { Inclusive(Vec<u8>), Exclusive(Vec<u8>), }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1756}],"decl_id":null,"docs":" `RawBound` is used to define the two ends of a range, more explicit than `Option<u8>`.\n `None` means that we don't limit that side of the range at all.\n `Inclusive` means we use the given bytes as a limit and *include* anything at that exact key.\n `Exclusive` means we use the given bytes as a limit and *exclude* anything at that exact key.\n See `Bound` for a type safe way to build these bounds.\n","sig":null,"attributes":[{"value":"/ `RawBound` is used to define the two ends of a range, more explicit than `Option<u8>`.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":2735,"byte_end":2825,"line_start":9,"line_end":9,"column_start":1,"column_end":91}},{"value":"/ `None` means that we don't limit that side of the range at all.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":2826,"byte_end":2893,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ `Inclusive` means we use the given bytes as a limit and *include* anything at that exact key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":2894,"byte_end":2991,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ `Exclusive` means we use the given bytes as a limit and *exclude* anything at that exact key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":2992,"byte_end":3089,"line_start":12,"line_end":12,"column_start":1,"column_end":98}},{"value":"/ See `Bound` for a type safe way to build these bounds.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3090,"byte_end":3148,"line_start":13,"line_end":13,"column_start":1,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3631,"byte_end":3640,"line_start":26,"line_end":26,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::Bound::Inclusive","value":"Bound::Inclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3674,"byte_end":3683,"line_start":27,"line_end":27,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::Bound::Exclusive","value":"Bound::Exclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3717,"byte_end":3729,"line_start":28,"line_end":28,"column_start":5,"column_end":17},"name":"InclusiveRaw","qualname":"::bound::Bound::InclusiveRaw","value":"Bound::InclusiveRaw(Vec<u8>)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1775},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3744,"byte_end":3756,"line_start":29,"line_end":29,"column_start":5,"column_end":17},"name":"ExclusiveRaw","qualname":"::bound::Bound::ExclusiveRaw","value":"Bound::ExclusiveRaw(Vec<u8>)","parent":{"krate":0,"index":1763},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1763},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3596,"byte_end":3601,"line_start":25,"line_end":25,"column_start":10,"column_end":15},"name":"Bound","qualname":"::bound::Bound","value":"pub enum Bound<'a, K: PrimaryKey> {\n    Inclusive((K, PhantomData<&'a bool>)),\n    Exclusive((K, PhantomData<&'a bool>)),\n    InclusiveRaw(Vec<u8>),\n    ExclusiveRaw(Vec<u8>),\n}","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1772},{"krate":0,"index":1775}],"decl_id":null,"docs":" `Bound` is used to define the two ends of a range.\n `None` means that we don't limit that side of the range at all.\n `Inclusive` means we use the given value as a limit and *include* anything at that exact key.\n `Exclusive` means we use the given value as a limit and *exclude* anything at that exact key.\n","sig":null,"attributes":[{"value":"/ `Bound` is used to define the two ends of a range.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3244,"byte_end":3298,"line_start":20,"line_end":20,"column_start":1,"column_end":55}},{"value":"/ `None` means that we don't limit that side of the range at all.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3299,"byte_end":3366,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/ `Inclusive` means we use the given value as a limit and *include* anything at that exact key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3367,"byte_end":3464,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ `Exclusive` means we use the given value as a limit and *exclude* anything at that exact key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3465,"byte_end":3562,"line_start":23,"line_end":23,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3824,"byte_end":3833,"line_start":33,"line_end":33,"column_start":12,"column_end":21},"name":"inclusive","qualname":"<Bound>::inclusive","value":"pub fn inclusive<T: Into<K>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3929,"byte_end":3938,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"exclusive","qualname":"<Bound>::exclusive","value":"pub fn exclusive<T: Into<K>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4034,"byte_end":4046,"line_start":41,"line_end":41,"column_start":12,"column_end":24},"name":"to_raw_bound","qualname":"<Bound>::to_raw_bound","value":"pub fn to_raw_bound(&Self) -> RawBound","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1789},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4490,"byte_end":4499,"line_start":53,"line_end":53,"column_start":5,"column_end":14},"name":"Inclusive","qualname":"::bound::PrefixBound::Inclusive","value":"PrefixBound::Inclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1792},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4533,"byte_end":4542,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"Exclusive","qualname":"::bound::PrefixBound::Exclusive","value":"PrefixBound::Exclusive((K, PhantomData<&'a bool>))","parent":{"krate":0,"index":1786},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1786},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4451,"byte_end":4462,"line_start":52,"line_end":52,"column_start":10,"column_end":21},"name":"PrefixBound","qualname":"::bound::PrefixBound","value":"pub enum PrefixBound<'a, K: Prefixer> {\n    Inclusive((K, PhantomData<&'a bool>)),\n    Exclusive((K, PhantomData<&'a bool>)),\n}","parent":null,"children":[{"krate":0,"index":1789},{"krate":0,"index":1792}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4633,"byte_end":4642,"line_start":58,"line_end":58,"column_start":12,"column_end":21},"name":"inclusive","qualname":"<PrefixBound>::inclusive","value":"pub fn inclusive<T: Into<K>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4738,"byte_end":4747,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"exclusive","qualname":"<PrefixBound>::exclusive","value":"pub fn exclusive<T: Into<K>>(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4843,"byte_end":4855,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"to_raw_bound","qualname":"<PrefixBound>::to_raw_bound","value":"pub fn to_raw_bound(&Self) -> RawBound","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":36},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":5099,"byte_end":5106,"line_start":74,"line_end":74,"column_start":11,"column_end":18},"name":"Bounder","qualname":"::bound::Bounder","value":"Bounder<'a>: PrimaryKey + Sized","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":5144,"byte_end":5159,"line_start":75,"line_end":75,"column_start":8,"column_end":23},"name":"inclusive_bound","qualname":"::bound::Bounder::inclusive_bound","value":"pub fn inclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":5201,"byte_end":5216,"line_start":76,"line_end":76,"column_start":8,"column_end":23},"name":"exclusive_bound","qualname":"::bound::Bounder::exclusive_bound","value":"pub fn exclusive_bound(Self) -> Option<Bound>","parent":{"krate":0,"index":36},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":102},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8253,"byte_end":8267,"line_start":8,"line_end":8,"column_start":11,"column_end":25},"name":"KeyDeserialize","qualname":"::de::KeyDeserialize","value":"KeyDeserialize","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8279,"byte_end":8285,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Output","qualname":"::de::KeyDeserialize::Output","value":"type Output: Sized;","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8302,"byte_end":8310,"line_start":11,"line_end":11,"column_start":8,"column_end":16},"name":"from_vec","qualname":"::de::KeyDeserialize::from_vec","value":"pub fn from_vec(Vec<u8>) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8363,"byte_end":8373,"line_start":13,"line_end":13,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::de::KeyDeserialize::from_slice","value":"pub fn from_slice(&[u8]) -> StdResult<Self::Output>","parent":{"krate":0,"index":102},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":187},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16144,"byte_end":16149,"line_start":17,"line_end":17,"column_start":12,"column_end":17},"name":"Deque","qualname":"::deque::Deque","value":"Deque {  }","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191}],"decl_id":null,"docs":" A deque stores multiple items at the given key. It provides efficient FIFO and LIFO access,\n as well as direct index access.","sig":null,"attributes":[{"value":"/ A deque stores multiple items at the given key. It provides efficient FIFO and LIFO access,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":15829,"byte_end":15924,"line_start":12,"line_end":12,"column_start":1,"column_end":96}},{"value":"/ as well as direct index access.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":15925,"byte_end":15960,"line_start":13,"line_end":13,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":15961,"byte_end":15964,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ It has a maximum capacity of `u32::MAX - 1`. Make sure to never exceed that number when using this type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":15965,"byte_end":16073,"line_start":15,"line_end":15,"column_start":1,"column_end":109}},{"value":"/ If you do, the methods won't work as intended anymore.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16074,"byte_end":16132,"line_start":16,"line_end":16,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16413,"byte_end":16416,"line_start":25,"line_end":25,"column_start":18,"column_end":21},"name":"new","qualname":"<Deque>::new","value":"pub const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16677,"byte_end":16686,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"push_back","qualname":"<Deque>::push_back","value":"pub fn push_back(&Self, &mut dyn Storage, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given value to the end of the deque\n","sig":null,"attributes":[{"value":"/ Adds the given value to the end of the deque","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16617,"byte_end":16665,"line_start":34,"line_end":34,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":17027,"byte_end":17037,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"push_front","qualname":"<Deque>::push_front","value":"pub fn push_front(&Self, &mut dyn Storage, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Adds the given value to the front of the deque\n","sig":null,"attributes":[{"value":"/ Adds the given value to the front of the deque","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16965,"byte_end":17015,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":17449,"byte_end":17457,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<Deque>::pop_back","value":"pub fn pop_back(&Self, &mut dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element of the deque and returns it\n","sig":null,"attributes":[{"value":"/ Removes the last element of the deque and returns it","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":17381,"byte_end":17437,"line_start":56,"line_end":56,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":17933,"byte_end":17942,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<Deque>::pop_front","value":"pub fn pop_front(&Self, &mut dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Removes the first element of the deque and returns it\n","sig":null,"attributes":[{"value":"/ Removes the first element of the deque and returns it","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":17864,"byte_end":17921,"line_start":69,"line_end":69,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18423,"byte_end":18428,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"name":"front","qualname":"<Deque>::front","value":"pub fn front(&Self, &dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the deque without removing it\n","sig":null,"attributes":[{"value":"/ Returns the first element of the deque without removing it","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18349,"byte_end":18411,"line_start":82,"line_end":82,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18650,"byte_end":18654,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"back","qualname":"<Deque>::back","value":"pub fn back(&Self, &dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first element of the deque without removing it\n","sig":null,"attributes":[{"value":"/ Returns the first element of the deque without removing it","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18576,"byte_end":18638,"line_start":88,"line_end":88,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18906,"byte_end":18909,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"len","qualname":"<Deque>::len","value":"pub fn len(&Self, &dyn Storage) -> StdResult<u32>","parent":null,"children":[],"decl_id":null,"docs":" Gets the length of the deque.\n","sig":null,"attributes":[{"value":"/ Gets the length of the deque.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18818,"byte_end":18851,"line_start":94,"line_end":94,"column_start":5,"column_end":38}},{"value":"allow(clippy :: len_without_is_empty)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":18856,"byte_end":18894,"line_start":95,"line_end":95,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":19099,"byte_end":19107,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Deque>::is_empty","value":"pub fn is_empty(&Self, &dyn Storage) -> StdResult<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the deque contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the deque contains no elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":19034,"byte_end":19087,"line_start":100,"line_end":100,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":20962,"byte_end":20965,"line_start":154,"line_end":154,"column_start":12,"column_end":15},"name":"get","qualname":"<Deque>::get","value":"pub fn get(&Self, &dyn Storage, u32) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the value at the given position in the queue or `None` if the index is out of bounds\n","sig":null,"attributes":[{"value":"/ Returns the value at the given position in the queue or `None` if the index is out of bounds","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":20854,"byte_end":20950,"line_start":153,"line_end":153,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":22576,"byte_end":22580,"line_start":200,"line_end":200,"column_start":12,"column_end":16},"name":"iter","qualname":"<Deque>::iter","value":"pub fn iter(&Self, &'a dyn Storage) -> StdResult<DequeIter<, T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":226},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":22821,"byte_end":22830,"line_start":210,"line_end":210,"column_start":12,"column_end":21},"name":"DequeIter","qualname":"::deque::DequeIter","value":"DequeIter {  }","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":253},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37220,"byte_end":37226,"line_start":12,"line_end":12,"column_start":11,"column_end":17},"name":"Endian","qualname":"::endian::Endian","value":"Endian: Sized + Copy","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":254},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37252,"byte_end":37255,"line_start":13,"line_end":13,"column_start":10,"column_end":13},"name":"Buf","qualname":"::endian::Endian::Buf","value":"type Buf: AsRef<[u8]> + AsMut<[u8]> + Into<Vec<u8>> + Default;","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37318,"byte_end":37329,"line_start":15,"line_end":15,"column_start":8,"column_end":19},"name":"to_le_bytes","qualname":"::endian::Endian::to_le_bytes","value":"pub fn to_le_bytes(Self) -> Self::Buf","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37357,"byte_end":37368,"line_start":16,"line_end":16,"column_start":8,"column_end":19},"name":"to_be_bytes","qualname":"::endian::Endian::to_be_bytes","value":"pub fn to_be_bytes(Self) -> Self::Buf","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37397,"byte_end":37410,"line_start":18,"line_end":18,"column_start":8,"column_end":21},"name":"from_le_bytes","qualname":"::endian::Endian::from_le_bytes","value":"pub fn from_le_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37445,"byte_end":37458,"line_start":19,"line_end":19,"column_start":8,"column_end":21},"name":"from_be_bytes","qualname":"::endian::Endian::from_be_bytes","value":"pub fn from_be_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":376},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45379,"byte_end":45388,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"IndexList","qualname":"::indexed_map::IndexList","value":"IndexList<T>","parent":null,"children":[{"krate":0,"index":378}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45401,"byte_end":45412,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"get_indexes","qualname":"::indexed_map::IndexList::get_indexes","value":"pub fn get_indexes(&Self) -> Box<dyn Iterator<Item = &dyn Index<T>>>","parent":{"krate":0,"index":376},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":379},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45606,"byte_end":45616,"line_start":23,"line_end":23,"column_start":12,"column_end":22},"name":"IndexedMap","qualname":"::indexed_map::IndexedMap","value":"IndexedMap { idx }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" `IndexedMap` works like a `Map` but has a secondary index\n","sig":null,"attributes":[{"value":"/ `IndexedMap` works like a `Map` but has a secondary index","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45533,"byte_end":45594,"line_start":22,"line_end":22,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":386},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45897,"byte_end":45900,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"name":"idx","qualname":"::indexed_map::IndexedMap::idx","value":"I","parent":{"krate":0,"index":379},"children":[],"decl_id":null,"docs":" This is meant to be read directly to get the proper types, like:\n map.idx.owner.items(...)\n","sig":null,"attributes":[{"value":"/ This is meant to be read directly to get the proper types, like:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45787,"byte_end":45855,"line_start":31,"line_end":31,"column_start":5,"column_end":73}},{"value":"/ map.idx.owner.items(...)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45860,"byte_end":45888,"line_start":32,"line_end":32,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46117,"byte_end":46120,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexedMap>::new","value":"pub fn new(&'a str, I) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46337,"byte_end":46340,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"key","qualname":"<IndexedMap>::key","value":"pub fn key(&Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46818,"byte_end":46822,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"save","qualname":"<IndexedMap>::save","value":"pub fn save(&Self, &mut dyn Storage, K, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues.\n this must load the old value to update the indexes properly\n if you loaded the old value earlier in the same function, use replace to avoid needless db reads\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46547,"byte_end":46633,"line_start":62,"line_end":62,"column_start":5,"column_end":91}},{"value":"/ this must load the old value to update the indexes properly","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46638,"byte_end":46701,"line_start":63,"line_end":63,"column_start":5,"column_end":68}},{"value":"/ if you loaded the old value earlier in the same function, use replace to avoid needless db reads","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46706,"byte_end":46806,"line_start":64,"line_end":64,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":47033,"byte_end":47039,"line_start":70,"line_end":70,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexedMap>::remove","value":"pub fn remove(&Self, &mut dyn Storage, K) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":47486,"byte_end":47493,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexedMap>::replace","value":"pub fn replace(&Self, &mut dyn Storage, K, Option<&T>, Option<&T>)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" replace writes data to key. old_data must be the current stored value (from a previous load)\n and is used to properly update the index. This is used by save, replace, and update\n and can be called directly if you want to optimize\n","sig":null,"attributes":[{"value":"/ replace writes data to key. old_data must be the current stored value (from a previous load)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":47227,"byte_end":47323,"line_start":75,"line_end":75,"column_start":5,"column_end":101}},{"value":"/ and is used to properly update the index. This is used by save, replace, and update","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":47328,"byte_end":47415,"line_start":76,"line_end":76,"column_start":5,"column_end":92}},{"value":"/ and can be called directly if you want to optimize","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":47420,"byte_end":47474,"line_start":77,"line_end":77,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":48483,"byte_end":48489,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"update","qualname":"<IndexedMap>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, K, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":48205,"byte_end":48275,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":48280,"byte_end":48366,"line_start":104,"line_end":104,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":48371,"byte_end":48374,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":48379,"byte_end":48471,"line_start":106,"line_end":106,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49124,"byte_end":49128,"line_start":123,"line_end":123,"column_start":12,"column_end":16},"name":"load","qualname":"<IndexedMap>::load","value":"pub fn load(&Self, &dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49029,"byte_end":49112,"line_start":122,"line_end":122,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49384,"byte_end":49392,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"may_load","qualname":"<IndexedMap>::may_load","value":"pub fn may_load(&Self, &dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49232,"byte_end":49329,"line_start":127,"line_end":127,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49334,"byte_end":49372,"line_start":128,"line_end":128,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49612,"byte_end":49615,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"has","qualname":"<IndexedMap>::has","value":"pub fn has(&Self, &dyn Storage, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if storage contains this key, without parsing or interpreting the contents.\n","sig":null,"attributes":[{"value":"/ Returns true if storage contains this key, without parsing or interpreting the contents.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49508,"byte_end":49600,"line_start":133,"line_end":133,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49908,"byte_end":49913,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexedMap>::clear","value":"pub fn clear(&Self, &mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.\n","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":49854,"byte_end":49896,"line_start":143,"line_end":143,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":50607,"byte_end":50615,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexedMap>::is_empty","value":"pub fn is_empty(&Self, &dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":50556,"byte_end":50595,"line_start":163,"line_end":163,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51405,"byte_end":51421,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<IndexedMap>::prefix_range_raw","value":"pub fn prefix_range_raw<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`\n itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":50980,"byte_end":51071,"line_start":179,"line_end":179,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51076,"byte_end":51176,"line_start":180,"line_end":180,"column_start":5,"column_end":105}},{"value":"/ itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51181,"byte_end":51274,"line_start":181,"line_end":181,"column_start":5,"column_end":98}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51279,"byte_end":51373,"line_start":182,"line_end":182,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51378,"byte_end":51393,"line_start":183,"line_end":183,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52063,"byte_end":52073,"line_start":208,"line_end":208,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<IndexedMap>::sub_prefix","value":"pub fn sub_prefix(&Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52215,"byte_end":52221,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IndexedMap>::prefix","value":"pub fn prefix(&Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52955,"byte_end":52967,"line_start":230,"line_end":230,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<IndexedMap>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52530,"byte_end":52617,"line_start":224,"line_end":224,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52622,"byte_end":52709,"line_start":225,"line_end":225,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52714,"byte_end":52800,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52805,"byte_end":52824,"line_start":227,"line_end":227,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52829,"byte_end":52923,"line_start":228,"line_end":228,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52928,"byte_end":52943,"line_start":229,"line_end":229,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":53483,"byte_end":53492,"line_start":248,"line_end":248,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<IndexedMap>::range_raw","value":"pub fn range_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":53838,"byte_end":53846,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<IndexedMap>::keys_raw","value":"pub fn keys_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":54135,"byte_end":54140,"line_start":271,"line_end":271,"column_start":12,"column_end":17},"name":"range","qualname":"<IndexedMap>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":54497,"byte_end":54501,"line_start":285,"line_end":285,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexedMap>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":507},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99377,"byte_end":99395,"line_start":17,"line_end":17,"column_start":12,"column_end":30},"name":"IndexedSnapshotMap","qualname":"::indexed_snapshot::IndexedSnapshotMap","value":"IndexedSnapshotMap { idx }","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":" `IndexedSnapshotMap` works like a `SnapshotMap` but has a secondary index\n","sig":null,"attributes":[{"value":"/ `IndexedSnapshotMap` works like a `SnapshotMap` but has a secondary index","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99288,"byte_end":99365,"line_start":16,"line_end":16,"column_start":1,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":514},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99589,"byte_end":99592,"line_start":22,"line_end":22,"column_start":9,"column_end":12},"name":"idx","qualname":"::indexed_snapshot::IndexedSnapshotMap::idx","value":"I","parent":{"krate":0,"index":507},"children":[],"decl_id":null,"docs":" This is meant to be read directly to get the proper types, like:\n map.idx.owner.items(...)\n","sig":null,"attributes":[{"value":"/ This is meant to be read directly to get the proper types, like:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99479,"byte_end":99547,"line_start":20,"line_end":20,"column_start":5,"column_end":73}},{"value":"/ map.idx.owner.items(...)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99552,"byte_end":99580,"line_start":21,"line_end":21,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100227,"byte_end":100230,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<IndexedSnapshotMap>::new","value":"pub fn new(&'a str, &'a str, &'a str, Strategy, I) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Examples:","sig":null,"attributes":[{"value":"/ Examples:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99656,"byte_end":99669,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99674,"byte_end":99677,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99682,"byte_end":99693,"line_start":28,"line_end":28,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{IndexedSnapshotMap, Strategy, UniqueIndex};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99698,"byte_end":99767,"line_start":29,"line_end":29,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99772,"byte_end":99775,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ #[derive(PartialEq, Debug, Clone)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99780,"byte_end":99818,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/ struct Data {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99823,"byte_end":99840,"line_start":32,"line_end":32,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99845,"byte_end":99870,"line_start":33,"line_end":33,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99875,"byte_end":99896,"line_start":34,"line_end":34,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99901,"byte_end":99906,"line_start":35,"line_end":35,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99911,"byte_end":99914,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ let indexes = UniqueIndex::new(|d: &Data| d.age, \"data__age\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99919,"byte_end":99985,"line_start":37,"line_end":37,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99990,"byte_end":99993,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ IndexedSnapshotMap::<&[u8], Data, UniqueIndex<u32, Data>>::new(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99998,"byte_end":100065,"line_start":39,"line_end":39,"column_start":5,"column_end":72}},{"value":"/     \"data\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100070,"byte_end":100085,"line_start":40,"line_end":40,"column_start":5,"column_end":20}},{"value":"/     \"checkpoints\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100090,"byte_end":100112,"line_start":41,"line_end":41,"column_start":5,"column_end":27}},{"value":"/     \"changelog\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100117,"byte_end":100137,"line_start":42,"line_end":42,"column_start":5,"column_end":25}},{"value":"/     Strategy::EveryBlock,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100142,"byte_end":100171,"line_start":43,"line_end":43,"column_start":5,"column_end":34}},{"value":"/     indexes,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100176,"byte_end":100192,"line_start":44,"line_end":44,"column_start":5,"column_end":21}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100197,"byte_end":100203,"line_start":45,"line_end":45,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100208,"byte_end":100215,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100606,"byte_end":100615,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"changelog","qualname":"<IndexedSnapshotMap>::changelog","value":"pub fn changelog(&Self) -> &Map","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100893,"byte_end":100907,"line_start":72,"line_end":72,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<IndexedSnapshotMap>::add_checkpoint","value":"pub fn add_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101041,"byte_end":101058,"line_start":76,"line_end":76,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<IndexedSnapshotMap>::remove_checkpoint","value":"pub fn remove_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101195,"byte_end":101213,"line_start":80,"line_end":80,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<IndexedSnapshotMap>::may_load_at_height","value":"pub fn may_load_at_height(&Self, &dyn Storage, K, u64) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101402,"byte_end":101421,"line_start":89,"line_end":89,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<IndexedSnapshotMap>::assert_checkpointed","value":"pub fn assert_checkpointed(&Self, &dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101556,"byte_end":101559,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"key","qualname":"<IndexedSnapshotMap>::key","value":"pub fn key(&Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102077,"byte_end":102081,"line_start":107,"line_end":107,"column_start":12,"column_end":16},"name":"save","qualname":"<IndexedSnapshotMap>::save","value":"pub fn save(&Self, &mut dyn Storage, K, &T, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues.\n this must load the old value to update the indexes properly\n if you loaded the old value earlier in the same function, use replace to avoid needless db reads\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101806,"byte_end":101892,"line_start":104,"line_end":104,"column_start":5,"column_end":91}},{"value":"/ this must load the old value to update the indexes properly","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101897,"byte_end":101960,"line_start":105,"line_end":105,"column_start":5,"column_end":68}},{"value":"/ if you loaded the old value earlier in the same function, use replace to avoid needless db reads","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101965,"byte_end":102065,"line_start":106,"line_end":106,"column_start":5,"column_end":105}}]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102313,"byte_end":102319,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexedSnapshotMap>::remove","value":"pub fn remove(&Self, &mut dyn Storage, K, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102787,"byte_end":102794,"line_start":120,"line_end":120,"column_start":12,"column_end":19},"name":"replace","qualname":"<IndexedSnapshotMap>::replace","value":"pub fn replace(&Self, &mut dyn Storage, K, Option<&T>, Option<&T>, u64)\n-> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" replace writes data to key. old_data must be the current stored value (from a previous load)\n and is used to properly update the index. This is used by save, replace, and update\n and can be called directly if you want to optimize\n","sig":null,"attributes":[{"value":"/ replace writes data to key. old_data must be the current stored value (from a previous load)","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102528,"byte_end":102624,"line_start":117,"line_end":117,"column_start":5,"column_end":101}},{"value":"/ and is used to properly update the index. This is used by save, replace, and update","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102629,"byte_end":102716,"line_start":118,"line_end":118,"column_start":5,"column_end":92}},{"value":"/ and can be called directly if you want to optimize","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":102721,"byte_end":102775,"line_start":119,"line_end":119,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":103822,"byte_end":103828,"line_start":150,"line_end":150,"column_start":12,"column_end":18},"name":"update","qualname":"<IndexedSnapshotMap>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, K, u64, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":103544,"byte_end":103614,"line_start":146,"line_end":146,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":103619,"byte_end":103705,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":103710,"byte_end":103713,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":103718,"byte_end":103810,"line_start":149,"line_end":149,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104531,"byte_end":104535,"line_start":172,"line_end":172,"column_start":12,"column_end":16},"name":"load","qualname":"<IndexedSnapshotMap>::load","value":"pub fn load(&Self, &dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104436,"byte_end":104519,"line_start":171,"line_end":171,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104791,"byte_end":104799,"line_start":178,"line_end":178,"column_start":12,"column_end":20},"name":"may_load","qualname":"<IndexedSnapshotMap>::may_load","value":"pub fn may_load(&Self, &dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104639,"byte_end":104736,"line_start":176,"line_end":176,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104741,"byte_end":104779,"line_start":177,"line_end":177,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":104960,"byte_end":104973,"line_start":183,"line_end":183,"column_start":12,"column_end":25},"name":"no_prefix_raw","qualname":"<IndexedSnapshotMap>::no_prefix_raw","value":"pub fn no_prefix_raw(&Self) -> Prefix<Vec<u8>, T, K>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":105466,"byte_end":105475,"line_start":197,"line_end":197,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<IndexedSnapshotMap>::range_raw","value":"pub fn range_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":105821,"byte_end":105829,"line_start":210,"line_end":210,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<IndexedSnapshotMap>::keys_raw","value":"pub fn keys_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106296,"byte_end":106306,"line_start":228,"line_end":228,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<IndexedSnapshotMap>::sub_prefix","value":"pub fn sub_prefix(&Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106448,"byte_end":106454,"line_start":232,"line_end":232,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IndexedSnapshotMap>::prefix","value":"pub fn prefix(&Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":107196,"byte_end":107208,"line_start":250,"line_end":250,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<IndexedSnapshotMap>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106771,"byte_end":106858,"line_start":244,"line_end":244,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106863,"byte_end":106950,"line_start":245,"line_end":245,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106955,"byte_end":107041,"line_start":246,"line_end":246,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":107046,"byte_end":107065,"line_start":247,"line_end":247,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":107070,"byte_end":107164,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":107169,"byte_end":107184,"line_start":249,"line_end":249,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":107724,"byte_end":107729,"line_start":268,"line_end":268,"column_start":12,"column_end":17},"name":"range","qualname":"<IndexedSnapshotMap>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":108086,"byte_end":108090,"line_start":282,"line_end":282,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexedSnapshotMap>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":638},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138446,"byte_end":138456,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"MultiIndex","qualname":"::indexes::multi::MultiIndex","value":"MultiIndex {  }","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" MultiIndex stores (namespace, index_name, idx_value, pk) -> b\"pk_len\".\n Allows many values per index, and references pk.\n The associated primary key value is stored in the main (pk_namespace) map,\n which stores (namespace, pk_namespace, pk) -> value.","sig":null,"attributes":[{"value":"/ MultiIndex stores (namespace, index_name, idx_value, pk) -> b\"pk_len\".","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":137780,"byte_end":137854,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ Allows many values per index, and references pk.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":137855,"byte_end":137907,"line_start":19,"line_end":19,"column_start":1,"column_end":53}},{"value":"/ The associated primary key value is stored in the main (pk_namespace) map,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":137908,"byte_end":137986,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ which stores (namespace, pk_namespace, pk) -> value.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":137987,"byte_end":138043,"line_start":21,"line_end":21,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138044,"byte_end":138047,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The stored pk_len is used to recover the pk from the index namespace, and perform","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138048,"byte_end":138133,"line_start":23,"line_end":23,"column_start":1,"column_end":86}},{"value":"/ the secondary load of the associated value from the main map.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138134,"byte_end":138199,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138200,"byte_end":138203,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The PK type defines the type of Primary Key, both for deserialization, and","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138204,"byte_end":138282,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ more important, as the type-safe bound key type.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138283,"byte_end":138335,"line_start":27,"line_end":27,"column_start":1,"column_end":53}},{"value":"/ This type must match the encompassing `IndexedMap` primary key type,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138336,"byte_end":138408,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/ or its owned variant.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138409,"byte_end":138434,"line_start":29,"line_end":29,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139537,"byte_end":139540,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiIndex>::new","value":"pub fn new(fn(: &[u8], : &T) -> IK, &'a str, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new MultiIndex","sig":null,"attributes":[{"value":"/ Create a new MultiIndex","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138871,"byte_end":138898,"line_start":44,"line_end":44,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138903,"byte_end":138906,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ idx_fn - lambda creating index key from value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138911,"byte_end":138960,"line_start":46,"line_end":46,"column_start":5,"column_end":54}},{"value":"/ pk_namespace - prefix for the primary key","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138965,"byte_end":139010,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ idx_namespace - prefix for the index value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139015,"byte_end":139061,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139066,"byte_end":139069,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ## Example:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139074,"byte_end":139089,"line_start":50,"line_end":50,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139094,"byte_end":139097,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139102,"byte_end":139113,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::MultiIndex;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139118,"byte_end":139154,"line_start":53,"line_end":53,"column_start":5,"column_end":41}},{"value":"/ use serde::{Deserialize, Serialize};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139159,"byte_end":139199,"line_start":54,"line_end":54,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139204,"byte_end":139207,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize, Serialize, Clone)]","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139212,"byte_end":139256,"line_start":56,"line_end":56,"column_start":5,"column_end":49}},{"value":"/ struct Data {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139261,"byte_end":139278,"line_start":57,"line_end":57,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139283,"byte_end":139308,"line_start":58,"line_end":58,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139313,"byte_end":139334,"line_start":59,"line_end":59,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139339,"byte_end":139344,"line_start":60,"line_end":60,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139349,"byte_end":139352,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let index: MultiIndex<_, _, String> = MultiIndex::new(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139357,"byte_end":139415,"line_start":62,"line_end":62,"column_start":5,"column_end":63}},{"value":"/     |_pk: &[u8], d: &Data| d.age,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139420,"byte_end":139457,"line_start":63,"line_end":63,"column_start":5,"column_end":42}},{"value":"/     \"age\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139462,"byte_end":139476,"line_start":64,"line_end":64,"column_start":5,"column_end":19}},{"value":"/     \"age__owner\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139481,"byte_end":139502,"line_start":65,"line_end":65,"column_start":5,"column_end":26}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139507,"byte_end":139513,"line_start":66,"line_end":66,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":139518,"byte_end":139525,"line_start":67,"line_end":67,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":142331,"byte_end":142340,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"index_key","qualname":"<MultiIndex>::index_key","value":"pub fn index_key(&Self, IK) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":685},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":143516,"byte_end":143525,"line_start":203,"line_end":203,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<MultiIndex>::range_raw","value":"pub fn range_raw<'c>(&'c Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":143860,"byte_end":143868,"line_start":216,"line_end":216,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<MultiIndex>::keys_raw","value":"pub fn keys_raw<'c>(&'c Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144586,"byte_end":144602,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<MultiIndex>::prefix_range_raw","value":"pub fn prefix_range_raw<'c>(&'c Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144153,"byte_end":144244,"line_start":226,"line_end":226,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144249,"byte_end":144340,"line_start":227,"line_end":227,"column_start":5,"column_end":96}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144345,"byte_end":144431,"line_start":228,"line_end":228,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144436,"byte_end":144455,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144460,"byte_end":144554,"line_start":230,"line_end":230,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":144559,"byte_end":144574,"line_start":231,"line_end":231,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145323,"byte_end":145329,"line_start":256,"line_end":256,"column_start":12,"column_end":18},"name":"prefix","qualname":"<MultiIndex>::prefix","value":"pub fn prefix(&Self, IK) -> Prefix<PK, T, PK>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145607,"byte_end":145617,"line_start":266,"line_end":266,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<MultiIndex>::sub_prefix","value":"pub fn sub_prefix(&Self, IK::Prefix) -> Prefix<PK, T, (IK::Suffix, PK)>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146562,"byte_end":146574,"line_start":290,"line_end":290,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<MultiIndex>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\n'a:'c, IK: 'c, PK: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146137,"byte_end":146224,"line_start":284,"line_end":284,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146229,"byte_end":146316,"line_start":285,"line_end":285,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146321,"byte_end":146407,"line_start":286,"line_end":286,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146412,"byte_end":146431,"line_start":287,"line_end":287,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146436,"byte_end":146530,"line_start":288,"line_end":288,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":146535,"byte_end":146550,"line_start":289,"line_end":289,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":147097,"byte_end":147102,"line_start":309,"line_end":309,"column_start":12,"column_end":17},"name":"range","qualname":"<MultiIndex>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\nPK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":147475,"byte_end":147479,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"keys","qualname":"<MultiIndex>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<PK::Output>> + 'c>\nwhere T: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149120,"byte_end":149131,"line_start":29,"line_end":29,"column_start":12,"column_end":23},"name":"UniqueIndex","qualname":"::indexes::unique::UniqueIndex","value":"UniqueIndex {  }","parent":null,"children":[{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786}],"decl_id":null,"docs":" UniqueIndex stores (namespace, index_name, idx_value) -> {key, value}\n Allows one value per index (i.e. unique) and copies pk and data\n The optional PK type defines the type of Primary Key deserialization.\n","sig":null,"attributes":[{"value":"/ UniqueIndex stores (namespace, index_name, idx_value) -> {key, value}","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":148893,"byte_end":148966,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ Allows one value per index (i.e. unique) and copies pk and data","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":148967,"byte_end":149034,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ The optional PK type defines the type of Primary Key deserialization.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149035,"byte_end":149108,"line_start":28,"line_end":28,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149806,"byte_end":149809,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"new","qualname":"<UniqueIndex>::new","value":"pub fn new(fn(: &T) -> IK, &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new UniqueIndex","sig":null,"attributes":[{"value":"/ Create a new UniqueIndex","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149368,"byte_end":149396,"line_start":38,"line_end":38,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149401,"byte_end":149404,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ idx_fn - lambda creating index key from index value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149409,"byte_end":149464,"line_start":40,"line_end":40,"column_start":5,"column_end":60}},{"value":"/ idx_namespace - prefix for the index value","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149469,"byte_end":149515,"line_start":41,"line_end":41,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149520,"byte_end":149523,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ## Example:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149528,"byte_end":149543,"line_start":43,"line_end":43,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149548,"byte_end":149551,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149556,"byte_end":149567,"line_start":45,"line_end":45,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::UniqueIndex;","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149572,"byte_end":149609,"line_start":46,"line_end":46,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149614,"byte_end":149617,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ struct Data {","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149622,"byte_end":149639,"line_start":48,"line_end":48,"column_start":5,"column_end":22}},{"value":"/     pub name: String,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149644,"byte_end":149669,"line_start":49,"line_end":49,"column_start":5,"column_end":30}},{"value":"/     pub age: u32,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149674,"byte_end":149695,"line_start":50,"line_end":50,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149700,"byte_end":149705,"line_start":51,"line_end":51,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149710,"byte_end":149713,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ UniqueIndex::<_, _, ()>::new(|d: &Data| d.age, \"data__age\");","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149718,"byte_end":149782,"line_start":53,"line_end":53,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149787,"byte_end":149794,"line_start":54,"line_end":54,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":811},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":151527,"byte_end":151536,"line_start":112,"line_end":112,"column_start":12,"column_end":21},"name":"index_key","qualname":"<UniqueIndex>::index_key","value":"pub fn index_key(&Self, IK) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":815},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":151972,"byte_end":151976,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"item","qualname":"<UniqueIndex>::item","value":"pub fn item(&Self, &dyn Storage, IK) -> StdResult<Option<Record<T>>>","parent":null,"children":[],"decl_id":null,"docs":" returns all items that match this secondary index, always by pk Ascending\n","sig":null,"attributes":[{"value":"/ returns all items that match this secondary index, always by pk Ascending","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":151883,"byte_end":151960,"line_start":126,"line_end":126,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":152550,"byte_end":152559,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<UniqueIndex>::range_raw","value":"pub fn range_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":152879,"byte_end":152887,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<UniqueIndex>::keys_raw","value":"pub fn keys_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = Vec<u8>> + 'c>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153778,"byte_end":153790,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<UniqueIndex>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\n'a:'c, IK: 'c, PK: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153353,"byte_end":153440,"line_start":175,"line_end":175,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153445,"byte_end":153532,"line_start":176,"line_end":176,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153537,"byte_end":153623,"line_start":177,"line_end":177,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153628,"byte_end":153647,"line_start":178,"line_end":178,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153652,"byte_end":153746,"line_start":179,"line_end":179,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153751,"byte_end":153766,"line_start":180,"line_end":180,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":833},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":154329,"byte_end":154334,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"range","qualname":"<UniqueIndex>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(PK::Output, T)>> + 'c> where T: 'c,\nPK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":154695,"byte_end":154699,"line_start":214,"line_end":214,"column_start":12,"column_end":16},"name":"keys","qualname":"<UniqueIndex>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<PK::Output>> + 'c>\nwhere T: 'c, PK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":155054,"byte_end":155060,"line_start":228,"line_end":228,"column_start":12,"column_end":18},"name":"prefix","qualname":"<UniqueIndex>::prefix","value":"pub fn prefix(&Self, IK::Prefix) -> Prefix<PK, T, IK::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":155372,"byte_end":155382,"line_start":238,"line_end":238,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<UniqueIndex>::sub_prefix","value":"pub fn sub_prefix(&Self, IK::SubPrefix) -> Prefix<PK, T, IK::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":865},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/mod.rs","byte_start":136664,"byte_end":136669,"line_start":16,"line_end":16,"column_start":11,"column_end":16},"name":"Index","qualname":"::indexes::Index","value":"Index<T>","parent":null,"children":[{"krate":0,"index":867},{"krate":0,"index":868}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/mod.rs","byte_start":136733,"byte_end":136737,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"save","qualname":"::indexes::Index::save","value":"pub fn save(&Self, &mut dyn Storage, &[u8], &T) -> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/mod.rs","byte_start":136816,"byte_end":136822,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"remove","qualname":"::indexes::Index::remove","value":"pub fn remove(&Self, &mut dyn Storage, &[u8], &T) -> StdResult<()>","parent":{"krate":0,"index":865},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":873},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156249,"byte_end":156255,"line_start":7,"line_end":7,"column_start":11,"column_end":17},"name":"IntKey","qualname":"::int_key::IntKey","value":"IntKey: Sized + Copy","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876}],"decl_id":null,"docs":" Our int keys are simply the big-endian representation bytes for unsigned ints,\n but \"sign-flipped\" (xored msb) big-endian bytes for signed ints.","sig":null,"attributes":[{"value":"/ Our int keys are simply the big-endian representation bytes for unsigned ints,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":155994,"byte_end":156076,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ but \"sign-flipped\" (xored msb) big-endian bytes for signed ints.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156077,"byte_end":156145,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156146,"byte_end":156149,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ So that the representation of signed integers is in the right lexicographical order.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156150,"byte_end":156238,"line_start":6,"line_end":6,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":874},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156281,"byte_end":156284,"line_start":8,"line_end":8,"column_start":10,"column_end":13},"name":"Buf","qualname":"::int_key::IntKey::Buf","value":"type Buf: AsRef<[u8]> + AsMut<[u8]> + Into<Vec<u8>> + Default;","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156347,"byte_end":156358,"line_start":10,"line_end":10,"column_start":8,"column_end":19},"name":"to_cw_bytes","qualname":"::int_key::IntKey::to_cw_bytes","value":"pub fn to_cw_bytes(&Self) -> Self::Buf","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156387,"byte_end":156400,"line_start":11,"line_end":11,"column_start":8,"column_end":21},"name":"from_cw_bytes","qualname":"::int_key::IntKey::from_cw_bytes","value":"pub fn from_cw_bytes(Self::Buf) -> Self","parent":{"krate":0,"index":873},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160152,"byte_end":160156,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Item","qualname":"::item::Item","value":"Item {  }","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925}],"decl_id":null,"docs":" Item stores one typed item at the given key.\n This is an analog of Singleton.\n It functions the same way as Path does but doesn't use a Vec and thus has a const fn constructor.\n","sig":null,"attributes":[{"value":"/ Item stores one typed item at the given key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":159954,"byte_end":160002,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ This is an analog of Singleton.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160003,"byte_end":160038,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/ It functions the same way as Path does but doesn't use a Vec and thus has a const fn constructor.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160039,"byte_end":160140,"line_start":13,"line_end":13,"column_start":1,"column_end":102}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160466,"byte_end":160469,"line_start":22,"line_end":22,"column_start":18,"column_end":21},"name":"new","qualname":"<Item>::new","value":"pub const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160756,"byte_end":160764,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Item>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160916,"byte_end":160920,"line_start":40,"line_end":40,"column_start":12,"column_end":16},"name":"save","qualname":"<Item>::save","value":"pub fn save(&Self, &mut dyn Storage, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160819,"byte_end":160904,"line_start":39,"line_end":39,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161068,"byte_end":161074,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"remove","qualname":"<Item>::remove","value":"pub fn remove(&Self, &mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161255,"byte_end":161259,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"load","qualname":"<Item>::load","value":"pub fn load(&Self, &dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161160,"byte_end":161243,"line_start":49,"line_end":49,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161553,"byte_end":161561,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Item>::may_load","value":"pub fn may_load(&Self, &dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns `Ok(None)` if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns `Ok(None)` if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161399,"byte_end":161498,"line_start":55,"line_end":55,"column_start":5,"column_end":104}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161503,"byte_end":161541,"line_start":56,"line_end":56,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162015,"byte_end":162021,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"update","qualname":"<Item>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, A) -> Result<T, E> where\nA: FnOnce(T) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161708,"byte_end":161778,"line_start":62,"line_end":62,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161783,"byte_end":161869,"line_start":63,"line_end":63,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161874,"byte_end":161877,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ It assumes, that data was initialized before, and if it doesn't exist, `Err(StdError::NotFound)`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161882,"byte_end":161982,"line_start":65,"line_end":65,"column_start":5,"column_end":105}},{"value":"/ is returned.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":161987,"byte_end":162003,"line_start":66,"line_end":66,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162581,"byte_end":162586,"line_start":82,"line_end":82,"column_start":12,"column_end":17},"name":"query","qualname":"<Item>::query","value":"pub fn query<Q: CustomQuery>(&Self, &QuerierWrapper<, Q>, Addr)\n-> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" If you import the proper Item from the remote contract, this will let you read the data\n from a remote contract in a type-safe way using WasmQuery::RawQuery.","sig":null,"attributes":[{"value":"/ If you import the proper Item from the remote contract, this will let you read the data","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162310,"byte_end":162401,"line_start":78,"line_end":78,"column_start":5,"column_end":96}},{"value":"/ from a remote contract in a type-safe way using WasmQuery::RawQuery.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162406,"byte_end":162478,"line_start":79,"line_end":79,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162483,"byte_end":162486,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that we expect an Item to be set, and error if there is no data there","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":162491,"byte_end":162569,"line_start":81,"line_end":81,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177356,"byte_end":177359,"line_start":9,"line_end":9,"column_start":5,"column_end":8},"name":"Ref","qualname":"::keys::Key::Ref","value":"Key::Ref(&'a [u8])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177375,"byte_end":177379,"line_start":10,"line_end":10,"column_start":5,"column_end":9},"name":"Val8","qualname":"::keys::Key::Val8","value":"Key::Val8([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2061},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177394,"byte_end":177399,"line_start":11,"line_end":11,"column_start":5,"column_end":10},"name":"Val16","qualname":"::keys::Key::Val16","value":"Key::Val16([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2065},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177414,"byte_end":177419,"line_start":12,"line_end":12,"column_start":5,"column_end":10},"name":"Val32","qualname":"::keys::Key::Val32","value":"Key::Val32([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2069},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177434,"byte_end":177439,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Val64","qualname":"::keys::Key::Val64","value":"Key::Val64([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177454,"byte_end":177460,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Val128","qualname":"::keys::Key::Val128","value":"Key::Val128([u8; ])","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2052},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177342,"byte_end":177345,"line_start":8,"line_end":8,"column_start":10,"column_end":13},"name":"Key","qualname":"::keys::Key","value":"pub enum Key<'a> {\n    Ref(&'a [u8]),\n    Val8([u8; ]),\n    Val16([u8; ]),\n    Val32([u8; ]),\n    Val64([u8; ]),\n    Val128([u8; ]),\n}","parent":null,"children":[{"krate":0,"index":2054},{"krate":0,"index":2057},{"krate":0,"index":2061},{"krate":0,"index":2065},{"krate":0,"index":2069},{"krate":0,"index":2073}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":990},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178709,"byte_end":178719,"line_start":55,"line_end":55,"column_start":11,"column_end":21},"name":"PrimaryKey","qualname":"::keys::PrimaryKey","value":"PrimaryKey<'a>: Clone","parent":null,"children":[{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"decl_id":null,"docs":" `PrimaryKey` needs to be implemented for types that want to be a `Map` (or `Map`-like) key,\n or part of a key.","sig":null,"attributes":[{"value":"/ `PrimaryKey` needs to be implemented for types that want to be a `Map` (or `Map`-like) key,","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177895,"byte_end":177990,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/ or part of a key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177991,"byte_end":178012,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178013,"byte_end":178016,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ In particular, it defines a series of types that help iterating over parts of a (composite) key:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178017,"byte_end":178117,"line_start":39,"line_end":39,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178118,"byte_end":178121,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `Prefix`: Prefix is eager. That is, except for empty keys, it's always \"one less\" than the full key.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178122,"byte_end":178226,"line_start":41,"line_end":41,"column_start":1,"column_end":105}},{"value":"/ `Suffix`: Suffix is the complement of prefix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178227,"byte_end":178276,"line_start":42,"line_end":42,"column_start":1,"column_end":50}},{"value":"/ `SubPrefix`: Sub-prefix is \"one less\" than prefix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178277,"byte_end":178331,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/ `SuperSuffix`: Super-suffix is \"one more\" than suffix. The complement of sub-prefix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178332,"byte_end":178420,"line_start":44,"line_end":44,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178421,"byte_end":178424,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ By example, for a 2-tuple `(T, U)`:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178425,"byte_end":178464,"line_start":46,"line_end":46,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178465,"byte_end":178468,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ `T`: Prefix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178469,"byte_end":178485,"line_start":48,"line_end":48,"column_start":1,"column_end":17}},{"value":"/ `U`: Suffix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178486,"byte_end":178502,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"/ `()`: Sub-prefix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178503,"byte_end":178524,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/ `(T, U)`: Super-suffix.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178525,"byte_end":178552,"line_start":51,"line_end":51,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178553,"byte_end":178556,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ `SubPrefix` and `SuperSuffix` only make real sense in the case of triples. Still, they need to be","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178557,"byte_end":178658,"line_start":53,"line_end":53,"column_start":1,"column_end":102}},{"value":"/ consistently defined for all types.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178659,"byte_end":178698,"line_start":54,"line_end":54,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":992},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178919,"byte_end":178925,"line_start":58,"line_end":58,"column_start":10,"column_end":16},"name":"Prefix","qualname":"::keys::PrimaryKey::Prefix","value":"type Prefix: Prefixer<'a>;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" These associated types need to implement `Prefixer`, so that they can be useful arguments\n for `prefix()`, `sub_prefix()`, and their key-deserializable variants.\n","sig":null,"attributes":[{"value":"/ These associated types need to implement `Prefixer`, so that they can be useful arguments","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178737,"byte_end":178830,"line_start":56,"line_end":56,"column_start":5,"column_end":98}},{"value":"/ for `prefix()`, `sub_prefix()`, and their key-deserializable variants.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178835,"byte_end":178909,"line_start":57,"line_end":57,"column_start":5,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":993},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178950,"byte_end":178959,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"name":"SubPrefix","qualname":"::keys::PrimaryKey::SubPrefix","value":"type SubPrefix: Prefixer<'a>;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":994},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179120,"byte_end":179126,"line_start":63,"line_end":63,"column_start":10,"column_end":16},"name":"Suffix","qualname":"::keys::PrimaryKey::Suffix","value":"type Suffix: KeyDeserialize;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" These associated types need to implement `KeyDeserialize`, so that they can be returned from\n `range_de()` and friends.\n","sig":null,"attributes":[{"value":"/ These associated types need to implement `KeyDeserialize`, so that they can be returned from","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178980,"byte_end":179076,"line_start":61,"line_end":61,"column_start":5,"column_end":101}},{"value":"/ `range_de()` and friends.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179081,"byte_end":179110,"line_start":62,"line_end":62,"column_start":5,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":995},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179153,"byte_end":179164,"line_start":64,"line_end":64,"column_start":10,"column_end":21},"name":"SuperSuffix","qualname":"::keys::PrimaryKey::SuperSuffix","value":"type SuperSuffix: KeyDeserialize;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179261,"byte_end":179264,"line_start":67,"line_end":67,"column_start":8,"column_end":11},"name":"key","qualname":"::keys::PrimaryKey::key","value":"pub fn key(&Self) -> Vec<Key>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" returns a slice of key steps, which can be optionally combined\n","sig":null,"attributes":[{"value":"/ returns a slice of key steps, which can be optionally combined","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179187,"byte_end":179253,"line_start":66,"line_end":66,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179293,"byte_end":179303,"line_start":69,"line_end":69,"column_start":8,"column_end":18},"name":"joined_key","qualname":"::keys::PrimaryKey::joined_key","value":"pub fn joined_key(&Self) -> Vec<u8>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":179543,"byte_end":179559,"line_start":78,"line_end":78,"column_start":8,"column_end":24},"name":"joined_extra_key","qualname":"::keys::PrimaryKey::joined_extra_key","value":"pub fn joined_extra_key(&Self, &[u8]) -> Vec<u8>","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":181513,"byte_end":181521,"line_start":158,"line_end":158,"column_start":11,"column_end":19},"name":"Prefixer","qualname":"::keys::Prefixer","value":"Prefixer<'a>","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":181639,"byte_end":181645,"line_start":160,"line_end":160,"column_start":8,"column_end":14},"name":"prefix","qualname":"::keys::Prefixer::prefix","value":"pub fn prefix(&Self) -> Vec<Key>","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":" returns 0 or more namespaces that should be length-prefixed and concatenated for range searches\n","sig":null,"attributes":[{"value":"/ returns 0 or more namespaces that should be length-prefixed and concatenated for range searches","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":181532,"byte_end":181631,"line_start":159,"line_end":159,"column_start":5,"column_end":104}}]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":181674,"byte_end":181687,"line_start":162,"line_end":162,"column_start":8,"column_end":21},"name":"joined_prefix","qualname":"::keys::Prefixer::joined_prefix","value":"pub fn joined_prefix(&Self) -> Vec<u8>","parent":{"krate":0,"index":1039},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2180},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192235,"byte_end":192238,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"Map","qualname":"::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192506,"byte_end":192509,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<Map>::new","value":"pub const fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192698,"byte_end":192707,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"namespace","qualname":"<Map>::namespace","value":"pub fn namespace(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192869,"byte_end":192872,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"key","qualname":"<Map>::key","value":"pub fn key(&Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193187,"byte_end":193191,"line_start":59,"line_end":59,"column_start":12,"column_end":16},"name":"save","qualname":"<Map>::save","value":"pub fn save(&Self, &mut dyn Storage, K, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193315,"byte_end":193321,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"remove","qualname":"<Map>::remove","value":"pub fn remove(&Self, &mut dyn Storage, K)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193502,"byte_end":193506,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"load","qualname":"<Map>::load","value":"pub fn load(&Self, &dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193407,"byte_end":193490,"line_start":67,"line_end":67,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193754,"byte_end":193762,"line_start":74,"line_end":74,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Map>::may_load","value":"pub fn may_load(&Self, &dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193602,"byte_end":193699,"line_start":72,"line_end":72,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193704,"byte_end":193742,"line_start":73,"line_end":73,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193993,"byte_end":193996,"line_start":80,"line_end":80,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"pub fn has(&Self, &dyn Storage, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" has returns true or false if any data is at this key, without parsing or interpreting the\n contents.\n","sig":null,"attributes":[{"value":"/ has returns true or false if any data is at this key, without parsing or interpreting the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193870,"byte_end":193963,"line_start":78,"line_end":78,"column_start":5,"column_end":98}},{"value":"/ contents.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":193968,"byte_end":193981,"line_start":79,"line_end":79,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194361,"byte_end":194367,"line_start":88,"line_end":88,"column_start":12,"column_end":18},"name":"update","qualname":"<Map>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, K, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194083,"byte_end":194153,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194158,"byte_end":194244,"line_start":85,"line_end":85,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194249,"byte_end":194252,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194257,"byte_end":194349,"line_start":87,"line_end":87,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194759,"byte_end":194764,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"query","qualname":"<Map>::query","value":"pub fn query<Q: CustomQuery>(&Self, &QuerierWrapper<, Q>, Addr, K)\n-> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" If you import the proper Map from the remote contract, this will let you read the data\n from a remote contract in a type-safe way using WasmQuery::RawQuery\n","sig":null,"attributes":[{"value":"/ If you import the proper Map from the remote contract, this will let you read the data","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194581,"byte_end":194671,"line_start":96,"line_end":96,"column_start":5,"column_end":95}},{"value":"/ from a remote contract in a type-safe way using WasmQuery::RawQuery","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":194676,"byte_end":194747,"line_start":97,"line_end":97,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1199},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195244,"byte_end":195249,"line_start":115,"line_end":115,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"pub fn clear(&Self, &mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all elements.\n","sig":null,"attributes":[{"value":"/ Clears the map, removing all elements.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195157,"byte_end":195199,"line_start":113,"line_end":113,"column_start":5,"column_end":47}},{"value":"cfg(feature = \"iterator\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195204,"byte_end":195232,"line_start":114,"line_end":114,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1203},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195973,"byte_end":195981,"line_start":136,"line_end":136,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Map>::is_empty","value":"pub fn is_empty(&Self, &dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195889,"byte_end":195928,"line_start":134,"line_end":134,"column_start":5,"column_end":44}},{"value":"cfg(feature = \"iterator\")","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":195933,"byte_end":195961,"line_start":135,"line_end":135,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196311,"byte_end":196321,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<Map>::sub_prefix","value":"pub fn sub_prefix(&Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196460,"byte_end":196466,"line_start":154,"line_end":154,"column_start":12,"column_end":18},"name":"prefix","qualname":"<Map>::prefix","value":"pub fn prefix(&Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197308,"byte_end":197324,"line_start":173,"line_end":173,"column_start":12,"column_end":28},"name":"prefix_range_raw","qualname":"<Map>::prefix_range_raw","value":"pub fn prefix_range_raw<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c, 'a:'c","parent":null,"children":[],"decl_id":null,"docs":" While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`\n itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range_raw` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196883,"byte_end":196974,"line_start":168,"line_end":168,"column_start":5,"column_end":96}},{"value":"/ remaining, `prefix_range_raw` accepts bounds for the lowest and highest elements of the `Prefix`","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196979,"byte_end":197079,"line_start":169,"line_end":169,"column_start":5,"column_end":105}},{"value":"/ itself, and iterates over those (inclusively or exclusively, depending on `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197084,"byte_end":197177,"line_start":170,"line_end":170,"column_start":5,"column_end":98}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197182,"byte_end":197276,"line_start":171,"line_end":171,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197281,"byte_end":197296,"line_start":172,"line_end":172,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198356,"byte_end":198368,"line_start":202,"line_end":202,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<Map>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197931,"byte_end":198018,"line_start":196,"line_end":196,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198023,"byte_end":198110,"line_start":197,"line_end":197,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198115,"byte_end":198201,"line_start":198,"line_end":198,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198206,"byte_end":198225,"line_start":199,"line_end":199,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198230,"byte_end":198324,"line_start":200,"line_end":200,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":198329,"byte_end":198344,"line_start":201,"line_end":201,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199102,"byte_end":199111,"line_start":231,"line_end":231,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<Map>::range_raw","value":"pub fn range_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199457,"byte_end":199465,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<Map>::keys_raw","value":"pub fn keys_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1235},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199928,"byte_end":199933,"line_start":264,"line_end":264,"column_start":12,"column_end":17},"name":"range","qualname":"<Map>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1237},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":200290,"byte_end":200294,"line_start":278,"line_end":278,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2197},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":242785,"byte_end":242789,"line_start":11,"line_end":11,"column_start":12,"column_end":16},"name":"Path","qualname":"::path::Path","value":"Path {  }","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2200}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243318,"byte_end":243321,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"new","qualname":"<Path<T>>::new","value":"pub fn new(&[u8], &[&[u8]]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243872,"byte_end":243876,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"save","qualname":"<Path<T>>::save","value":"pub fn save(&Self, &mut dyn Storage, &T) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":" save will serialize the model and store, returns an error on serialization issues\n","sig":null,"attributes":[{"value":"/ save will serialize the model and store, returns an error on serialization issues","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243775,"byte_end":243860,"line_start":53,"line_end":53,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244025,"byte_end":244031,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"remove","qualname":"<Path<T>>::remove","value":"pub fn remove(&Self, &mut dyn Storage)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244213,"byte_end":244217,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"load","qualname":"<Path<T>>::load","value":"pub fn load(&Self, &dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244118,"byte_end":244201,"line_start":63,"line_end":63,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1289},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244510,"byte_end":244518,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"may_load","qualname":"<Path<T>>::may_load","value":"pub fn may_load(&Self, &dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244358,"byte_end":244455,"line_start":69,"line_end":69,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244460,"byte_end":244498,"line_start":70,"line_end":70,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244885,"byte_end":244888,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"has","qualname":"<Path<T>>::has","value":"pub fn has(&Self, &dyn Storage) -> bool","parent":null,"children":[],"decl_id":null,"docs":" has returns true or false if any data is at this key, without parsing or interpreting the\n contents. It will returns true for an length-0 byte array (Some(b\"\")), if you somehow manage to set that.\n","sig":null,"attributes":[{"value":"/ has returns true or false if any data is at this key, without parsing or interpreting the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244666,"byte_end":244759,"line_start":76,"line_end":76,"column_start":5,"column_end":98}},{"value":"/ contents. It will returns true for an length-0 byte array (Some(b\"\")), if you somehow manage to set that.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244764,"byte_end":244873,"line_start":77,"line_end":77,"column_start":5,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":245263,"byte_end":245269,"line_start":86,"line_end":86,"column_start":12,"column_end":18},"name":"update","qualname":"<Path<T>>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":244985,"byte_end":245055,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":245060,"byte_end":245146,"line_start":83,"line_end":83,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":245151,"byte_end":245154,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":245159,"byte_end":245251,"line_start":85,"line_end":85,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":2207},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":246620,"byte_end":246626,"line_start":38,"line_end":38,"column_start":12,"column_end":18},"name":"Prefix","qualname":"::prefix::Prefix","value":"Prefix {  }","parent":null,"children":[{"krate":0,"index":2211},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247353,"byte_end":247356,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<Prefix<K, T, B>>::new","value":"pub fn new(&[u8], &[Key]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247622,"byte_end":247652,"line_start":79,"line_end":79,"column_start":12,"column_end":42},"name":"with_deserialization_functions","qualname":"<Prefix<K, T, B>>::with_deserialization_functions","value":"pub fn with_deserialization_functions(&[u8], &[Key], &[u8],\nDeserializeKvFn<K, T>, DeserializeVFn<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":248222,"byte_end":248231,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<Prefix<K, T, B>>::range_raw","value":"pub fn range_raw<'a>(&Self, &'a dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = StdResult<Record<T>>> + 'a> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":248851,"byte_end":248859,"line_start":126,"line_end":126,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<Prefix<K, T, B>>::keys_raw","value":"pub fn keys_raw<'a>(&Self, &'a dyn Storage, Option<Bound>, Option<Bound>,\nOrder) -> Box<dyn Iterator<Item = Vec<u8>> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":249331,"byte_end":249336,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"range","qualname":"<Prefix<K, T, B>>::range","value":"pub fn range<'a>(&Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'a> where T: 'a,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":249990,"byte_end":249994,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"keys","qualname":"<Prefix<K, T, B>>::keys","value":"pub fn keys<'a>(&Self, &'a dyn Storage, Option<Bound>, Option<Bound>, Order)\n-> Box<dyn Iterator<Item = StdResult<K::Output>> + 'a> where T: 'a,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":250657,"byte_end":250674,"line_start":193,"line_end":193,"column_start":8,"column_end":25},"name":"range_with_prefix","qualname":"::prefix::range_with_prefix","value":"pub fn range_with_prefix<'a>(&'a dyn Storage, &[u8], Option<RawBound>,\nOption<RawBound>, Order) -> Box<dyn Iterator<Item = Record> + 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1465},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273543,"byte_end":273555,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"SnapshotItem","qualname":"::snapshot::item::SnapshotItem","value":"SnapshotItem {  }","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470}],"decl_id":null,"docs":" Item that maintains a snapshot of one or more checkpoints.\n We can query historical data as well as current state.\n What data is snapshotted depends on the Strategy.\n","sig":null,"attributes":[{"value":"/ Item that maintains a snapshot of one or more checkpoints.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273356,"byte_end":273418,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ We can query historical data as well as current state.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273419,"byte_end":273477,"line_start":10,"line_end":10,"column_start":1,"column_end":59}},{"value":"/ What data is snapshotted depends on the Strategy.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273478,"byte_end":273531,"line_start":11,"line_end":11,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1474},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273987,"byte_end":273990,"line_start":30,"line_end":30,"column_start":18,"column_end":21},"name":"new","qualname":"<SnapshotItem>::new","value":"pub const fn new(&'a str, &'a str, &'a str, Strategy) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Example:","sig":null,"attributes":[{"value":"/ Example:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273702,"byte_end":273714,"line_start":19,"line_end":19,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273719,"byte_end":273722,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273727,"byte_end":273738,"line_start":21,"line_end":21,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{SnapshotItem, Strategy};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273743,"byte_end":273793,"line_start":22,"line_end":22,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273798,"byte_end":273801,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ SnapshotItem::<'static, u64>::new(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273806,"byte_end":273844,"line_start":24,"line_end":24,"column_start":5,"column_end":43}},{"value":"/     \"every\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273849,"byte_end":273865,"line_start":25,"line_end":25,"column_start":5,"column_end":21}},{"value":"/     \"every__check\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273870,"byte_end":273893,"line_start":26,"line_end":26,"column_start":5,"column_end":28}},{"value":"/     \"every__change\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273898,"byte_end":273922,"line_start":27,"line_end":27,"column_start":5,"column_end":29}},{"value":"/     Strategy::EveryBlock);","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273927,"byte_end":273957,"line_start":28,"line_end":28,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273962,"byte_end":273969,"line_start":29,"line_end":29,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":274336,"byte_end":274350,"line_start":43,"line_end":43,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<SnapshotItem>::add_checkpoint","value":"pub fn add_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":274486,"byte_end":274503,"line_start":47,"line_end":47,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<SnapshotItem>::remove_checkpoint","value":"pub fn remove_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":274642,"byte_end":274651,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"changelog","qualname":"<SnapshotItem>::changelog","value":"pub fn changelog(&Self) -> Map<, u64, ChangeSet<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":275384,"byte_end":275388,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"save","qualname":"<SnapshotItem>::save","value":"pub fn save(&Self, &mut dyn Storage, &T, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":275636,"byte_end":275642,"line_start":79,"line_end":79,"column_start":12,"column_end":18},"name":"remove","qualname":"<SnapshotItem>::remove","value":"pub fn remove(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":275963,"byte_end":275967,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"load","qualname":"<SnapshotItem>::load","value":"pub fn load(&Self, &dyn Storage) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":275885,"byte_end":275951,"line_start":87,"line_end":87,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1485},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276199,"byte_end":276207,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"may_load","qualname":"<SnapshotItem>::may_load","value":"pub fn may_load(&Self, &dyn Storage) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored if present, returns Ok(None) if no data there.\n returns an error on parsing issues\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276058,"byte_end":276144,"line_start":92,"line_end":92,"column_start":5,"column_end":91}},{"value":"/ returns an error on parsing issues","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276149,"byte_end":276187,"line_start":93,"line_end":93,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276317,"byte_end":276335,"line_start":98,"line_end":98,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<SnapshotItem>::may_load_at_height","value":"pub fn may_load_at_height(&Self, &dyn Storage, u64) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276745,"byte_end":276764,"line_start":110,"line_end":110,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<SnapshotItem>::assert_checkpointed","value":"pub fn assert_checkpointed(&Self, &dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":277290,"byte_end":277296,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotItem>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, u64, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result in the database.\n This is a shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result in the database.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276894,"byte_end":276981,"line_start":114,"line_end":114,"column_start":5,"column_end":92}},{"value":"/ This is a shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":276986,"byte_end":277057,"line_start":115,"line_end":115,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":277062,"byte_end":277065,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":277070,"byte_end":277162,"line_start":117,"line_end":117,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":277167,"byte_end":277170,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ This is a bit more customized than needed to only read \"old\" value 1 time, not 2 per naive approach","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":277175,"byte_end":277278,"line_start":119,"line_end":119,"column_start":5,"column_end":108}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284591,"byte_end":284602,"line_start":19,"line_end":19,"column_start":12,"column_end":23},"name":"SnapshotMap","qualname":"::snapshot::map::SnapshotMap","value":"SnapshotMap {  }","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1555}],"decl_id":null,"docs":" Map that maintains a snapshots of one or more checkpoints.\n We can query historical data as well as current state.\n What data is snapshotted depends on the Strategy.\n","sig":null,"attributes":[{"value":"/ Map that maintains a snapshots of one or more checkpoints.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284404,"byte_end":284466,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/ We can query historical data as well as current state.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284467,"byte_end":284525,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ What data is snapshotted depends on the Strategy.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284526,"byte_end":284579,"line_start":18,"line_end":18,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285015,"byte_end":285018,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"new","qualname":"<SnapshotMap>::new","value":"pub const fn new(&'a str, &'a str, &'a str, Strategy) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Example:","sig":null,"attributes":[{"value":"/ Example:","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284724,"byte_end":284736,"line_start":25,"line_end":25,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284741,"byte_end":284744,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284749,"byte_end":284760,"line_start":27,"line_end":27,"column_start":5,"column_end":16}},{"value":"/ use cw_storage_plus::{SnapshotMap, Strategy};","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284765,"byte_end":284814,"line_start":28,"line_end":28,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284819,"byte_end":284822,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ SnapshotMap::<&[u8], &str>::new(","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284827,"byte_end":284863,"line_start":30,"line_end":30,"column_start":5,"column_end":41}},{"value":"/     \"never\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284868,"byte_end":284884,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/     \"never__check\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284889,"byte_end":284912,"line_start":32,"line_end":32,"column_start":5,"column_end":28}},{"value":"/     \"never__change\",","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284917,"byte_end":284941,"line_start":33,"line_end":33,"column_start":5,"column_end":29}},{"value":"/     Strategy::EveryBlock","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284946,"byte_end":284974,"line_start":34,"line_end":34,"column_start":5,"column_end":33}},{"value":"/ );","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284979,"byte_end":284985,"line_start":35,"line_end":35,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284990,"byte_end":284997,"line_start":36,"line_end":36,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285300,"byte_end":285309,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"changelog","qualname":"<SnapshotMap>::changelog","value":"pub fn changelog(&Self) -> &Map","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1566},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285537,"byte_end":285551,"line_start":59,"line_end":59,"column_start":12,"column_end":26},"name":"add_checkpoint","qualname":"<SnapshotMap>::add_checkpoint","value":"pub fn add_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285687,"byte_end":285704,"line_start":63,"line_end":63,"column_start":12,"column_end":29},"name":"remove_checkpoint","qualname":"<SnapshotMap>::remove_checkpoint","value":"pub fn remove_checkpoint(&Self, &mut dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285990,"byte_end":285993,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"key","qualname":"<SnapshotMap>::key","value":"pub fn key(&Self, K) -> Path<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":286675,"byte_end":286679,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"save","qualname":"<SnapshotMap>::save","value":"pub fn save(&Self, &mut dyn Storage, K, &T, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":286946,"byte_end":286952,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"remove","qualname":"<SnapshotMap>::remove","value":"pub fn remove(&Self, &mut dyn Storage, K, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287309,"byte_end":287313,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"load","qualname":"<SnapshotMap>::load","value":"pub fn load(&Self, &dyn Storage, K) -> StdResult<T>","parent":null,"children":[],"decl_id":null,"docs":" load will return an error if no data is set at the given key, or on parse error\n","sig":null,"attributes":[{"value":"/ load will return an error if no data is set at the given key, or on parse error","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287214,"byte_end":287297,"line_start":107,"line_end":107,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287565,"byte_end":287573,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"may_load","qualname":"<SnapshotMap>::may_load","value":"pub fn may_load(&Self, &dyn Storage, K) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":" may_load will parse the data stored at the key if present, returns Ok(None) if no data there.\n returns an error on issues parsing\n","sig":null,"attributes":[{"value":"/ may_load will parse the data stored at the key if present, returns Ok(None) if no data there.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287413,"byte_end":287510,"line_start":112,"line_end":112,"column_start":5,"column_end":102}},{"value":"/ returns an error on issues parsing","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287515,"byte_end":287553,"line_start":113,"line_end":113,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":287692,"byte_end":287710,"line_start":118,"line_end":118,"column_start":12,"column_end":30},"name":"may_load_at_height","qualname":"<SnapshotMap>::may_load_at_height","value":"pub fn may_load_at_height(&Self, &dyn Storage, K, u64) -> StdResult<Option<T>>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288117,"byte_end":288136,"line_start":136,"line_end":136,"column_start":12,"column_end":31},"name":"assert_checkpointed","qualname":"<SnapshotMap>::assert_checkpointed","value":"pub fn assert_checkpointed(&Self, &dyn Storage, u64) -> StdResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288660,"byte_end":288666,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotMap>::update","value":"pub fn update<A, E>(&Self, &mut dyn Storage, K, u64, A) -> Result<T, E> where\nA: FnOnce(Option<T>) -> Result<T, E>, E: From<StdError>","parent":null,"children":[],"decl_id":null,"docs":" Loads the data, perform the specified action, and store the result\n in the database. This is shorthand for some common sequences, which may be useful.","sig":null,"attributes":[{"value":"/ Loads the data, perform the specified action, and store the result","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288266,"byte_end":288336,"line_start":140,"line_end":140,"column_start":5,"column_end":75}},{"value":"/ in the database. This is shorthand for some common sequences, which may be useful.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288341,"byte_end":288427,"line_start":141,"line_end":141,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288432,"byte_end":288435,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ If the data exists, `action(Some(value))` is called. Otherwise `action(None)` is called.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288440,"byte_end":288532,"line_start":143,"line_end":143,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288537,"byte_end":288540,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ This is a bit more customized than needed to only read \"old\" value 1 time, not 2 per naive approach","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":288545,"byte_end":288648,"line_start":145,"line_end":145,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":289424,"byte_end":289433,"line_start":172,"line_end":172,"column_start":12,"column_end":21},"name":"range_raw","qualname":"<SnapshotMap>::range_raw","value":"pub fn range_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<cosmwasm_std::Record<T>>> + 'c> where\nT: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1590},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":289779,"byte_end":289787,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"keys_raw","qualname":"<SnapshotMap>::keys_raw","value":"pub fn keys_raw<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = Vec<u8>> + 'c> where T: 'c","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290676,"byte_end":290688,"line_start":211,"line_end":211,"column_start":12,"column_end":24},"name":"prefix_range","qualname":"<SnapshotMap>::prefix_range","value":"pub fn prefix_range<'c>(&Self, &'c dyn Storage, Option<PrefixBound>,\nOption<PrefixBound>, cosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\n'a:'c, K: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":" While `range` over a `prefix` fixes the prefix to one element and iterates over the\n remaining, `prefix_range` accepts bounds for the lowest and highest elements of the\n `Prefix` itself, and iterates over those (inclusively or exclusively, depending on\n `PrefixBound`).\n There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't\n solve them.\n","sig":null,"attributes":[{"value":"/ While `range` over a `prefix` fixes the prefix to one element and iterates over the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290251,"byte_end":290338,"line_start":205,"line_end":205,"column_start":5,"column_end":92}},{"value":"/ remaining, `prefix_range` accepts bounds for the lowest and highest elements of the","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290343,"byte_end":290430,"line_start":206,"line_end":206,"column_start":5,"column_end":92}},{"value":"/ `Prefix` itself, and iterates over those (inclusively or exclusively, depending on","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290435,"byte_end":290521,"line_start":207,"line_end":207,"column_start":5,"column_end":91}},{"value":"/ `PrefixBound`).","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290526,"byte_end":290545,"line_start":208,"line_end":208,"column_start":5,"column_end":24}},{"value":"/ There are some issues that distinguish these two, and blindly casting to `Vec<u8>` doesn't","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290550,"byte_end":290644,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ solve them.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290649,"byte_end":290664,"line_start":210,"line_end":210,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1598},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":291211,"byte_end":291216,"line_start":229,"line_end":229,"column_start":12,"column_end":17},"name":"range","qualname":"<SnapshotMap>::range","value":"pub fn range<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order)\n-> Box<dyn Iterator<Item = StdResult<(K::Output, T)>> + 'c> where T: 'c,\nK::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":291573,"byte_end":291577,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"keys","qualname":"<SnapshotMap>::keys","value":"pub fn keys<'c>(&Self, &'c dyn Storage, Option<Bound>, Option<Bound>,\ncosmwasm_std::Order) -> Box<dyn Iterator<Item = StdResult<K::Output>> + 'c>\nwhere T: 'c, K::Output: 'static","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":291928,"byte_end":291934,"line_start":257,"line_end":257,"column_start":12,"column_end":18},"name":"prefix","qualname":"<SnapshotMap>::prefix","value":"pub fn prefix(&Self, K::Prefix) -> Prefix<K::Suffix, T, K::Suffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":292070,"byte_end":292080,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"sub_prefix","qualname":"<SnapshotMap>::sub_prefix","value":"pub fn sub_prefix(&Self, K::SubPrefix)\n-> Prefix<K::SuperSuffix, T, K::SuperSuffix>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":264856,"byte_end":264866,"line_start":165,"line_end":165,"column_start":5,"column_end":15},"name":"EveryBlock","qualname":"::snapshot::Strategy::EveryBlock","value":"Strategy::EveryBlock","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2241},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":264872,"byte_end":264877,"line_start":166,"line_end":166,"column_start":5,"column_end":10},"name":"Never","qualname":"::snapshot::Strategy::Never","value":"Strategy::Never","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265216,"byte_end":265224,"line_start":172,"line_end":172,"column_start":5,"column_end":13},"name":"Selected","qualname":"::snapshot::Strategy::Selected","value":"Strategy::Selected","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":" Only writes for linked blocks - does a few more reads to save some writes.\n Probably uses more gas, but less total disk usage.","sig":null,"attributes":[{"value":"/ Only writes for linked blocks - does a few more reads to save some writes.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":264883,"byte_end":264961,"line_start":167,"line_end":167,"column_start":5,"column_end":83}},{"value":"/ Probably uses more gas, but less total disk usage.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":264966,"byte_end":265020,"line_start":168,"line_end":168,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265025,"byte_end":265028,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Note that you need a trusted source (eg. own contract) to set/remove checkpoints.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265033,"byte_end":265118,"line_start":170,"line_end":170,"column_start":5,"column_end":90}},{"value":"/ Useful when the checkpoint setting happens in the same contract as the snapshotting.","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265123,"byte_end":265211,"line_start":171,"line_end":171,"column_start":5,"column_end":93}}]},{"kind":"Enum","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":264841,"byte_end":264849,"line_start":164,"line_end":164,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::snapshot::Strategy","value":"pub enum Strategy { EveryBlock, Never, Selected, }","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265309,"byte_end":265318,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"ChangeSet","qualname":"::snapshot::ChangeSet","value":"ChangeSet { old }","parent":null,"children":[{"krate":0,"index":2305}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2305},"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":265332,"byte_end":265335,"line_start":177,"line_end":177,"column_start":9,"column_end":12},"name":"old","qualname":"::snapshot::ChangeSet::old","value":"std::option::Option<T>","parent":{"krate":0,"index":2303},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3798,"byte_end":3803,"line_start":32,"line_end":32,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4601,"byte_end":4612,"line_start":57,"line_end":57,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":6746,"byte_end":6752,"line_start":135,"line_end":135,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":6985,"byte_end":6988,"line_start":144,"line_end":144,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":7466,"byte_end":7470,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8649,"byte_end":8652,"line_start":27,"line_end":27,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":9164,"byte_end":9170,"line_start":54,"line_end":54,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":9760,"byte_end":9764,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16381,"byte_end":16386,"line_start":24,"line_end":24,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16598,"byte_end":16603,"line_start":33,"line_end":33,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":22550,"byte_end":22555,"line_start":199,"line_end":199,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":23000,"byte_end":23009,"line_start":220,"line_end":220,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":24270,"byte_end":24279,"line_start":261,"line_end":261,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45926,"byte_end":45936,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46422,"byte_end":46432,"line_start":56,"line_end":56,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":50855,"byte_end":50865,"line_start":173,"line_end":173,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51931,"byte_end":51941,"line_start":202,"line_end":202,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52388,"byte_end":52398,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99618,"byte_end":99636,"line_start":25,"line_end":25,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100721,"byte_end":100739,"line_start":66,"line_end":66,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101641,"byte_end":101659,"line_start":98,"line_end":98,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":105148,"byte_end":105166,"line_start":189,"line_end":189,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106156,"byte_end":106174,"line_start":222,"line_end":222,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106621,"byte_end":106639,"line_start":238,"line_end":238,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138754,"byte_end":138764,"line_start":39,"line_end":39,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":141191,"byte_end":141201,"line_start":128,"line_end":128,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":141748,"byte_end":141758,"line_start":145,"line_end":145,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":142161,"byte_end":142171,"line_start":161,"line_end":161,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":143183,"byte_end":143193,"line_start":195,"line_end":195,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145153,"byte_end":145163,"line_start":250,"line_end":250,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":697},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145957,"byte_end":145967,"line_start":278,"line_end":278,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149301,"byte_end":149312,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":792}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":150100,"byte_end":150111,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":151412,"byte_end":151423,"line_start":107,"line_end":107,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":152289,"byte_end":152300,"line_start":137,"line_end":137,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153204,"byte_end":153215,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160435,"byte_end":160439,"line_start":21,"line_end":21,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":929}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160633,"byte_end":160637,"line_start":30,"line_end":30,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177500,"byte_end":177503,"line_start":17,"line_end":17,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177802,"byte_end":177805,"line_start":30,"line_end":30,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":182744,"byte_end":182747,"line_start":204,"line_end":204,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":182951,"byte_end":182954,"line_start":215,"line_end":215,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183071,"byte_end":183077,"line_start":221,"line_end":221,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183288,"byte_end":183294,"line_start":232,"line_end":232,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183899,"byte_end":183903,"line_start":258,"line_end":258,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":184168,"byte_end":184172,"line_start":270,"line_end":270,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192473,"byte_end":192476,"line_start":28,"line_end":28,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192776,"byte_end":192779,"line_start":42,"line_end":42,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1203}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196218,"byte_end":196221,"line_start":145,"line_end":145,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196696,"byte_end":196699,"line_start":161,"line_end":161,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197828,"byte_end":197831,"line_start":191,"line_end":191,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199009,"byte_end":199012,"line_start":226,"line_end":226,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1227},{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199818,"byte_end":199821,"line_start":259,"line_end":259,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243102,"byte_end":243106,"line_start":21,"line_end":21,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243254,"byte_end":243258,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1286},{"krate":0,"index":1287},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247069,"byte_end":247075,"line_start":52,"line_end":52,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1376},{"krate":0,"index":1377}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247258,"byte_end":247264,"line_start":64,"line_end":64,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1382},{"krate":0,"index":1383}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":248104,"byte_end":248110,"line_start":97,"line_end":97,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1394},{"krate":0,"index":1399},{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273676,"byte_end":273688,"line_start":18,"line_end":18,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1476},{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":274821,"byte_end":274833,"line_start":57,"line_end":57,"column_start":13,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284696,"byte_end":284707,"line_start":24,"line_end":24,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285413,"byte_end":285424,"line_start":54,"line_end":54,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285849,"byte_end":285860,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":289137,"byte_end":289148,"line_start":165,"line_end":165,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1588},{"krate":0,"index":1590}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290140,"byte_end":290151,"line_start":200,"line_end":200,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":260204,"byte_end":260212,"line_start":31,"line_end":31,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":261169,"byte_end":261177,"line_start":64,"line_end":64,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":3798,"byte_end":3803,"line_start":32,"line_end":32,"column_start":29,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":4601,"byte_end":4612,"line_start":57,"line_end":57,"column_start":27,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":5112,"byte_end":5122,"line_start":74,"line_end":74,"column_start":24,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":990},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":5129,"byte_end":5134,"line_start":74,"line_end":74,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":6746,"byte_end":6752,"line_start":135,"line_end":135,"column_start":26,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":6985,"byte_end":6988,"line_start":144,"line_end":144,"column_start":26,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/bound.rs","byte_start":7466,"byte_end":7470,"line_start":162,"line_end":162,"column_start":26,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":18,"index":3269},"to":{"krate":0,"index":36}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":8649,"byte_end":8652,"line_start":27,"line_end":27,"column_start":25,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":102}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":9164,"byte_end":9170,"line_start":54,"line_end":54,"column_start":25,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":102}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/de.rs","byte_start":9760,"byte_end":9764,"line_start":81,"line_end":81,"column_start":25,"column_end":29},"kind":{"Impl":{"id":15}},"from":{"krate":18,"index":3269},"to":{"krate":0,"index":102}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16381,"byte_end":16386,"line_start":24,"line_end":24,"column_start":13,"column_end":18},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":16598,"byte_end":16603,"line_start":33,"line_end":33,"column_start":43,"column_end":48},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":22550,"byte_end":22555,"line_start":199,"line_end":199,"column_start":43,"column_end":48},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":187},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":23000,"byte_end":23009,"line_start":220,"line_end":220,"column_start":26,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":7914}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/deque.rs","byte_start":24270,"byte_end":24279,"line_start":261,"line_end":261,"column_start":37,"column_end":46},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":226},"to":{"krate":2,"index":7766}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37228,"byte_end":37233,"line_start":12,"line_end":12,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/endian.rs","byte_start":37236,"byte_end":37240,"line_start":12,"line_end":12,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":253}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":45926,"byte_end":45936,"line_start":36,"line_end":36,"column_start":19,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":46422,"byte_end":46432,"line_start":56,"line_end":56,"column_start":19,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":50855,"byte_end":50865,"line_start":173,"line_end":173,"column_start":19,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":51931,"byte_end":51941,"line_start":202,"line_end":202,"column_start":19,"column_end":29},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_map.rs","byte_start":52388,"byte_end":52398,"line_start":218,"line_end":218,"column_start":19,"column_end":29},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":379},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":99618,"byte_end":99636,"line_start":25,"line_end":25,"column_start":19,"column_end":37},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":100721,"byte_end":100739,"line_start":66,"line_end":66,"column_start":19,"column_end":37},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":101641,"byte_end":101659,"line_start":98,"line_end":98,"column_start":19,"column_end":37},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":105148,"byte_end":105166,"line_start":189,"line_end":189,"column_start":19,"column_end":37},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106156,"byte_end":106174,"line_start":222,"line_end":222,"column_start":19,"column_end":37},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexed_snapshot.rs","byte_start":106621,"byte_end":106639,"line_start":238,"line_end":238,"column_start":19,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":507},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":138754,"byte_end":138764,"line_start":39,"line_end":39,"column_start":21,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":141191,"byte_end":141201,"line_start":128,"line_end":128,"column_start":34,"column_end":44},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":638},"to":{"krate":0,"index":865}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":141748,"byte_end":141758,"line_start":145,"line_end":145,"column_start":21,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":142161,"byte_end":142171,"line_start":161,"line_end":161,"column_start":21,"column_end":31},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":143183,"byte_end":143193,"line_start":195,"line_end":195,"column_start":21,"column_end":31},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145153,"byte_end":145163,"line_start":250,"line_end":250,"column_start":21,"column_end":31},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/multi.rs","byte_start":145957,"byte_end":145967,"line_start":278,"line_end":278,"column_start":21,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":149301,"byte_end":149312,"line_start":36,"line_end":36,"column_start":21,"column_end":32},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":150100,"byte_end":150111,"line_start":65,"line_end":65,"column_start":34,"column_end":45},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":778},"to":{"krate":0,"index":865}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":151412,"byte_end":151423,"line_start":107,"line_end":107,"column_start":21,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":152289,"byte_end":152300,"line_start":137,"line_end":137,"column_start":21,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/indexes/unique.rs","byte_start":153204,"byte_end":153215,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156257,"byte_end":156262,"line_start":7,"line_end":7,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":873}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/int_key.rs","byte_start":156265,"byte_end":156269,"line_start":7,"line_end":7,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3034},"to":{"krate":0,"index":873}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160435,"byte_end":160439,"line_start":21,"line_end":21,"column_start":13,"column_end":17},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/item.rs","byte_start":160633,"byte_end":160637,"line_start":30,"line_end":30,"column_start":13,"column_end":17},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177500,"byte_end":177503,"line_start":17,"line_end":17,"column_start":26,"column_end":29},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":2921}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":177802,"byte_end":177805,"line_start":30,"line_end":30,"column_start":31,"column_end":34},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2052},"to":{"krate":2,"index":2675}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":178725,"byte_end":178730,"line_start":55,"line_end":55,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2645},"to":{"krate":0,"index":990}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":182744,"byte_end":182747,"line_start":204,"line_end":204,"column_start":29,"column_end":32},"kind":{"Impl":{"id":80}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":990}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":182951,"byte_end":182954,"line_start":215,"line_end":215,"column_start":27,"column_end":30},"kind":{"Impl":{"id":81}},"from":{"krate":5,"index":7089},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183071,"byte_end":183077,"line_start":221,"line_end":221,"column_start":29,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":990}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183288,"byte_end":183294,"line_start":232,"line_end":232,"column_start":27,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":5,"index":7626},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":183899,"byte_end":183903,"line_start":258,"line_end":258,"column_start":29,"column_end":33},"kind":{"Impl":{"id":84}},"from":{"krate":18,"index":3269},"to":{"krate":0,"index":990}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/keys.rs","byte_start":184168,"byte_end":184172,"line_start":270,"line_end":270,"column_start":27,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":18,"index":3269},"to":{"krate":0,"index":1039}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192473,"byte_end":192476,"line_start":28,"line_end":28,"column_start":16,"column_end":19},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":192776,"byte_end":192779,"line_start":42,"line_end":42,"column_start":16,"column_end":19},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196218,"byte_end":196221,"line_start":145,"line_end":145,"column_start":16,"column_end":19},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":196696,"byte_end":196699,"line_start":161,"line_end":161,"column_start":16,"column_end":19},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":197828,"byte_end":197831,"line_start":191,"line_end":191,"column_start":16,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199009,"byte_end":199012,"line_start":226,"line_end":226,"column_start":16,"column_end":19},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/map.rs","byte_start":199818,"byte_end":199821,"line_start":259,"line_end":259,"column_start":16,"column_end":19},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243102,"byte_end":243106,"line_start":21,"line_end":21,"column_start":19,"column_end":23},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2197},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/path.rs","byte_start":243254,"byte_end":243258,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2197},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247069,"byte_end":247075,"line_start":52,"line_end":52,"column_start":22,"column_end":28},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2207},"to":{"krate":2,"index":3242}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":247258,"byte_end":247264,"line_start":64,"line_end":64,"column_start":15,"column_end":21},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/prefix.rs","byte_start":248104,"byte_end":248110,"line_start":97,"line_end":97,"column_start":19,"column_end":25},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":273676,"byte_end":273688,"line_start":18,"line_end":18,"column_start":13,"column_end":25},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/item.rs","byte_start":274821,"byte_end":274833,"line_start":57,"line_end":57,"column_start":13,"column_end":25},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":284696,"byte_end":284707,"line_start":24,"line_end":24,"column_start":16,"column_end":27},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285413,"byte_end":285424,"line_start":54,"line_end":54,"column_start":16,"column_end":27},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":285849,"byte_end":285860,"line_start":68,"line_end":68,"column_start":16,"column_end":27},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":289137,"byte_end":289148,"line_start":165,"line_end":165,"column_start":16,"column_end":27},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/map.rs","byte_start":290140,"byte_end":290151,"line_start":200,"line_end":200,"column_start":16,"column_end":27},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":260204,"byte_end":260212,"line_start":31,"line_end":31,"column_start":16,"column_end":24},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/trevorclarke/.cargo/registry/src/github.com-1ecc6299db9ec823/cw-storage-plus-0.16.0/src/snapshot/mod.rs","byte_start":261169,"byte_end":261177,"line_start":64,"line_end":64,"column_start":16,"column_end":24},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2221},"to":{"krate":4294967295,"index":4294967295}}]}